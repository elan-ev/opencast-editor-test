{"version":3,"sources":["types.ts","redux/mainMenuSlice.ts","config.ts","redux/finishSlice.ts","cssStyles.tsx","util/client.js","util/utilityFunctions.ts","redux/videoSlice.ts","main/MainMenu.tsx","main/Video.tsx","util/waveform.js","main/Timeline.tsx","main/CuttingActions.tsx","main/FinishMenu.tsx","redux/workflowPostSlice.ts","main/Save.tsx","redux/endSlice.ts","main/Discard.tsx","redux/workflowPostAndProcessSlice.ts","main/WorkflowConfiguration.tsx","main/WorkflowSelection.tsx","main/Finish.tsx","main/MainContent.tsx","main/TheEnd.tsx","main/Body.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["MainMenuStateNames","configFileSettings","urlParameterSettings","settings","initialState","value","cutting","mainMenuSlice","createSlice","name","reducers","setState","state","action","payload","actions","selectMainMenuState","mainMenuState","finishSlice","pageNumber","setPageNumber","selectFinishState","finishState","selectPageNumber","defaultSettings","mediaPackageId","undefined","opencast","url","window","location","origin","password","metadata","show","thumbnail","init","a","loadContextSettings","then","result","validate","urlParams","URLSearchParams","search","rawUrlSettings","forEach","key","obj","segments","split","slice","segment","length","merge","all","basepath","process","endsWith","settingsPath","REACT_APP_SETTINGS_PATH","base","startsWith","fetch","response","console","warn","status","debug","ok","error","statusText","headers","get","parseToml","text","SyntaxError","allowParse","src","sourceDescription","schema","path","validateValue","validateObj","validation","newValue","e","out","newPath","SCHEMA","types","v","Error","string","boolean","b","deepmerge","arrayMerge","array","destinationArray","sourceArray","options","GlobalStyle","styles","globalStyle","basicButtonStyle","css","borderRadius","cursor","transitionDuration","transitionProperty","transform","display","justifyContent","alignItems","gap","textAlign","nagivationButtonStyle","backOrContinueStyle","flexDirection","ariaLive","errorBoxStyle","errorStatus","borderColor","borderStyle","fontWeight","padding","client","endpoint","body","customConfig","authHeaders","encoded","btoa","unescape","encodeURIComponent","config","method","JSON","stringify","includes","data","parse","Promise","reject","message","post","roundToDecimalPlace","num","decimalPlace","decimalFactor","Math","pow","round","Number","EPSILON","convertMsToReadableString","ms","hours","Date","toISOString","substr","minutes","seconds","parseInt","push","join","isPlaying","isPlayPreview","currentlyAt","id","nanoid","start","end","deleted","tracks","activeSegmentIndex","selectedWorkflowIndex","previewTriggered","videoURLs","videoCount","duration","title","presenters","workflows","fetchVideoInformation","createAsyncThunk","videoSlice","setIsPlaying","setIsPlayPreview","setPreviewTriggered","setCurrentlyAt","updateActiveSegment","skipDeletedSegments","setCurrentlyAtInSeconds","addSegment","cut","segmentA","segmentB","splice","markAsDeletedOrAlive","setSelectedWorkflowIndex","mergeLeft","mergeSegments","mergeRight","extraReducers","builder","addCase","pending","fulfilled","reduce","o","uri","parseSegments","sort","n1","n2","displayOrder","rejected","findIndex","element","newSegments","mergeSegmentIndex","min","max","endTime","index","selectIsPlaying","videoState","selectIsPlayPreview","selectPreviewTriggered","selectCurrentlyAt","selectCurrentlyAtInSeconds","selectSegments","selectActiveSegmentIndex","selectIsCurrentSegmentAlive","selectSelectedWorkflowIndex","selectVideoURL","selectVideoCount","selectDuration","selectDurationInSeconds","selectTitle","selectPresenters","selectTracks","selectWorkflows","MainMenuButton","iconName","stateName","dispatch","useDispatch","activeState","useSelector","onMenuItemClicked","finish","mainMenuButtonStyle","width","height","backgroundColor","role","tabIndex","onClick","onKeyDown","event","icon","size","MainMenu","mainMenuStyle","borderRight","flexShrink","aria-label","faFilm","faListUl","faPhotoVideo","faSignOutAlt","VideoPlayer","isMuted","testTmp","ref","useRef","useState","ready","setReady","errorState","setError","onProgressCallback","playedSeconds","onReadyCallback","onEndedCallback","useEffect","current","seekTo","onErrorCallback","playerConfig","file","attributes","playing","muted","onProgress","progressInterval","onReady","onEnded","onError","disablePictureInPicture","VideoControls","videoControlsRowStyle","leftSideBoxStyle","rightSideBoxStyle","PreviewMode","switchPlayPreview","previewModeStyle","switchIconStyle","faToggleOn","faToggleOff","aria-checked","aria-hidden","PlayButton","switchIsPlaying","justifySelf","faPause","faPlay","aria-pressed","TimeDisplay","VideoHeader","presenter_header","titleStyle","titleStyleBold","Video","videoURLStatus","videoPlayers","i","videoAreaStyle","borderBottom","videoPlayerAreaStyle","Waveform","opts","this","audioContext","AudioContext","oCanvas","document","createElement","buffer","WIDTH","HEIGHT","channelData","waveformImage","audioBuffer","aveRMS","peakRMS","numberSamples","waveformType","drawWaveform","drawCanvasWaveform","setDimensions","samples","type","delegateToWorker","worker","media","generateWaveform","getAudioData","_completeFuncs","fn","svgPath","catch","log","Object","defineProperty","set","opt","svgLength","prototype","constructor","ocCtx","getContext","decodeAudioData","arraybuffer","resolve","res","rej","ArrayBuffer","Blob","reader","FileReader","onload","readAsArrayBuffer","audiobuffer","dropSamples","getChannelData","amp","fillStyle","fillRect","lineWidth","strokeStyle","sliceWidth","x","beginPath","moveTo","sample","y","lineTo","stroke","sqrt","aveDBs","toDataURL","requestedLength","divider","filter","Worker","addEventListener","workerCommunication","bind","postMessage","setSVGpath","removeEventListener","terminate","len","createElementNS","setAttribute","oncomplete","Scrubber","timelineWidth","controlledPosition","setControlledPosition","isGrabbed","setIsGrabbed","keyboardJumpDelta","setKeyboardJumpDelta","wasCurrentlyAtRef","nodeRef","React","updateXPos","scrubberStyle","position","zIndex","boxShadow","scrubberDragHandleStyle","scrubberDragHandleIconStyle","arrowUpStyle","arrowDownStyle","onStart","onStop","axis","bounds","disabled","aria-grabbed","altKey","faBars","SegmentsList","segmentsStyle","paddingTop","map","background","active","borderWidth","boxSizing","Waveforms","images","setImages","waveformDisplayTestStyle","waveformsProcessed","videoURL","_index","blob","xhr","XMLHttpRequest","open","responseType","File","image","numSamples","send","alt","faSpinner","spin","Timeline","useResizeObserver","timelineStyle","cuttingActionButtonStyle","CuttingActionsButton","actionName","tooltip","ariaLabelText","dispatchAction","MarkAsDeletedButton","isCurrentSegmentAlive","faTrash","faTrashRestore","CuttingActions","cuttingStyle","blockStyle","faCut","faStepBackward","faStepForward","FinishMenuButton","finishMenuButtonStyle","fontSize","FinishMenu","finishMenuStyle","faSave","faFileExport","faTimesCircle","postVideoInformation","argument","convertSegments","workflowPostSlice","selected","selectStatus","workflowPostState","selectError","workflowPostAndProcessState","SaveButton","workflowStatus","faCheck","faExclamationCircle","save","aria-live","aria-atomic","ariaSaveUpdate","Save","postWorkflowStatus","postError","saveStyle","label","faChevronLeft","endSlice","setEnd","hasEnded","selectIsEnd","endState","selectEndState","DiscardButton","discard","Discard","cancelStyle","postVideoInformationWithWorkflow","workflow","workflowPostAndProcessSlice","SaveAndProcessButton","saveAndProcess","saveButtonStyle","WorkflowConfiguration","postAndProcessWorkflowStatus","postAndProcessError","workflowConfigurationStyle","faTools","WorkflowButton","workflowIndex","selectWorkflowIndex","workflowButtonStyle","WorkflowSelection","workflowSelectionStyle","workflowSelectionSelectionStyle","flexWrap","maxHeight","description","PageButton","onPageChange","pageButtonStyle","Finish","pageZeroStyle","pageOneStyle","pageTwoStyle","MainContent","paddingRight","paddingLeft","finishStyle","defaultStyle","StartOverButton","reloadPage","reload","TheEnd","theEndStyle","faCheckCircle","Body","isEnd","bodyStyle","Fragment","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mainMenuStateReducer","finishStateReducer","videoReducer","workflowPostReducer","workflowPostAndProcessReducer","endReducer","initialize","race","setTimeout","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.c7bd31b3.chunk.js","sourcesContent":["export interface Segment {\n  id: string,\n  start: number,\n  end: number,\n  deleted: boolean,\n}\n\nexport interface Track {\n  id: string,\n  uri: string,\n  flavor: any,\n  audioStream: any,\n  videoStream: any,\n}\n\nexport interface Workflow {\n  id: string,\n  name: string,\n  description: string,\n  displayOrder: number,\n}\n\nexport interface TimelineState {\n  segments: Segment[]\n  scrubberPos: number\n}\n\nexport interface PostEditArgument {\n  segments: Segment[]\n  tracks: Track[]\n}\n\nexport interface PostAndProcessEditArgument extends PostEditArgument{\n  workflow: [{id: string}]\n}\n\nexport enum MainMenuStateNames {\n  cutting = \"Cutting\",\n  metadata = \"Metadata\",\n  thumbnail = \"Thumbnail\",\n  finish = \"Finish\",\n}\n\nexport interface httpRequestState {\n  status: 'idle' | 'loading' | 'success' | 'failed',\n  error: string | undefined\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { MainMenuStateNames} from '../types'\n\nexport interface mainMenu {\n  value: MainMenuStateNames,\n}\n\nconst initialState: mainMenu = {\n  value: MainMenuStateNames.cutting,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const mainMenuSlice = createSlice({\n  name: 'mainMenuState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<mainMenu[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = mainMenuSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectMainMenuState = (state: { mainMenuState: { value: mainMenu[\"value\"]; }; }) => state.mainMenuState.value\n\nexport default mainMenuSlice.reducer\n","/**\n * Loads config values from\n * - a settings file\n * - GET parameters\n * and exports them.\n * Code was largely adapted from https://github.com/elan-ev/opencast-studio/blob/master/src/settings.js (January 11th, 2021)\n */\nimport parseToml from '@iarna/toml/parse-string';\nimport deepmerge from 'deepmerge';\n\n/**\n * Local constants\n */\nconst CONTEXT_SETTINGS_FILE = 'editor-settings.toml';\n\n// Sources that values can come from.\nconst SRC_SERVER = 'src-server';\nconst SRC_URL = 'src-url';\n\n/**\n * Settings interface\n */\ninterface iSettings {\n  mediaPackageId: string | undefined,\n  opencast: {\n    url: string,\n    name: string | undefined,\n    password: string | undefined,\n  },\n  metadata: {\n    show: boolean,\n  },\n  thumbnail: {\n    show: boolean,\n  }\n}\n\n/**\n * Settings objects\n * defaultSettings: Sets default values\n * configFileSettings: contains values from the config file\n * urlParameterSettings: contains values from GET parameters\n * settings: contains the combined values from all other setting objects\n */\nvar defaultSettings: iSettings = {\n  mediaPackageId: undefined,\n  opencast: {\n    url: window.location.origin,\n    name: undefined,\n    password: undefined,\n  },\n  metadata: {\n    show: true,\n  },\n  thumbnail: {\n    show: true,\n  }\n}\nvar configFileSettings: iSettings\nvar urlParameterSettings: iSettings\nexport var settings: iSettings\n\n/**\n * Entry point. Loads values from settings into the exported variables\n * Priorities are:\n * 1. GET Parameters\n * 2. Settings file\n * 3. Default values\n */\nexport const init = async () => {\n  // Get settings from config file\n  await loadContextSettings().then((result) => {\n    configFileSettings = validate(result, false, SRC_SERVER, \"from server settings file\")\n  })\n\n  // Get settings from URL query.\n  var urlParams = new URLSearchParams(window.location.search);\n\n  let rawUrlSettings = {};\n  urlParams.forEach(function(value, key) {\n    // Create empty objects for full path (if the key contains '.') and set\n    // the value at the end.\n    let obj : {[k: string]: any} = rawUrlSettings;\n    const segments = key.split('.');\n    segments.slice(0, -1).forEach((segment) => {\n      if (!(segment in obj)) {\n        obj[segment] = {};\n      }\n      obj = obj[segment];\n    });\n    obj[segments[segments.length - 1]] = value;\n  });\n\n  urlParameterSettings = validate(rawUrlSettings, true, SRC_URL, 'given as URL GET parameter');\n\n  // Combine results\n  settings = merge.all([defaultSettings, configFileSettings, urlParameterSettings]) as iSettings;\n};\n\n/**\n * Attempts to load toml settings file\n */\nconst loadContextSettings = async () => {\n\n  // Try to retrieve the context settings.\n  let basepath = process.env.PUBLIC_URL || '/';\n  if (!basepath.endsWith('/')) {\n    basepath += '/';\n  }\n\n  // Construct path to settings file. If the `REACT_APP_SETTINGS_PATH` is\n  // given and starts with '/', it is interpreted as absolute path from the\n  // server root.\n  const settingsPath = process.env.REACT_APP_SETTINGS_PATH || CONTEXT_SETTINGS_FILE;\n  const base = settingsPath.startsWith('/') ? '' : basepath;\n  const url = `${window.location.origin}${base}${settingsPath}`;\n  let response;\n  try {\n    response = await fetch(url);\n  } catch (e) {\n    console.warn(`Could not access '${settingsPath}' due to network error!`, e || \"\");\n    return null;\n  }\n\n  if (response.status === 404) {\n    // If the settings file was not found, we silently ignore the error. We\n    // expect many installation to provide this file.\n    console.debug(`'${settingsPath}' returned 404: ignoring`);\n    return null;\n  } else if (!response.ok) {\n    console.error(\n      `Fetching '${settingsPath}' failed: ${response.status} ${response.statusText}`\n    );\n    return null;\n  }\n\n  if (response.headers.get('Content-Type')?.startsWith('text/html')) {\n    console.warn(`'${settingsPath}' request has 'Content-Type: text/html' -> ignoring...`);\n    return null;\n  }\n\n  try {\n    return parseToml(await response.text());\n  } catch (e) {\n    console.error(`Could not parse '${settingsPath}' as TOML: `, e);\n    throw new SyntaxError(`Could not parse '${settingsPath}' as TOML: ${e}`);\n  }\n\n};\n\n/**\n * Validate the given `obj` with the global settings `SCHEMA`. If `allowParse`\n * is true, string values are attempted to parse into the expected type. `src`\n * must be one of `SRC_SERVER`, `SRC_URL` or `SRC_LOCAL_STORAGE`.\n * `srcDescription` is just a string for error messages specifying where `obj`\n * comes from.\n * */\nconst validate = (obj: Record<string, any> | null, allowParse: boolean, src: string, sourceDescription: string) => {\n  // Validates `obj` with `schema`. `path` is the current path used for error\n  // messages.\n  const validate = (schema: any, obj: Record<string, any> | null, path: string) => {\n    if (typeof schema === 'function') {\n      return validateValue(schema, obj, path);\n    } else {\n      return validateObj(schema, obj, path);\n    }\n  };\n\n  // Validate a settings value with a validation function. Returns the final\n  // value of the setting or `null` if it should be ignored.\n  const validateValue = (validation: (arg0: any, arg1: boolean, arg2: string) => any, value: Record<string, any> | null, path: string) => {\n    try {\n      const newValue = validation(value, allowParse, src);\n      return newValue === undefined ? value : newValue;\n    } catch (e) {\n      console.warn(\n        `Validation of setting '${path}' (${sourceDescription}) with value '${value}' failed: `\n          + `${e}. Ignoring.`\n      );\n      return null;\n    }\n  };\n\n  // Validate a settings object/namespace. `schema` and `obj` need to be\n  // objects.\n  const validateObj = (schema: any, obj: Record<string, any> | null, path: string) => {\n    // We iterate through all keys of the given settings object, checking if\n    // each key is valid and recursively validating the value of that key.\n    let out : {[k: string]: any} = {};\n    for (const key in obj) {\n      const newPath = path ? `${path}.${key}` : key;\n      if (key in schema) {\n        const value = validate(schema[key], obj[key], newPath);\n\n        // If `null` is returned, the validation failed and we ignore this\n        // value.\n        if (value !== null) {\n          out[key] = value;\n        }\n      } else {\n        console.warn(\n          `'${newPath}' (${sourceDescription}) is not a valid settings key. Ignoring.`\n        );\n      }\n    }\n\n    return out;\n  };\n\n  return validate(SCHEMA, obj, \"\");\n}\n\n\n// Validation functions for different types.\nconst types = {\n  'string': (v: any, allowParse: any) => {\n    if (typeof v !== 'string') {\n      throw new Error(\"is not a string, but should be\");\n    }\n  },\n  'boolean': (v: string, allowParse: any) => {\n    if (typeof v === 'boolean') {\n      return;\n    }\n\n    if (allowParse) {\n      if (v === 'true') {\n        return true;\n      }\n      if (v === 'false') {\n        return false;\n      }\n      throw new Error(\"can't be parsed as boolean\");\n    } else {\n      throw new Error(\"is not a boolean\");\n    }\n  },\n};\n\n// Defines all potential settings and their types.\n//\n// Each setting value has to be a validation function. Such a function takes two\n// arguments: the input value `v` and the boolean `allowParse` which specifies\n// whether the input might be parsed into the correct type (this is only `true`\n// for GET parameters). The validation should throw an error if the input value\n// is not valid for the setting. If the function returns `undefined`, the input\n// value is valid and used. If the validator returns a different value, the\n// input is valid, but is replaced by that new value. See the `types` object\n// above for some examples.\nconst SCHEMA = {\n  mediaPackageId: types.string,\n  opencast: {\n    url: types.string,\n    name: types.string,\n    password: types.string,\n  },\n  metadata: {\n    show : types.boolean,\n  },\n  thumbnail: {\n    show : types.boolean,\n  }\n}\n\nconst merge = (a: iSettings, b: iSettings) => {\n  return deepmerge(a, b, { arrayMerge });\n};\nmerge.all = (array: object[]) => deepmerge.all(array, { arrayMerge })\nconst arrayMerge = (destinationArray: any, sourceArray: any, options: any) => sourceArray;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface finish {\n  value: \"Save changes\" | \"Start processing\" | \"Discard changes\" | undefined,\n  pageNumber: number,\n}\n\nconst initialState: finish = {\n  value: \"Start processing\",\n  pageNumber: 0,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const finishSlice = createSlice({\n  name: 'finishState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<finish[\"value\"]>) => {\n      state.value = action.payload;\n    },\n    setPageNumber: (state, action) => {\n      state.pageNumber = action.payload;\n    }\n  }\n})\n\n// Export Actions\nexport const { setState, setPageNumber } = finishSlice.actions\n\n// Export Selectors\nexport const selectFinishState = (state: { finishState: { value: finish[\"value\"]; }; }) => state.finishState.value\nexport const selectPageNumber = (state: { finishState: { pageNumber: finish[\"pageNumber\"]; }; }) => state.finishState.pageNumber\n\nexport default finishSlice.reducer\n","/**\n * This file contains general css stylings\n */\nimport { css, Global } from '@emotion/core'\nimport React from \"react\";\n\n/**\n * An emotion component that inserts styles globally\n * Is removed when the styles change or when the Global component unmounts.\n */\nexport const GlobalStyle: React.FC = () => {\n  return (\n    <Global styles={globalStyle} />\n  );\n}\n\n/**\n * CSS for the global style component\n */\nexport const globalStyle = css({\n  body: {\n    backgroundColor: 'snow',\n    fontSize: 'medium',\n    // Makes the body span to the bottom of the page\n    minHeight: \"100vh\",\n  },\n});\n\n/**\n * CSS for buttons\n */\nexport const basicButtonStyle = css({\n  borderRadius: '10px',\n  cursor: \"pointer\",\n  // Animation\n  transitionDuration: \"0.3s\",\n  transitionProperty: \"transform\",\n  \"&:hover\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:focus\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:active\": {\n    transform: 'scale(0.9)',\n  },\n  // Flex position child elements\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  gap: '10px',\n  textAlign: 'center' as const,\n});\n\n/**\n * CSS for nagivation styled buttons\n */\nexport const nagivationButtonStyle = css({\n  width: '200px',\n  padding: '16px',\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  justifyContent: 'space-around'\n })\n\n/**\n * CSS for a container that holds back/forward buttons\n */\nexport const backOrContinueStyle = css(({\n  display: 'flex',\n  flexDirection: 'row' as const,\n  gap: '20px',\n}))\n\n/**\n * CSS for ariaLive regions that should not be visible\n */\nexport const ariaLive = css({\n  position: 'absolute',\n  left: '-99999px',\n  height: '1px',\n  width: '1px',\n  overflow: 'hidden',\n})\n\n/**\n * CSS for displaying of errors\n */\nexport const errorBoxStyle = (errorStatus: boolean) => {\n  return (\n    css({\n      ...(!errorStatus) && {display: \"none\"},\n      borderColor: 'red',\n      borderStyle: 'dashed',\n      fontWeight: 'bold',\n      padding: '10px',\n    })\n  );\n}\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nimport { settings } from '../config';\n\n/**\n * Client I stole this form a react tutorial\n */\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  // Attempt Http basic auth if we got credentials\n  let authHeaders = {}\n  if (settings.opencast.name && settings.opencast.password) {\n    const encoded = btoa(unescape(encodeURIComponent(\n      settings.opencast.name + \":\" + settings.opencast.password\n    )));\n    authHeaders = { 'Authorization': `Basic ${encoded}` };\n  }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n      ...authHeaders,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  let text\n  try {\n    const response = await window.fetch(endpoint, config)\n    text = await response.text()\n\n    if (response.url.includes(\"login.html\")) {\n      throw new Error(\"Got redirected to login page, authentification failed.\")\n    }\n\n    if (response.ok) {\n      text.length ? data = JSON.parse(text) : data = ''\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","export const roundToDecimalPlace = (num: number, decimalPlace: number) => {\n  let decimalFactor = Math.pow(10, decimalPlace)\n  return Math.round((num + Number.EPSILON) * decimalFactor) / decimalFactor\n}\n\n\n// Returns a promise that resolves after `ms` milliseconds.\nexport const sleep = (ms: number) => new Promise((resolve, reject) => setTimeout(resolve, ms));\n\n\n// Get an understandable time string for ARIA\nexport const convertMsToReadableString = (ms: number): string => {\n  let hours = new Date((ms ? ms : 0)).toISOString().substr(11, 2)\n  let minutes = new Date((ms ? ms : 0)).toISOString().substr(14, 2)\n  let seconds = new Date((ms ? ms : 0)).toISOString().substr(17, 2)\n\n  let result = []\n  if (parseInt(hours) > 0) { result.push(hours + \" hours, \")}\n  if (parseInt(minutes) > 0 || parseInt(hours) > 0) { result.push(minutes + \" minutes, \")}\n  result.push(seconds + \" seconds\")\n\n  return result.join(\"\")\n}","import { createSlice, nanoid, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\nimport { Segment, httpRequestState, Track, Workflow }  from '../types'\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\nimport { WritableDraft } from 'immer/dist/internal';\nimport { settings } from '../config';\n\nexport interface video {\n  isPlaying: boolean,             // Are videos currently playing?\n  isPlayPreview: boolean,         // Should deleted segments be skipped?\n  previewTriggered: boolean,      // Basically acts as a callback for the video players.\n  currentlyAt: number,            // Position in the video in milliseconds\n  segments: Segment[],\n  tracks: Track[],\n  activeSegmentIndex: number,     // Index of the segment that is currenlty hovered\n  selectedWorkflowIndex: number,  // Index of the currently selected workflow\n\n  videoURLs: string[],  // Links to each video\n  videoCount: number,   // Total number of videos\n  duration: number,     // Video duration in milliseconds\n  title: string,\n  presenters: string[],\n  workflows: Workflow[],\n}\n\nconst initialState: video & httpRequestState = {\n  isPlaying: false,\n  isPlayPreview: true,\n  currentlyAt: 0,   // Position in the video in milliseconds\n  segments: [{id: nanoid(), start: 0, end: 1, deleted: false}],\n  tracks: [],\n  activeSegmentIndex: 0,\n  selectedWorkflowIndex: 0,\n  previewTriggered: false,\n\n  videoURLs: [],\n  videoCount: 0,\n  duration: 0,\n  title: '',\n  presenters: [],\n  workflows: [],\n\n  status: 'idle',\n  error: undefined,\n}\n\nexport const fetchVideoInformation = createAsyncThunk('video/fetchVideoInformation', async () => {\n  if (!settings.mediaPackageId) {\n    throw new Error(\"Missing mediaPackageId\")\n  }\n\n  // const response = await client.get('https://legacy.opencast.org/admin-ng/tools/ID-dual-stream-demo/editor.json')\n  const response = await client.get(`${settings.opencast.url}/editor/${settings.mediaPackageId}/edit.json`)\n  return response\n})\n\n/**\n * Slice for the state of the \"video\"\n * Treats the multitude of videos that may exist as one video\n */\nexport const videoSlice = createSlice({\n  name: 'videoState',\n  initialState,\n  reducers: {\n    setIsPlaying: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlaying = action.payload;\n    },\n    setIsPlayPreview: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlayPreview = action.payload;\n    },\n    setPreviewTriggered: (state, action) => {\n      state.previewTriggered = action.payload\n    },\n    setCurrentlyAt: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload, 0);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    setCurrentlyAtInSeconds: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload * 1000, 0);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    addSegment: (state, action: PayloadAction<video[\"segments\"][0]>) => {\n      state.segments.push(action.payload)\n    },\n    cut: (state) => {\n      // If we're exactly between two segments, we can't split the current segment\n      if (state.segments[state.activeSegmentIndex].start === state.currentlyAt ||\n          state.segments[state.activeSegmentIndex].end === state.currentlyAt ) {\n        return state;\n      }\n\n      // Make two (new) segments out of it\n      let segmentA : Segment =  {id: nanoid(),\n        start: state.segments[state.activeSegmentIndex].start,\n        end: state.currentlyAt,\n        deleted: state.segments[state.activeSegmentIndex].deleted}\n      let segmentB : Segment =  {id: nanoid(),\n        start: state.currentlyAt,\n        end: state.segments[state.activeSegmentIndex].end,\n        deleted: state.segments[state.activeSegmentIndex].deleted}\n\n      // Add the new segments and remove the old one\n      state.segments.splice(state.activeSegmentIndex, 1, segmentA, segmentB);\n    },\n    markAsDeletedOrAlive: (state) => {\n      state.segments[state.activeSegmentIndex].deleted = !state.segments[state.activeSegmentIndex].deleted\n    },\n    setSelectedWorkflowIndex: (state, action: PayloadAction<video[\"selectedWorkflowIndex\"]>) => {\n      state.selectedWorkflowIndex = action.payload\n    },\n    mergeLeft: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex - 1)\n    },\n    mergeRight: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex + 1)\n    },\n  },\n  // For Async Requests\n  extraReducers: builder => {\n    builder.addCase(\n      fetchVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n\n        // // Old API\n        // // eslint-disable-next-line no-sequences\n        // state.videoURLs = action.payload.previews.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        // state.videoCount = action.payload.previews.length\n        // state.duration = action.payload.duration\n        // state.title = action.payload.title\n        // state.presenters = action.payload.presenters\n        // state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        // state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n        //   if (n1.displayOrder > n2.displayOrder) { return 1; }\n        //   if (n1.displayOrder < n2.displayOrder) { return -1; }\n        //   return 0;\n        // });\n\n        // New API\n        // eslint-disable-next-line no-sequences\n        state.videoURLs = action.payload.tracks.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        state.videoCount = action.payload.tracks.length\n        state.duration = action.payload.duration\n        state.title = action.payload.title\n        state.presenters = []\n        state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        state.tracks = action.payload.tracks\n        state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n          if (n1.displayOrder > n2.displayOrder) { return 1; }\n          if (n1.displayOrder < n2.displayOrder) { return -1; }\n          return 0;\n        });\n    })\n    builder.addCase(\n      fetchVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\n/**\n * Helper function to update the activeSegmentIndex\n * @param state\n */\nconst updateActiveSegment = (state: WritableDraft<video>) => {\n  state.activeSegmentIndex = state.segments.findIndex(element =>\n    element.start <= state.currentlyAt && element.end >= state.currentlyAt)\n  // If there is an error, assume the first (the starting) segment\n  if(state.activeSegmentIndex < 0) {\n    state.activeSegmentIndex = 0\n  }\n}\n\n/**\n * Helper Function for testing with current/old editor API\n */\nconst parseSegments = (segments: Segment[], duration: number) => {\n  let newSegments : Segment[] = []\n\n  if (segments.length === 0) {\n    newSegments.push({id: nanoid(), start: 0, end: duration, deleted: false})\n  }\n\n  segments.forEach((segment: Segment) => {\n    newSegments.push({id: nanoid(), start: segment.start, end: segment.end, deleted: segment.deleted})\n  });\n  return newSegments\n}\n\n/**\n * Helper function for merging two segments\n */\nconst mergeSegments = (state: WritableDraft<video>, activeSegmentIndex: number, mergeSegmentIndex: number) => {\n  // Check if mergeSegmentIndex is valid\n  if (mergeSegmentIndex < 0 || mergeSegmentIndex > state.segments.length - 1) {\n    return\n  }\n\n  // Increase activeSegment length\n  state.segments[activeSegmentIndex].start = Math.min(\n    state.segments[activeSegmentIndex].start, state.segments[mergeSegmentIndex].start)\n  state.segments[activeSegmentIndex].end = Math.max(\n    state.segments[activeSegmentIndex].end, state.segments[mergeSegmentIndex].end)\n\n  // Remove the other segment\n  state.segments.splice(mergeSegmentIndex, 1);\n\n  // Update active segment\n  updateActiveSegment(state)\n}\n\nconst skipDeletedSegments = (state: WritableDraft<video>) => {\n  if(state.isPlaying && state.segments[state.activeSegmentIndex].deleted && state.isPlayPreview) {\n      let endTime = state.segments[state.activeSegmentIndex].end\n      let index = state.activeSegmentIndex\n      while (index < state.segments.length && state.segments[index].deleted) {\n        endTime = state.segments[index].end\n        index++\n      }\n      state.currentlyAt = endTime\n      state.previewTriggered = true\n    }\n}\n\nexport const { setIsPlaying, setIsPlayPreview, setCurrentlyAt, setCurrentlyAtInSeconds, addSegment, cut, markAsDeletedOrAlive,\n  setSelectedWorkflowIndex, mergeLeft, mergeRight, setPreviewTriggered } = videoSlice.actions\n\n// Export selectors\n// Selectors mainly pertaining to the video state\nexport const selectIsPlaying = (state: { videoState: { isPlaying: video[\"isPlaying\"] }; }) =>\n  state.videoState.isPlaying\nexport const selectIsPlayPreview = (state: { videoState: { isPlayPreview: video[\"isPlayPreview\"] }; }) =>\n  state.videoState.isPlayPreview\nexport const selectPreviewTriggered = (state: { videoState: { previewTriggered: video[\"previewTriggered\"] } }) =>\n  state.videoState.previewTriggered\nexport const selectCurrentlyAt = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt\nexport const selectCurrentlyAtInSeconds = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt / 1000\nexport const selectSegments = (state: { videoState: { segments: video[\"segments\"] } }) =>\n  state.videoState.segments\nexport const selectActiveSegmentIndex = (state: { videoState: { activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  state.videoState.activeSegmentIndex\nexport const selectIsCurrentSegmentAlive = (state: { videoState:\n  { segments: { [x: number]: { deleted: boolean; }; }; activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  !state.videoState.segments[state.videoState.activeSegmentIndex].deleted\nexport const selectSelectedWorkflowIndex = (state: { videoState:\n  { selectedWorkflowIndex: video[\"selectedWorkflowIndex\"]; }; }) =>\n  state.videoState.selectedWorkflowIndex\n\n// Selectors mainly pertaining to the information fetched from Opencast\nexport const selectVideoURL = (state: { videoState: { videoURLs: video[\"videoURLs\"] } }) => state.videoState.videoURLs\nexport const selectVideoCount = (state: { videoState: { videoCount: video[\"videoCount\"] } }) => state.videoState.videoCount\nexport const selectDuration = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration\nexport const selectDurationInSeconds = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration / 1000\nexport const selectTitle = (state: { videoState: { title: video[\"title\"] } }) => state.videoState.title\nexport const selectPresenters = (state: { videoState: { presenters: video[\"presenters\"] } }) => state.videoState.presenters\nexport const selectTracks = (state: { videoState: { tracks: video[\"tracks\"] } }) =>\n  state.videoState.tracks\nexport const selectWorkflows = (state: { videoState: { workflows: video[\"workflows\"] } }) => state.videoState.workflows\n\nexport default videoSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm, faListUl, faPhotoVideo, faSignOutAlt, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setState, selectMainMenuState, mainMenu } from '../redux/mainMenuSlice'\nimport { setPageNumber } from '../redux/finishSlice'\n\nimport { MainMenuStateNames } from '../types'\nimport { settings } from '../config'\nimport { basicButtonStyle } from '../cssStyles'\nimport { setIsPlaying } from \"../redux/videoSlice\";\n\n/**\n * A container for selecting the functionality shown in the main part of the app\n */\nconst MainMenu: React.FC<{}> = () => {\n\n  const mainMenuStyle = css({\n    borderRight: '1px solid #BBB',\n    width: '100px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    flexShrink: 0,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  });\n\n  return (\n    <nav css={mainMenuStyle} title=\"Main Menu\" role=\"navigation\" aria-label=\"Main Navigation\">\n      <MainMenuButton iconName={faFilm} stateName={MainMenuStateNames.cutting}/>\n      {settings.metadata.show && <MainMenuButton iconName={faListUl} stateName={MainMenuStateNames.metadata}/>}\n      {settings.thumbnail.show && <MainMenuButton iconName={faPhotoVideo} stateName={MainMenuStateNames.thumbnail}/>}\n      <MainMenuButton iconName={faSignOutAlt} stateName={MainMenuStateNames.finish}/>\n    </nav>\n  );\n};\n\n/**\n * A button to set the state of the app\n * @param param0\n */\nconst MainMenuButton: React.FC<{iconName: IconDefinition, stateName: mainMenu[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectMainMenuState)\n\n  const onMenuItemClicked = () => {\n    dispatch(setState(stateName));\n    // Reset multi-page content to their first page\n    if (stateName === MainMenuStateNames.finish) {\n      dispatch(setPageNumber(0))\n    }\n    // Halt ongoing events\n    dispatch(setIsPlaying(false))\n  }\n\n  const mainMenuButtonStyle = css({\n    width: '100%',\n    height: '100px',\n    ...(activeState === stateName) && {\n      backgroundColor: '#DDD',\n    },\n    flexDirection: 'column' as const,\n  });\n\n  return (\n    <li css={[basicButtonStyle, mainMenuButtonStyle]}\n      role=\"menuitem\" tabIndex={0}\n      onClick={ onMenuItemClicked }\n      onKeyDown={(event: React.KeyboardEvent<HTMLLIElement>) => { if (event.key === \"Enter\") {\n        onMenuItemClicked()\n      }}}\n      >\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </li>\n  );\n};\n\nexport default MainMenu;\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { httpRequestState } from '../types'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faToggleOn, faToggleOff} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectCurrentlyAtInSeconds, setIsPlaying, setCurrentlyAtInSeconds,\n  fetchVideoInformation, selectVideoURL, selectVideoCount, selectDurationInSeconds, selectTitle, selectPresenters,\n  setPreviewTriggered, selectPreviewTriggered, selectIsPlayPreview, setIsPlayPreview, selectDuration\n} from '../redux/videoSlice'\n\nimport ReactPlayer, { Config } from 'react-player'\n\nimport { roundToDecimalPlace, convertMsToReadableString } from '../util/utilityFunctions'\nimport { errorBoxStyle, basicButtonStyle } from \"../cssStyles\";\n\n/**\n * Container for the videos and their controls\n * TODO: Move fetching to a more central part of the app\n */\nconst Video: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const videoURLs = useSelector(selectVideoURL)\n  const videoCount = useSelector(selectVideoCount)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n  const error = useSelector((state: { videoState: { error: httpRequestState[\"error\"] } }) => state.videoState.error)\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (videoURLStatus === 'idle') {\n        dispatch(fetchVideoInformation())\n    }\n  }, [videoURLStatus, dispatch])\n\n  // Update based on current fetching status\n  // let content\n  // if (videoURLStatus === 'loading') {\n  //   content = <div className=\"loader\">Loading...</div>\n  // } else if (videoURLStatus === 'success') {\n  //   content = \"\"//<div className=\"loader\">Success...</div>\n  // } else if (videoURLStatus === 'failed') {\n  //   content = <div>{error}</div>\n  // }\n\n  // Initialize video players\n  const videoPlayers: JSX.Element[] = [];\n  for (let i = 0; i < videoCount; i++) {\n    // videoPlayers.push(<VideoPlayer key={i} url='https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4' />);\n    videoPlayers.push(<VideoPlayer key={i} url={videoURLs[i]} isMuted={i !== 0}/>);\n  }\n\n  const errorBox = () => {\n    return (\n      <div css={errorBoxStyle(videoURLStatus === \"failed\")} title=\"Error Box\" role=\"alert\">\n        <span>A problem occured during communication with Opencast.</span><br />\n        {error ? \"Details: \" + error : \"No error details are available.\"}<br />\n      </div>\n    );\n  }\n\n  // Style\n  const videoAreaStyle = css({\n    display: 'flex',\n    width: 'auto',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '0px',\n    borderBottom: '1px solid #BBB',\n  });\n\n  const videoPlayerAreaStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  });\n\n  return (\n    <div css={videoAreaStyle} title=\"Video Area\">\n      {errorBox()}\n      <VideoHeader />\n      <div css={videoPlayerAreaStyle} title=\"Video Player Area\">\n        {videoPlayers}\n      </div>\n      <VideoControls />\n    </div>\n  );\n};\n\n/**\n * A single video player\n * @param param0\n */\nconst VideoPlayer: React.FC<{url: string, isMuted: boolean}> = ({url, isMuted}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAtInSeconds)\n  const duration  = useSelector(selectDurationInSeconds)\n  const testTmp = useSelector(selectPreviewTriggered)\n\n  // Init state variables\n  const ref = useRef<ReactPlayer>(null);\n  const [ready, setReady] = useState(false);\n  const [errorState, setError] = useState(false);\n\n  // Callback for when the video is playing\n  const onProgressCallback = (state: { played: number, playedSeconds: number, loaded: number, loadedSeconds:  number }) => {\n    // Only update redux if there was a substantial change\n    if (roundToDecimalPlace(currentlyAt, 3) !== roundToDecimalPlace(state.playedSeconds, 3)) {\n      dispatch(setCurrentlyAtInSeconds(state.playedSeconds))\n    }\n  }\n\n  // Callback for checking whether the video element is ready\n  const onReadyCallback = () => {\n    setReady(true);\n  }\n\n  const onEndedCallback = () => {\n    dispatch(setIsPlaying(false));\n    dispatch(setCurrentlyAtInSeconds(duration)); // It seems onEnded is called before the full duration is reached, so we set currentlyAt to the very end\n  }\n\n  useEffect(() => {\n    // Seek if the position in the video got changed externally\n    if(!isPlaying && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n    }\n    if(testTmp && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n      dispatch(setPreviewTriggered(false))\n    }\n  })\n\n  const onErrorCallback = (e: any) => {\n    setError(true)\n  }\n\n  // Skip player when navigating page with keyboard\n  const playerConfig: Config = {\n    file: { attributes: { tabIndex: '-1' }}\n  }\n\n  const errorBoxStyle = css({\n    ...(!errorState) && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  const render = () => {\n    if (!errorState) {\n      return(\n        <ReactPlayer url={url}\n          ref={ref}\n          width='100%'\n          height='auto'\n          playing={isPlaying}\n          muted={isMuted}\n          onProgress={onProgressCallback}\n          progressInterval={100}\n          onReady={onReadyCallback}\n          onEnded={onEndedCallback}\n          onError={onErrorCallback}\n          config={playerConfig}\n          disablePictureInPicture\n        />\n      );\n    } else {\n      return (\n        <div css={errorBoxStyle} title=\"Error Box\" role=\"alert\">\n          <span>An error has occured loading this video. </span>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <>\n      {render()}\n    </>\n  );\n\n  // return (\n  //   <div title=\"Video Player\">\n  //     <video width=\"320\" height=\"240\" controls ref={vidRef}>\n  //     <source src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4\" type=\"video/mp4\" />\n  //     Your browser does not support the video tag.\n  //     </video>\n  //   </div>\n  // );\n};\n\n/**\n * Contains controls for manipulating multiple video players at once\n * Flexbox magic keeps the play button at the center\n */\nconst VideoControls: React.FC<{}> = () => {\n\n  const videoControlsRowStyle = css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '20px',\n    gap: '50px',\n  })\n\n  const leftSideBoxStyle = css({\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'right'\n  })\n\n  const rightSideBoxStyle = css({\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'left'\n  })\n\n  return (\n    <div css={videoControlsRowStyle} title=\"Video Controls\">\n      <div css={leftSideBoxStyle}>\n        <PreviewMode />\n      </div>\n      <PlayButton />\n      <div css={rightSideBoxStyle}>\n        <TimeDisplay />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Enable/Disable Preview Mode\n */\nconst PreviewMode: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlayPreview = useSelector(selectIsPlayPreview)\n\n  // Change preview mode from \"on\" to \"off\" and vice versa\n  const switchPlayPreview = () => {\n    dispatch(setIsPlayPreview(!isPlayPreview))\n  }\n\n  const previewModeStyle = css({\n    display: 'flex',\n    gap: '10px',\n    justifyContent: 'center',\n    alignItems: 'center'}\n  )\n\n  const switchIconStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.05)',\n    },\n  })\n\n  return (\n    <div css={previewModeStyle}\n      title={\"Skips deleted segments when playing the video. Currently \" + (isPlayPreview ? \"on\" : \"off\")}>\n      <div css={{display: 'inline-block', flexWrap: 'nowrap'}}>\n        Preview Mode\n      </div>\n      <FontAwesomeIcon css={switchIconStyle} icon={isPlayPreview ? faToggleOn : faToggleOff} size=\"1x\"\n        role=\"switch\" aria-checked={isPlayPreview} tabIndex={0} aria-hidden={false}\n        aria-label=\"Enable or disable preview mode.\"\n        onClick={ switchPlayPreview }\n        onKeyDown={(event: React.KeyboardEvent<SVGSVGElement>) => { if (event.key === \" \") {\n          switchPlayPreview()\n        }}}\n      />\n    </div>\n  );\n}\n\n/**\n * Start/Pause playing the videos\n */\nconst PlayButton: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n\n  // Change play mode from \"on\" to \"off\" and vice versa\n  const switchIsPlaying = () => {\n    dispatch(setIsPlaying(!isPlaying))\n  }\n\n  return (\n    <FontAwesomeIcon css={[basicButtonStyle, {justifySelf: 'center'}]} icon={isPlaying ? faPause : faPlay} size=\"2x\"\n      title=\"Play Button\"\n      role=\"button\" aria-pressed={isPlaying} tabIndex={0} aria-hidden={false}\n      aria-label=\"Play Button\"\n      onClick={ switchIsPlaying }\n      onKeyDown={(event: React.KeyboardEvent<SVGSVGElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        switchIsPlaying()\n      }}}\n    />\n  );\n}\n\n/**\n * Live update for the current time\n */\nconst TimeDisplay: React.FC<{}> = () => {\n\n  // Init redux variables\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n\n  return (\n    <div css={{display: 'flex', flexDirection: 'row', gap: '5px'}}>\n      <time css={{display: 'inline-block', width: '100px'}}\n        tabIndex={0} role=\"timer\" aria-label={\"Current time: \" + convertMsToReadableString(currentlyAt)}>\n        {new Date((currentlyAt ? currentlyAt : 0)).toISOString().substr(11, 12)}\n      </time>\n      {\" / \"}\n      <div tabIndex={0} aria-label={\"Duration: \" + convertMsToReadableString(duration)}>\n        {new Date((duration ? duration : 0)).toISOString().substr(11, 12)}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Displays elements above the video, e.g. title\n */\nconst VideoHeader: React.FC<{}> = () => {\n  const title = useSelector(selectTitle)\n  const presenters = useSelector(selectPresenters)\n\n  const titleStyle = css({\n    display: 'inline-block',\n    padding: '15px',\n    overflow: 'hidden',\n    whiteSpace: \"nowrap\",\n    textOverflow: 'ellipsis',\n    maxWidth: '500px',\n  })\n\n  const titleStyleBold = css({\n    fontWeight: 'bold',\n    fontSize: '24px',\n    verticalAlign: '-2.5px',\n  })\n\n  let presenter_header;\n  if (presenters && presenters.length) {\n      presenter_header = <div css={titleStyle} title=\"Video Presenters\">by {presenters.join(\", \")}</div>\n  }\n  return (\n    <div title=\"Video Area Header\" css={{fontSize: '16px'}}>\n      <div css={[titleStyle, titleStyleBold]} title=\"Video Title\">{title}</div>\n      {presenter_header}\n    </div>\n  );\n}\n\nexport default Video;\n","/**\n * Big thanks to Duncan \"slampunk\" Smith for writing this code and allowing it\n * to be used for this application.\n * duncan83@gmail.com\n */\n\nexport function Waveform(opts) {\n  this.audioContext = new AudioContext();\n  this.oCanvas = document.createElement('canvas');\n  this.buffer = {};\n  this.WIDTH = 0;\n  this.HEIGHT = 0;\n  this.channelData = [];\n  this.waveformImage = '';\n  this.audioBuffer = null;\n\n  this.aveRMS = 0;\n  this.peakRMS = 0;\n\n  this.numberSamples = 100000;\n  this.waveformType = 'img';\n  this.drawWaveform = this.drawCanvasWaveform;\n\n  if (opts.width && opts.height) {\n    this.setDimensions(opts.width, opts.height);\n  }\n  if (opts.samples) {\n    this.numberSamples = opts.samples;\n  }\n  if (opts.type && opts.type === 'svg') {\n    this.waveformType = 'svg';\n    this.drawWaveform = this.delegateToWorker;\n    this.worker = null;\n  }\n  if (opts.media) {\n    this.generateWaveform(opts.media)\n      .then(() => {\n        this.getAudioData();\n        this.drawWaveform();\n        if (this.waveformType !== 'svg') {\n          _completeFuncs.forEach(fn => {\n            fn(this.waveformImage || this.svgPath, this.waveformType);\n          });\n        }\n      })\n      .catch(e => console.log(e));\n  }\n\n  var _completeFuncs = [];\n  Object.defineProperty(this, 'oncomplete', {\n    get: function() {\n      return _completeFuncs;\n    },\n    set: function(fn, opt) {\n      if (typeof fn == 'function') {\n        if (this.waveformImage || this.svgPath) {\n          fn(this.waveformImage || this.svgPath, this.svgLength);\n          return;\n        }\n\n        _completeFuncs.push(fn);\n      }\n    }\n  });\n}\n\nWaveform.prototype = {\n  constructor: Waveform,\n  setDimensions: function(width, height) {\n    this.oCanvas.width = width;\n    this.WIDTH = width;\n    this.oCanvas.height = height;\n    this.HEIGHT = height;\n    this.ocCtx = this.oCanvas.getContext('2d');\n  },\n  decodeAudioData: function(arraybuffer) {\n    return new Promise((resolve, reject) => {\n      new Promise((res, rej) => {\n        if (arraybuffer instanceof ArrayBuffer) {\n          res(arraybuffer);\n        }\n        else if (arraybuffer instanceof Blob) {\n          let reader = new FileReader();\n          reader.onload = function() {\n            res(reader.result);\n          }\n          reader.readAsArrayBuffer(arraybuffer);\n        }\n      })\n      .then(buffer => {\n        this.audioContext.decodeAudioData(buffer)\n          .then(audiobuffer => {\n            this.buffer = audiobuffer;\n            resolve();\n          })\n          .catch(e => {\n            reject(e);\n          })\n      })\n      .catch(e => {\n        reject(e);\n      })\n    })\n  },\n  getAudioData: function(buffer) {\n    buffer = buffer || this.buffer;\n    this.channelData = this.dropSamples(buffer.getChannelData(0), this.numberSamples);\n  },\n  drawCanvasWaveform: function(amp) {\n    amp = amp || 1;\n    this.ocCtx.fillStyle = '#FFFFFF00'; //'#b7d8f9';\n    this.ocCtx.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n    this.ocCtx.lineWidth = 1;\n    this.ocCtx.strokeStyle = 'black'; //'#38597a';\n    let sliceWidth = this.WIDTH * 1.0 / this.channelData.length;\n    let x = 0;\n\n    this.ocCtx.beginPath();\n    this.ocCtx.moveTo(x, this.channelData[0] * this.HEIGHT / 128.0 / 2);\n\n    this.channelData.forEach(sample => {\n      let v = sample * amp;\n      let y = this.HEIGHT * (1 + v) / 2;\n      this.ocCtx.lineTo(x, y);\n      this.aveRMS += sample * sample;\n      this.peakRMS = Math.max(sample * sample, this.peakRMS);\n      x += sliceWidth;\n    });\n    this.ocCtx.lineTo(this.WIDTH, this.HEIGHT/2);\n    this.ocCtx.stroke();\n    this.aveRMS = Math.sqrt(this.aveRMS / this.channelData.length);\n    this.aveDBs = 20 * Math.log(this.aveRMS) / Math.log(10);\n    this.waveformImage = this.oCanvas.toDataURL();\n  },\n  dropSamples: function(data, requestedLength) {\n    let divider = Math.max(parseInt(data.length / requestedLength), 1);\n    return data.filter((sample, i) => i % divider === 0);\n  },\n  generateWaveform: function(arraybuffer) {\n    return this.decodeAudioData(arraybuffer);\n  },\n  delegateToWorker: function() {\n    if (!this.worker) {\n      this.worker = new Worker('../util/svgworker.js');\n      this.worker.addEventListener('message', this.workerCommunication.bind(this), false);\n      this.worker.postMessage(this.channelData);\n    }\n  },\n  workerCommunication: function(e) {\n    switch(e.data.type) {\n      case 'path':\n        this.setSVGpath(e.data.path, e.data.length);\n        this.worker.removeEventListener('message', this.workerCommunication.bind(this), false);\n        this.worker.terminate();\n        this.worker = null;\n        break;\n      default:\n        break;\n    }\n  },\n  setSVGpath: function(path, len) {\n    this.svgPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    this.svgLength = len;\n\n    this.svgPath.setAttribute('d', path);\n    this.svgPath.setAttribute('vector-effect', 'non-scaling-stroke');\n    this.svgPath.setAttribute('stroke-width', '0.5px');\n\n    this.oncomplete.forEach(fn => fn(this.svgPath, this.svgLength));\n  }\n};\n","import React, { useState, useRef, useEffect } from 'react'\n\nimport Draggable from 'react-draggable';\n\nimport { css } from '@emotion/core'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment, httpRequestState } from '../types'\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectSegments, selectActiveSegmentIndex, selectDuration,\n  selectVideoURL, setCurrentlyAt\n} from '../redux/videoSlice'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\n\nimport useResizeObserver from \"use-resize-observer\";\n\nimport { Waveform } from '../util/waveform'\nimport { convertMsToReadableString } from '../util/utilityFunctions';\n\n/**\n * A container for visualizing the cutting of the video, as well as for controlling\n * the current position in the video\n * Its width corresponds to the duration of the video\n */\nconst Timeline: React.FC<{}> = () => {\n\n  const { ref, width = 1, } = useResizeObserver<HTMLDivElement>();\n\n  const timelineStyle = css({\n    position: 'relative' as 'relative',     // Need to set position for Draggable bounds to work\n    height: '250px',\n    width: '100%',\n    //backgroundImage: `url({myImg})`,\n  });\n\n  return (\n  <div ref={ref} css={timelineStyle} title=\"Timeline\">\n    <Scrubber timelineWidth={width}/>\n    <div css={{height: '230px'}}>\n      <Waveforms />\n      <SegmentsList timelineWidth={width}/>\n    </div>\n  </div>\n  );\n};\n\n/**\n * Displays and defines the current position in the video\n * @param param0\n */\nconst Scrubber: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)  // For ARIA information display\n  const segments = useSelector(selectSegments)                      // For ARIA information display\n\n  // Init state variables\n  const [controlledPosition, setControlledPosition] = useState({x: 0,y: 0,});\n  const [isGrabbed, setIsGrabbed] = useState(false)\n  const [keyboardJumpDelta, setKeyboardJumpDelta] = useState(1000)  // In milliseconds. For keyboard navigation\n  const wasCurrentlyAtRef = useRef(0)\n  const nodeRef = React.useRef(null); // For supressing \"ReactDOM.findDOMNode() is deprecated\" warning\n\n  // Reposition scrubber when the current x position was changed externally\n  useEffect(() => {\n    if(currentlyAt !== wasCurrentlyAtRef.current) {\n      updateXPos();\n      wasCurrentlyAtRef.current = currentlyAt;\n    }\n  })\n\n  // Reposition scrubber when the timeline width changes\n  useEffect(() => {\n    if(currentlyAt && duration) {\n      setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timelineWidth])\n\n  // Callback for when the scrubber gets dragged by the user\n  // const onControlledDrag = (e: any, position: any) => {\n  //   const {x, y} = position;\n  //   dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n  // };\n\n  // Callback for when the position changes by something other than dragging\n  const updateXPos = () => {\n    const y = controlledPosition.y;\n    setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y});\n  };\n\n  const onStartDrag = () => {\n    setIsGrabbed(true)\n  }\n\n  const onStopDrag = (e: any, position: any) => {\n    const {x, y} = position;\n    setControlledPosition({x, y});\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n\n    setIsGrabbed(false)\n  }\n\n  // TODO: Better/more intuitive controls\n  // TODO: Better increases and decreases than ten intervals\n  // TODO: Additional helpful controls (e.g. jump to start/end of segment/next segment)\n  const keyboardControls = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if(event.altKey) {\n      switch (event.key) {\n        case \"j\":\n          // Left pressed\n          dispatch(setCurrentlyAt(Math.max(currentlyAt - keyboardJumpDelta, 0)))\n          break;\n        case \"l\":\n          // Right pressed\n          dispatch(setCurrentlyAt(Math.min(currentlyAt + keyboardJumpDelta, duration)))\n          break;\n        case \"i\":\n          // Up pressed\n          setKeyboardJumpDelta(Math.min(keyboardJumpDelta * 10, 1000000))\n          break;\n        case \"k\":\n          // Up pressed\n          setKeyboardJumpDelta(Math.max(keyboardJumpDelta / 10, 1))\n          break;\n      }\n    }\n  }\n\n  const scrubberStyle = css({\n    backgroundColor: 'black',\n    height: '250px',\n    width: '1px',\n    position: 'absolute' as 'absolute',\n    zIndex: 2,\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  });\n\n  const scrubberDragHandleStyle = css({\n    backgroundColor: 'rgba(255, 255, 255, 1)',\n    borderRadius: '10px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: isGrabbed ? \"grabbing\" : \"grab\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const scrubberDragHandleIconStyle = css({\n    transform: 'scaleY(1.5) rotate(90deg)',\n    padding: '5px',\n  })\n\n  const arrowUpStyle = css({\n    width: 0,\n    height: 0,\n    borderLeft: '7px solid transparent',\n    borderRight: '7px solid transparent',\n    borderBottom: '7px solid black',\n  })\n\n  const arrowDownStyle = css({\n    width: 0,\n    height: 0,\n    borderLeft: '7px solid transparent',\n    borderRight: '7px solid transparent',\n    borderTop: '7px solid black',\n  })\n\n  // const ariaLive = css({\n  //   position: 'absolute',\n  //   left: '-99999px',\n  //   height: '1px',\n  //   width: '1px',\n  //   overflow: 'hidden',\n  // })\n\n  // // Possible TODO: Find a way to use ariaLive in a way that only the latest change is announced\n  // const keyboardUpdateMessage = () => {\n  //   return currentlyAt +  \" Milliseconds\"\n  // }\n\n  return (\n    <Draggable\n      //onDrag={onControlledDrag}\n      onStart={onStartDrag}\n      onStop={onStopDrag}\n      axis=\"x\"\n      bounds=\"parent\"\n      position={controlledPosition}\n      disabled={isPlaying}\n      nodeRef={nodeRef}\n      >\n      <div ref={nodeRef} css={scrubberStyle} title=\"Scrubber\">\n        <div css={arrowDownStyle}></div>\n        <div css= {scrubberDragHandleStyle} title=\"dragHandle\" aria-grabbed={isGrabbed}\n          aria-label={\"Scrubber. \" + convertMsToReadableString(currentlyAt) + \". Active segment: \" + activeSegmentIndex + \". \"\n                      + (segments[activeSegmentIndex].deleted ? \"Deleted.\" : \"Alive.\")\n                      + \". Controls: Alt+j and Alt+k to move the scrubber. Alt+i and Alt+k to increase/decrase the move delta.\"}\n          tabIndex={0} onKeyDown={keyboardControls}>\n          <FontAwesomeIcon css={scrubberDragHandleIconStyle} icon={faBars} size=\"1x\" />\n          {/* <div css={ariaLive} aria-live=\"polite\" aria-atomic=\"true\">{keyboardUpdateMessage()}</div> */}\n        </div>\n        <div css={arrowUpStyle}></div>\n      </div>\n    </Draggable>\n  );\n};\n\n/**\n * Container responsible for rendering the segments that are created when cutting\n */\nconst SegmentsList: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const segments = useSelector(selectSegments)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)\n\n  /**\n   * Returns a background color based on whether the segment is to be deleted\n   * and whether the segment is currently active\n   */\n  const bgColor = (deleted: boolean, active: boolean) => {\n    if (!deleted && !active) {\n      return 'rgba(0, 0, 255, 0.4)'\n    } else if (deleted && !active) {\n      return `repeating-linear-gradient(\n                -45deg,\n                rgba(255, 45, 45, 0.4),\n                rgba(255, 45, 45, 0.4) 10px,\n                rgba(255, 0, 0, 0.4) 10px,\n                rgba(255, 0, 0, 0.4) 20px);`\n    } else if (!deleted && active) {\n      return 'rgba(0, 0, 200, 0.4)'\n    } else if (deleted && active) {\n      return `repeating-linear-gradient(\n                -45deg,\n                rgba(200, 45, 45, 0.4),\n                rgba(200, 45, 45, 0.4) 10px,\n                rgba(200, 0, 0, 0.4) 10px,\n                rgba(200, 0, 0, 0.4) 20px);`\n    }\n  }\n\n  // Render the individual segments\n  const renderedSegments = () => {\n    return (\n      segments.map( (segment: Segment, index: number) => (\n        <div key={segment.id} title={\"Segment \" + index}\n          aria-label={\"Segment \" + index + \". \" + (segment.deleted ? \"Deleted.\" : \"Alive.\")\n                      +  \" Start: \" + convertMsToReadableString(segment.start)\n                      + \". End: \" + convertMsToReadableString(segment.end) + \".\"}\n          tabIndex={0}\n        css={{\n          background: bgColor(segment.deleted, activeSegmentIndex === index),\n          borderRadius: '5px',\n          borderStyle: activeSegmentIndex === index ? 'dashed' : 'solid',\n          borderColor: 'white',\n          borderWidth: '1px',\n          boxSizing: 'border-box',\n          width: ((segment.end - segment.start) / duration) * 100 + '%',\n          height: '230px',\n          zIndex: 1,\n        }}>\n        </div>\n      ))\n    );\n  }\n\n  const segmentsStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    paddingTop: '10px',\n  })\n\n  return (\n    <div css={segmentsStyle} title=\"Segments\">\n      {renderedSegments()}\n    </div>\n  );\n};\n\n/**\n * Generates waveform images and displays them\n */\nconst Waveforms: React.FC<{}> = () => {\n\n  const videoURLs = useSelector(selectVideoURL)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n\n  // Update based on current fetching status\n  const [images, setImages] = useState<string[]>([])\n\n  const waveformDisplayTestStyle = css({\n    display: 'flex',\n    flexDirection: 'column',\n    position: \"absolute\" as \"absolute\",\n    justifyContent: 'center',\n    ...(images.length <= 0) && {alignItems: 'center'},  // Only center during loading\n    width: '100%',\n    height: '230px',\n    paddingTop: '10px',\n  });\n\n  // When the URLs to the videos are fetched, generate waveforms\n  useEffect( () => {\n    if (videoURLStatus === 'success') {\n      const images: string[] = []    // Store local paths to image files\n      let waveformsProcessed : number = 0  // Counter for checking if all workers are done\n\n      // Only display the waveform of the first video we get\n      const onlyOneURL = [videoURLs[0]]\n\n      onlyOneURL.forEach((videoURL, _index, array) => {\n        // Set up blob request\n        var blob = null\n        var xhr = new XMLHttpRequest()\n        xhr.open(\"GET\", videoURL)\n        xhr.responseType = \"blob\"\n        xhr.onload = function()\n        {\n          blob = xhr.response\n          var file = new File([blob], blob)\n\n          // Start waveform worker with blob\n          const waveformWorker : any = new Waveform({type: 'img', width: '2000', height: '230', samples: 100000, media: file});\n          // When done, save path to generated waveform img\n          waveformWorker.oncomplete = function(image: any, numSamples: any) {\n            images.push(image)\n            waveformsProcessed++\n            // If all images are generated, rerender\n            if (waveformsProcessed === array.length) {\n              setImages(images)\n            }\n          }\n        }\n        xhr.send()\n      })\n    }\n  }, [videoURLStatus, videoURLs]);\n\n\n  const renderImages = () => {\n    if (images.length > 0) {\n      return (\n        images.map((image, index) =>\n          <img key={index} alt='Waveform' src={image ? image : \"\"} css={{minHeight: 0}}></img>\n        )\n      );\n    } else {\n      return (\n        <>\n          <FontAwesomeIcon icon={faSpinner} spin size=\"3x\"/>\n          <div>Generating Waveform</div>\n        </>\n      );\n    }\n  }\n\n  return (\n  <div css={waveformDisplayTestStyle} title=\"WaveformDisplayTest\">\n    {renderImages()}\n  </div>\n  );\n}\n\nexport default Timeline;\n","import React from \"react\";\n\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition,\n  faCut,\n  faStepBackward,\n  faStepForward,\n  faTrash,\n  faTrashRestore,\n  } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  cut, markAsDeletedOrAlive, selectIsCurrentSegmentAlive, mergeLeft, mergeRight\n} from '../redux/videoSlice'\nimport { ActionCreatorWithoutPayload } from \"@reduxjs/toolkit\";\n\n/**\n * Defines the different actions a user can perform while in cutting mode\n */\nconst CuttingActions: React.FC<{}> = () => {\n\n  const cuttingStyle =  css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-between',\n    gap: '30px',\n  })\n\n  const blockStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    gap: '30px',\n  })\n\n  return (\n    <div css={cuttingStyle}>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faCut} actionName=\"Cut\" action={cut}\n            tooltip=\"Splits the segment at the current scrubber position\"\n            ariaLabelText=\"Cut. Splits the segment at the current scrubber position\"\n          />\n          <MarkAsDeletedButton />\n          <CuttingActionsButton iconName={faStepBackward} actionName=\"Merge Left\" action={mergeLeft}\n            tooltip=\"Combines the currently active segment with the segment to its left\"\n            ariaLabelText=\"Merge Left. Combines the currently active segment with the segment to its left\"\n          />\n          <CuttingActionsButton iconName={faStepForward} actionName=\"Merge Right\" action={mergeRight}\n            tooltip=\"Combines the currently active segment with the segment to its right\"\n            ariaLabelText=\"Merge Right. Combines the currently active segment with the segment to its right\"\n          />\n        </div>\n        <div css={blockStyle}>\n          {/* <CuttingActionsButton iconName={faQuestion} actionName=\"Reset changes\" action={null}\n            tooltip=\"Not implemented\"\n            ariaLabelText=\"Reset changes. Not implemented\"\n          />\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Undo\" action={null}\n            tooltip=\"Not implemented\"\n            ariaLabelText=\"Undo. Not implemented\"\n          /> */}\n        </div>\n    </div>\n  );\n};\n\n/**\n * CSS for cutting buttons\n */\nconst cuttingActionButtonStyle = {\n  padding: '16px',\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n};\n\ninterface cuttingActionsButtonInterface {\n  iconName: IconDefinition,\n  actionName: string,\n  action: ActionCreatorWithoutPayload<string>,  // Redux reducer action\n  tooltip: string,\n  ariaLabelText: string,\n}\n\n/**\n * A button representing a single action a user can take while cutting\n * @param param0\n */\nconst CuttingActionsButton: React.FC<cuttingActionsButtonInterface> = ({iconName, actionName, action, tooltip, ariaLabelText}) => {\n\n  const dispatch = useDispatch();\n\n  const dispatchAction = () => {\n    if (action) {\n      dispatch(action())\n    }\n  }\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]}\n      title={tooltip}\n      role=\"button\" tabIndex={0} aria-label={ariaLabelText}\n      onClick={ dispatchAction }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        dispatchAction()\n      }}}\n      >\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{actionName}</span>\n    </div>\n  );\n};\n\n/**\n * Button that changes its function based on context\n */\nconst MarkAsDeletedButton : React.FC<{}> = () => {\n\n  const dispatch = useDispatch();\n  const isCurrentSegmentAlive = useSelector(selectIsCurrentSegmentAlive)\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]}\n      title=\"Marks the segment at the current scrubber position as deleted or alive\"\n      role=\"button\" tabIndex={0}\n      aria-label={\"Delete and Restore. Marks the segment at the current scrubber position as deleted or alive\"}\n      onClick={() => dispatch(markAsDeletedOrAlive())}>\n      <FontAwesomeIcon icon={isCurrentSegmentAlive ? faTrash : faTrashRestore} size=\"1x\" />\n      <div>{isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}</div>\n    </div>\n  );\n}\n\nexport default CuttingActions;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSave, faFileExport, faTimesCircle, IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch } from 'react-redux';\nimport { setState, setPageNumber, finish } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst FinishMenu : React.FC<{}> = () => {\n\n  const finishMenuStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-around',\n    gap: '30px',\n  })\n\n  return (\n    <div css={finishMenuStyle} title=\"Finish Menu\">\n        <FinishMenuButton iconName={faSave} stateName=\"Save changes\"/>\n        <FinishMenuButton iconName={faFileExport} stateName=\"Start processing\"/>\n        <FinishMenuButton iconName={faTimesCircle} stateName=\"Discard changes\"/>\n    </div>\n  );\n}\n\n/**\n * Buttons for the finish menu\n */\nconst FinishMenuButton: React.FC<{iconName: IconDefinition, stateName: finish[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n\n  const finish = () => {\n    dispatch(setState(stateName));\n    dispatch(setPageNumber(1))\n  }\n\n  const finishMenuButtonStyle = css({\n    width: '250px',\n    height: '220px',\n    flexDirection: 'column' as const,\n    fontSize: \"x-large\",\n    gap: '30px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  });\n\n  return (\n    <div css={[basicButtonStyle, finishMenuButtonStyle]}\n    role=\"button\" tabIndex={0}\n      onClick={ finish }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        finish()\n      }}}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\n\n\nexport default FinishMenu;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { Segment, PostEditArgument, httpRequestState } from '../types'\nimport { settings } from '../config'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformation = createAsyncThunk('video/postVideoInformation', async (argument: PostEditArgument) => {\n  if (!settings.mediaPackageId) {\n    throw new Error(\"Missing mediaPackageId\")\n  }\n\n  const response = await client.post(`${settings.opencast.url}/editor/${settings.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostSlice = createSlice({\n  name: 'workflowPostState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\ninterface segmentAPI {\n  start: number,\n  end: number,\n  deleted: boolean,\n  selected: boolean,\n}\n\n// Convert a segment from how it is stored in redux into\n// a segment that can be send to Opencast\nexport const convertSegments = (segments: Segment[]) => {\n  let newSegments: segmentAPI[] = []\n\n  segments.forEach(segment => {\n    newSegments.push({\n      start: segment.start,\n      end: segment.end,\n      deleted: segment.deleted,\n      selected: false,\n    })\n  });\n\n  return newSegments\n}\n\nexport const selectStatus = (state: { workflowPostState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\nexport default workflowPostSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle, ariaLive, errorBoxStyle, nagivationButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSpinner, faCheck, faExclamationCircle, faChevronLeft, faSave,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { selectSegments, selectTracks } from '../redux/videoSlice'\nimport { postVideoInformation, selectStatus, selectError } from '../redux/workflowPostSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Shown if the user wishes to save.\n * Informs the user about saving and displays a save button\n */\nconst Save : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const postWorkflowStatus = useSelector(selectStatus);\n  const postError = useSelector(selectError)\n\n  const saveStyle = css({\n    height: '100%',\n    display: finishState !== \"Save changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '30px',\n  })\n\n  return (\n    <div css={saveStyle} title=\"Save Area\">\n      <span>\n        Here you can save the changes you made, but the video will not be cut yet. <br />\n        To make Opencast cut the video, please go back and select \"Start processing\". <br />\n        Do you truly wish to save?\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"No, take me back\" iconName={faChevronLeft}/>\n        <SaveButton />\n      </div>\n      <div css={errorBoxStyle(postWorkflowStatus === \"failed\")} title=\"Error Box\" role=\"alert\">\n        <span>An error has occured. Please wait a bit and try again.</span><br />\n        {postError ? \"Details: \" + postError : \"No error details are available.\"}<br />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sends a post request to save current changes\n */\nconst SaveButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n\n  // Update based on current fetching status\n  let icon = faSave\n  let spin = false\n  let tooltip = \"Save Button\"\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n    spin = true\n    tooltip = \"Attempting to save\"\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n    spin = false\n    tooltip = \"Saved successfully\"\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n    spin = false\n    tooltip = \"Save failed\"\n  }\n\n  const ariaSaveUpdate = () => {\n    if(workflowStatus === 'success') {\n      return \"Saved successfully\"\n    }\n  }\n\n  const save = () => {\n    dispatch(postVideoInformation({\n      segments: segments,\n      tracks: tracks,\n    }))\n  }\n\n  return (\n    <div css={[basicButtonStyle, nagivationButtonStyle]} title={tooltip}\n      role=\"button\" tabIndex={0}\n      onClick={ save }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        save()\n      }}}>\n      <FontAwesomeIcon icon={icon} spin={spin} size=\"1x\"/>\n      <span>{\"Yes, save changes\"}</span>\n      <div css={ariaLive} aria-live=\"polite\" aria-atomic=\"true\">{ariaSaveUpdate()}</div>\n    </div>\n  );\n}\n\n\nexport default Save;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface end {\n  end: boolean,\n  value: 'success' | 'discarded',\n}\n\nconst initialState: end = {\n  end: false,\n  value: 'success',\n}\n\n/**\n * Slice for the main menu state\n */\nexport const endSlice = createSlice({\n  name: 'endState',\n  initialState,\n  reducers: {\n    setEnd: (state, action: PayloadAction<{hasEnded: end[\"end\"], value: end[\"value\"]}>) => {\n      state.end = action.payload.hasEnded;\n      state.value = action.payload.value;\n    },\n  }\n})\n\nexport const { setEnd, } = endSlice.actions\n\n// Export Selectors\nexport const selectIsEnd = (state: { endState: { end: end[\"end\"] }; }) => state.endState.end\nexport const selectEndState = (state: { endState: { value: end[\"value\"] }; }) => state.endState.value\n\nexport default endSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle, nagivationButtonStyle} from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faChevronLeft, faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { setEnd } from '../redux/endSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Shown if the user wishes to abort.\n * Informs the user about aborting and displays abort button.\n */\nconst Discard : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const cancelStyle = css({\n    display: finishState !== \"Discard changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '30px',\n  })\n\n  return (\n    <div css={cancelStyle} title=\"Abort Area\">\n      <span>\n        Discard all the changes you made? This cannot be undone! <br />\n        Do you truly want all your changes to be lost forever?\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"No, take me back\" iconName={faChevronLeft} />\n        <DiscardButton />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sets the app into an aborted state\n */\nconst DiscardButton : React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const discard = () => {\n    dispatch(setEnd({hasEnded: true, value: 'discarded'}))\n  }\n\n  return (\n    <div css={[basicButtonStyle, nagivationButtonStyle]} title={\"Discard changes button\"}\n      role=\"button\" tabIndex={0}\n      onClick={ discard }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        discard()\n      }}}>\n      <FontAwesomeIcon  icon={faTimesCircle} size=\"1x\"/>\n      <span>{\"Yes, discard changes\"}</span>\n    </div>\n  );\n}\n\nexport default Discard;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { PostAndProcessEditArgument, httpRequestState } from '../types'\n\nimport { convertSegments } from './workflowPostSlice'\nimport { settings } from '../config'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformationWithWorkflow = createAsyncThunk('video/postVideoInformationWithWorkflow', async (argument: PostAndProcessEditArgument) => {\n  if (!settings.mediaPackageId) {\n    throw new Error(\"Missing mediaPackageId\")\n  }\n\n  const response = await client.post(`${settings.opencast.url}/editor/${settings.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks, workflows: argument.workflow }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes and starting a workflow\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostAndProcessSlice = createSlice({\n  name: 'workflowPostAndProcessState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformationWithWorkflow.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\nexport const selectStatus = (state: { workflowPostAndProcessState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostAndProcessState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\n\nexport default workflowPostAndProcessSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle, errorBoxStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\nimport { faSpinner, faCheck, faExclamationCircle, faChevronLeft, faFileExport } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, selectSegments, selectTracks, } from '../redux/videoSlice'\nimport { postVideoInformationWithWorkflow, selectStatus, selectError } from '../redux/workflowPostAndProcessSlice'\n\nimport { PageButton } from './Finish'\nimport { setEnd } from \"../redux/endSlice\";\n\n/**\n * Will eventually display settings based on the selected workflow index\n */\nconst WorkflowConfiguration : React.FC<{}> = () => {\n\n  const postAndProcessWorkflowStatus = useSelector(selectStatus);\n  const postAndProcessError = useSelector(selectError)\n\n  const workflowConfigurationStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  })\n\n  return (\n    <div css={workflowConfigurationStyle} title=\"Workflow Configuration Area\">\n      <h2>Workflow Configuration</h2>\n      <FontAwesomeIcon icon={faTools} size=\"10x\" />\n      Placeholder\n      <div>Satisfied with your configuration?</div>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={1} label=\"No, take me back\" iconName={faChevronLeft}/>\n        <SaveAndProcessButton text=\"Yes, start processing\"/>\n      </div>\n      <div css={errorBoxStyle(postAndProcessWorkflowStatus === \"failed\")} title=\"Error Box\" role=\"alert\">\n        <span>An error has occured. Please wait a bit and try again.</span><br />\n        {postAndProcessError ? \"Details: \" + postAndProcessError : \"No error details are available.\"}<br />\n      </div>\n    </div>\n  );\n\n}\n\n/**\n * Button that sends a post request to save current changes\n * and starts the selected workflow\n */\nexport const SaveAndProcessButton: React.FC<{text: string}> = ({text}) => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const workflows = useSelector(selectWorkflows)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n\n  const saveAndProcess = () => {\n    dispatch(postVideoInformationWithWorkflow({\n      segments: segments,\n      tracks: tracks,\n      workflow: [{id: workflows[selectedWorkflowIndex].id}],\n    }))\n  }\n\n  // Update based on current fetching status\n  let icon = faFileExport\n  let spin = false\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n    spin = true\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n    spin = false\n    dispatch(setEnd({hasEnded: true, value: 'success'}))\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n    spin = false\n  }\n\n  const saveButtonStyle = css({\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Start processing button\"}\n      role=\"button\" tabIndex={0}\n      onClick={ saveAndProcess }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        saveAndProcess()\n      }}}>\n      <FontAwesomeIcon  icon={icon} spin={spin} size=\"1x\"/>\n      <span>{text}</span>\n    </div>\n  );\n}\n\nexport default WorkflowConfiguration;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle, errorBoxStyle } from '../cssStyles'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, setSelectedWorkflowIndex } from '../redux/videoSlice'\nimport { selectFinishState, selectPageNumber } from '../redux/finishSlice'\n\nimport { PageButton } from './Finish'\nimport { faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { SaveAndProcessButton } from \"./WorkflowConfiguration\";\nimport { selectStatus, selectError } from \"../redux/workflowPostAndProcessSlice\";\nimport { Workflow } from \"../types\";\n\n/**\n * Allows the user to select a workflow\n */\nconst WorkflowSelection : React.FC<{}> = () => {\n\n  // Initialite redux states\n  const workflows = useSelector(selectWorkflows)\n  const finishState = useSelector(selectFinishState)\n  const pageNumber = useSelector(selectPageNumber)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const postAndProcessWorkflowStatus = useSelector(selectStatus);\n  const postAndProcessError = useSelector(selectError)\n\n  // Create workflow selection\n  const workflowButtons = () => {\n    if (workflows.length > 0) {\n      return (\n        workflows.map( (workflow: Workflow, index: number) => (\n          <WorkflowButton key={index} stateName={workflow.name} workflowIndex={index}/>\n        ))\n      );\n    } else {\n      return (\n        \"There are no workflows to select. Save your changes and contact an Opencast Administrator.\"\n      );\n    }\n  }\n\n  // Gets the description from the currently selected workflow\n  const workflowDescription = () => {\n    if (workflows.length > selectedWorkflowIndex && workflows[selectedWorkflowIndex].description) {\n      return (\n        workflows[selectedWorkflowIndex].description\n      );\n    } else {\n      return (' ');\n    }\n  }\n\n  const workflowSelectionStyle = css({\n    padding: '20px',\n    display: (finishState === \"Start processing\" && pageNumber === 1) ? 'flex' : 'none',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '50px',\n  })\n\n  const workflowSelectionSelectionStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'left',\n    gap: '20px',\n    flexWrap: 'wrap',\n    maxHeight: '50vh',\n  })\n\n  return (\n    <div css={workflowSelectionStyle}>\n      <h2>Select a workflow</h2>\n      <div>\n        Select which workflow Opencast should use for processing.\n      </div>\n      <div css={workflowSelectionSelectionStyle} title=\"Workflow Selection Area\">\n        {workflowButtons()}\n      </div>\n      <div><i>{workflowDescription()}</i></div>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"Take me back\" iconName={faChevronLeft}/>\n        {/* <PageButton pageNumber={2} label=\"Continue\" iconName={faChevronRight}/> */}\n        <SaveAndProcessButton text=\"Start processing with workflow\"/>\n      </div>\n      <div css={errorBoxStyle(postAndProcessWorkflowStatus === \"failed\")} title=\"Error Box\" role=\"alert\">\n        <span>An error has occured. Please wait a bit and try again.</span><br />\n        {postAndProcessError ? \"Details: \" + postAndProcessError : \"No error details are available.\"}<br />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Clicking this button sets the associated workflow as selected\n * @param param0\n */\nconst WorkflowButton: React.FC<{stateName: string, workflowIndex: number}> = ({stateName, workflowIndex}) => {\n\n  const dispatch = useDispatch();\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const selectWorkflowIndex = () => {\n    dispatch(setSelectedWorkflowIndex(workflowIndex))\n  }\n\n  const workflowButtonStyle = css({\n    backgroundColor: workflowIndex !== selectedWorkflowIndex ? 'snow' : '#DDD',\n    padding: '16px',\n  });\n\n  return (\n    <div css={[basicButtonStyle,workflowButtonStyle]} title={\"Click to select this workflow\"}\n      role=\"button\" tabIndex={0}\n      aria-label={\"Press to select the workflow: \" + stateName}\n      onClick={ selectWorkflowIndex }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        selectWorkflowIndex()\n      }}}>\n      <span>{stateName}</span>\n    </div>\n  );\n}\n\nexport default WorkflowSelection;\n","import React from \"react\";\n\nimport FinishMenu from \"./FinishMenu\";\nimport Save from \"./Save\"\nimport Discard from \"./Discard\"\nimport WorkflowSelection from \"./WorkflowSelection\";\nimport WorkflowConfiguration from \"./WorkflowConfiguration\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPageNumber, setPageNumber } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst Finish : React.FC<{}> = () => {\n\n  const pageNumber = useSelector(selectPageNumber)\n\n  const pageZeroStyle = css({\n    display: pageNumber !== 0 ? 'none' :'block',\n  })\n\n  const pageOneStyle = css({\n    display: pageNumber !== 1 ? 'none' :'block',\n  })\n\n  const pageTwoStyle = css({\n    display: pageNumber !== 2 ? 'none' :'block',\n  })\n\n  return (\n    <div  title=\"Finish\">\n      <div css={pageZeroStyle} >\n        <FinishMenu />\n      </div>\n      <div css={pageOneStyle} >\n        <Save />\n        <WorkflowSelection />\n        <Discard />\n      </div>\n      <div css={pageTwoStyle} >\n        <WorkflowConfiguration />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Takes you to a different page\n */\nexport const PageButton : React.FC<{pageNumber: number, label: string, iconName: IconDefinition}> = ({pageNumber, label, iconName}) => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const onPageChange = () => {\n    dispatch(setPageNumber(pageNumber))\n  }\n\n  const pageButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, pageButtonStyle]}\n      role=\"button\" tabIndex={0}\n      onClick={ onPageChange }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        onPageChange()\n      }}}>\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{label}</span>\n    </div>\n  );\n}\n\n\nexport default Finish;\n","import React from \"react\";\n\nimport Video from './Video';\nimport Timeline from './Timeline';\nimport CuttingActions from './CuttingActions';\nimport Finish from \"./Finish\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useSelector } from 'react-redux'\nimport { selectMainMenuState } from '../redux/mainMenuSlice'\n\nimport { MainMenuStateNames } from '../types'\n\n/**\n * A container for the main functionality\n * Shows different components depending on the state off the app\n */\nconst MainContent: React.FC<{}> = () => {\n\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  const cuttingStyle = css({\n    display: mainMenuState !== MainMenuStateNames.cutting ? 'none' :'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    paddingLeft: '20px',\n  })\n\n  const finishStyle = css({\n    display: mainMenuState !== MainMenuStateNames.finish ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    height: '100%',\n  })\n\n  const defaultStyle = css({\n    display: (mainMenuState === MainMenuStateNames.cutting || mainMenuState === MainMenuStateNames.finish )\n              ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n     <main title=\"MainMenuContext\" css={{width: '100%'}} role=\"main\">\n      <div css={cuttingStyle} title=\"Cutting Container\">\n          <Video />\n          <CuttingActions />\n          <Timeline />\n      </div>\n      <div css={finishStyle} title=\"Finish Container\">\n        <Finish />\n      </div>\n      <div css={defaultStyle}>\n        <FontAwesomeIcon icon={faTools} size=\"10x\" />\n        Placeholder\n      </div>\n     </main>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector } from 'react-redux';\nimport { selectDuration } from '../redux/videoSlice'\nimport { selectEndState } from '../redux/endSlice'\nimport { basicButtonStyle, nagivationButtonStyle } from \"../cssStyles\";\n\n/**\n * This page is to be displayed when the user is \"done\" with the editor\n * and should not be able to perfom any actions anymore\n */\nconst TheEnd : React.FC<{}> = () => {\n\n  // Init redux variables\n  const endState = useSelector(selectEndState)\n  const duration = useSelector(selectDuration)\n\n  const icon = () => {\n    if (endState === 'discarded') {\n      return faTimesCircle\n    } else {\n      return faCheckCircle\n    }\n  }\n\n  const text = () => {\n    if (endState === 'discarded') {\n      return \"All your changes are now lost forever. You can now close the editor.\"\n    } else if (endState === 'success') {\n      return `Changes successfully saved to Opencast. Processing your changes may take up to\n              ${new Date((duration * 2)).toISOString().substr(11, 8)} hours.\n              You can now close the editor.`\n    }\n  }\n\n  const theEndStyle = css({\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n    <div css={theEndStyle} title=\"The End\">\n      <FontAwesomeIcon icon={icon()} size=\"10x\" />\n      <div>{text()}</div>\n      {(endState === 'discarded') && <StartOverButton />}\n    </div>\n  );\n}\n\n\nconst StartOverButton: React.FC<{}> = () => {\n\n  const reloadPage = () => {\n    window.location.reload(true);\n  };\n\n  return (\n    <div css={[basicButtonStyle, nagivationButtonStyle]} title={\"Reload the page to start over\"}\n      role=\"button\" tabIndex={0}\n      onClick={ reloadPage }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        reloadPage()\n      }}}>\n      {/* <FontAwesomeIcon icon={icon} spin={spin} size=\"1x\"/> */}\n      <span>{\"Let me start over!\"}</span>\n    </div>\n  );\n}\n\nexport default TheEnd","import React from \"react\";\n\nimport MainMenu from './MainMenu';\nimport MainContent from './MainContent';\nimport TheEnd from './TheEnd';\n\nimport { useSelector } from 'react-redux';\nimport { selectIsEnd } from '../redux/endSlice'\n\nconst Body: React.FC<{}> = () => {\n\n  const isEnd = useSelector(selectIsEnd)\n\n  // If we're in a special state, display a special page\n  // Otherwise display the normal page\n  const main = () => {\n    if(isEnd) {\n      return (\n        <TheEnd />\n      );\n    } else {\n      return (\n        <div css={bodyStyle} title=\"Body\">\n          <MainMenu />\n          <MainContent />\n        </div>\n      );\n    }\n  }\n\n  const bodyStyle = {\n    display: 'flex',\n    flexDirection: 'row' as const,\n    height: '100%',\n  };\n\n  return (\n    <React.Fragment>\n      {main()}\n    </React.Fragment>\n  );\n};\n\nexport default Body;\n","import React from 'react';\nimport Body from './main/Body';\nimport { GlobalStyle } from './cssStyles'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport mainMenuStateReducer from './mainMenuSlice'\nimport finishStateReducer from './finishSlice'\nimport videoReducer from './videoSlice'\nimport workflowPostReducer from './workflowPostSlice'\nimport workflowPostAndProcessReducer from './workflowPostAndProcessSlice'\nimport endReducer from './endSlice'\n\nexport default configureStore({\n  reducer: {\n    mainMenuState: mainMenuStateReducer,\n    finishState: finishStateReducer,\n    videoState: videoReducer,\n    workflowPostState: workflowPostReducer,\n    workflowPostAndProcessState: workflowPostAndProcessReducer,\n    endState: endReducer,\n  }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nimport { init } from './config'\nimport { sleep } from './util/utilityFunctions'\n\n\n// Load config here\n// Load the rest of the application and try to fetch the settings file from the\n// server.\nconst initialize = Promise.race([\n  init(),\n  sleep(300),\n]);\n\nconst render = (body: JSX.Element) => {\n  ReactDOM.render(body, document.getElementById('root'));\n};\n\ninitialize.then(\n\n  () => {\n    ReactDOM.render(\n      <React.StrictMode>\n          <Provider store={store}>\n            <App />\n          </Provider>\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  },\n\n  // This error case is vey unlikely to occur.\n  e => render(<p>\n    {`Fatal error while loading app: ${e.message}`}\n    <br />\n    This might be caused by a incorrect configuration by the system administrator.\n  </p>),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}