{"version":3,"sources":["types.ts","redux/mainMenuSlice.ts","config.ts","redux/finishSlice.ts","cssStyles.tsx","util/client.js","util/utilityFunctions.ts","redux/videoSlice.ts","main/MainMenu.tsx","main/Video.tsx","util/waveform.js","main/Timeline.tsx","main/CuttingActions.tsx","main/FinishMenu.tsx","redux/workflowPostSlice.ts","main/Save.tsx","redux/abortSlice.ts","main/Discard.tsx","redux/workflowPostAndProcessSlice.ts","main/WorkflowConfiguration.tsx","main/WorkflowSelection.tsx","main/Finish.tsx","main/MainContent.tsx","main/TheEnd.tsx","main/Body.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["MainMenuStateNames","mediaPackageId","initialState","value","cutting","mainMenuSlice","createSlice","name","reducers","setState","state","action","payload","actions","selectMainMenuState","mainMenuState","finishSlice","pageNumber","setPageNumber","selectFinishState","finishState","selectPageNumber","ocUrl","window","location","origin","showMetadata","showThumbnail","init","a","loadContextSettings","then","result","validate","assignResults","urlParams","URLSearchParams","search","rawUrlSettings","forEach","key","obj","segments","split","slice","segment","length","basepath","process","endsWith","settingsPath","REACT_APP_SETTINGS_PATH","base","startsWith","url","fetch","response","console","warn","status","debug","ok","error","statusText","headers","get","parseToml","text","SyntaxError","allowParse","src","sourceDescription","schema","path","validateValue","validateObj","validation","newValue","undefined","e","out","newPath","SCHEMA","types","v","Error","string","debugging","metadata","show","boolean","thumbnail","GlobalStyle","styles","globalStyle","basicButtonStyle","css","borderRadius","cursor","transitionDuration","transitionProperty","transform","display","justifyContent","alignItems","gap","textAlign","backOrContinueStyle","flexDirection","ariaLive","errorBoxStyle","errorStatus","borderColor","borderStyle","fontWeight","padding","client","endpoint","body","customConfig","encoded","btoa","unescape","encodeURIComponent","authHeaders","config","method","JSON","stringify","data","parse","Promise","reject","message","post","roundToDecimalPlace","num","decimalPlace","decimalFactor","Math","pow","round","Number","EPSILON","convertMsToReadableString","ms","hours","Date","toISOString","substr","minutes","seconds","parseInt","push","join","isPlaying","isPlayPreview","currentlyAt","id","nanoid","start","end","deleted","tracks","activeSegmentIndex","selectedWorkflowIndex","previewTriggered","aspectRatios","videoURLs","videoCount","duration","title","presenters","workflows","fetchVideoInformation","createAsyncThunk","argument","videoSlice","setIsPlaying","setIsPlayPreview","setPreviewTriggered","setCurrentlyAt","updateActiveSegment","skipDeletedSegments","setCurrentlyAtInSeconds","addSegment","setAspectRatio","dataKey","width","height","cut","segmentA","segmentB","splice","markAsDeletedOrAlive","setSelectedWorkflowIndex","mergeLeft","mergeSegments","mergeRight","extraReducers","builder","addCase","pending","fulfilled","reduce","o","uri","parseSegments","sort","n1","n2","displayOrder","Array","rejected","findIndex","element","newSegments","mergeSegmentIndex","min","max","endTime","index","selectIsPlaying","videoState","selectIsPlayPreview","selectPreviewTriggered","selectCurrentlyAt","selectCurrentlyAtInSeconds","selectSegments","selectActiveSegmentIndex","selectIsCurrentSegmentAlive","selectSelectedWorkflowIndex","selectVideoURL","selectVideoCount","selectDuration","selectDurationInSeconds","selectTitle","selectPresenters","selectTracks","selectWorkflows","selectAspectRatio","minHeight","apply","map","minWidth","calculateTotalAspectRatio","MainMenuButton","iconName","stateName","dispatch","useDispatch","activeState","useSelector","onMenuItemClicked","finish","mainMenuButtonStyle","backgroundColor","role","tabIndex","onClick","onKeyDown","event","icon","size","MainMenu","mainMenuStyle","borderRight","flexShrink","aria-label","faFilm","faListUl","faPhotoVideo","faSignOutAlt","VideoPlayer","isMuted","testTmp","aspectRatio","ref","useRef","useState","ready","setReady","errorState","setError","onProgressCallback","playedSeconds","onReadyCallback","current","getInternalPlayer","w","videoWidth","h","videoHeight","onEndedCallback","useEffect","seekTo","onErrorCallback","playerWrapper","position","paddingTop","reactPlayerStyle","playing","muted","onProgress","progressInterval","onReady","onEnded","onError","disablePictureInPicture","VideoControls","switchPlayPreview","switchIsPlaying","videoControlStyle","videoControlsRowStyle","playButtonStyle","playPreviewStyle","faToggleOn","faToggleOff","aria-checked","aria-hidden","faPause","faPlay","aria-pressed","VideoHeader","presenter_header","titleStyle","titleStyleBold","Video","videoURLStatus","videoPlayers","i","videoAreaStyle","borderBottom","videoPlayerAreaStyle","Waveform","opts","this","audioContext","AudioContext","oCanvas","document","createElement","buffer","WIDTH","HEIGHT","channelData","waveformImage","audioBuffer","aveRMS","peakRMS","numberSamples","waveformType","drawWaveform","drawCanvasWaveform","setDimensions","samples","type","delegateToWorker","worker","media","generateWaveform","getAudioData","_completeFuncs","fn","svgPath","catch","log","Object","defineProperty","set","opt","svgLength","prototype","constructor","ocCtx","getContext","decodeAudioData","arraybuffer","resolve","res","rej","ArrayBuffer","Blob","reader","FileReader","onload","readAsArrayBuffer","audiobuffer","dropSamples","getChannelData","amp","fillStyle","fillRect","lineWidth","strokeStyle","sliceWidth","x","beginPath","moveTo","sample","y","lineTo","stroke","sqrt","aveDBs","toDataURL","requestedLength","divider","filter","Worker","addEventListener","workerCommunication","bind","postMessage","setSVGpath","removeEventListener","terminate","len","createElementNS","setAttribute","oncomplete","Scrubber","timelineWidth","controlledPosition","setControlledPosition","isGrabbed","setIsGrabbed","keyboardJumpDelta","setKeyboardJumpDelta","wasCurrentlyAtRef","nodeRef","React","updateXPos","scrubberStyle","zIndex","boxShadow","scrubberDragHandleStyle","scrubberDragHandleIconStyle","arrowUpStyle","arrowDownStyle","onStart","onStop","axis","bounds","disabled","aria-grabbed","altKey","faBars","SegmentsList","segmentsStyle","background","active","borderWidth","boxSizing","Waveforms","images","setImages","waveformDisplayTestStyle","waveformsProcessed","videoURL","_index","array","blob","xhr","XMLHttpRequest","open","responseType","File","image","numSamples","send","alt","faSpinner","spin","Timeline","useResizeObserver","timelineStyle","cuttingActionButtonStyle","CuttingActionsButton","actionName","tooltip","ariaLabelText","dispatchAction","MarkAsDeletedButton","isCurrentSegmentAlive","faTrash","faTrashRestore","CuttingActions","cuttingStyle","blockStyle","faCut","faStepBackward","faStepForward","FinishMenuButton","finishMenuButtonStyle","fontSize","FinishMenu","finishMenuStyle","faSave","faFileExport","faTimesCircle","postVideoInformation","convertSegments","workflowPostSlice","selected","selectStatus","workflowPostState","selectError","workflowPostAndProcessState","SaveButton","workflowStatus","faCheck","faExclamationCircle","save","saveButtonStyle","aria-live","aria-atomic","ariaSaveUpdate","Save","postWorkflowStatus","postError","saveStyle","label","faChevronLeft","abortSlice","selectAbortState","abortState","DiscardButton","abort","setAbortState","Discard","cancelStyle","postVideoInformationWithWorkflow","workflow","workflowPostAndProcessSlice","SaveAndProcessButton","saveAndProcess","WorkflowConfiguration","postAndProcessWorkflowStatus","postAndProcessError","workflowConfigurationStyle","faTools","WorkflowButton","workflowIndex","selectWorkflowIndex","workflowButtonStyle","WorkflowSelection","workflowSelectionStyle","workflowSelectionSelectionStyle","flexWrap","maxHeight","description","PageButton","onPageChange","pageButtonStyle","Finish","pageZeroStyle","pageOneStyle","pageTwoStyle","MainContent","paddingRight","paddingLeft","finishStyle","defaultStyle","TheEnd","postAndProcessState","theEndStyle","faCheckCircle","faQuestion","Body","postAndProcessSelectStatus","bodyStyle","Fragment","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mainMenuStateReducer","finishStateReducer","videoReducer","workflowPostReducer","workflowPostAndProcessReducer","abortReducer","initialize","race","setTimeout","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"0IAyCYA,E,oGAAAA,K,kBAAAA,E,oBAAAA,E,sBAAAA,E,iBAAAA,M,KCjCZ,ICIWC,EDJLC,EAAyB,CAC7BC,MAAOH,EAAmBI,SAMfC,EAAgBC,YAAY,CACvCC,KAAM,gBACNL,eACAM,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChBD,EAAMP,MAAQQ,EAAOC,YAKZH,EAAcJ,EAAcQ,QAA5BJ,SAKFK,EAAsB,SAACJ,GAAD,OAA8DA,EAAMK,cAAcZ,OAEtGE,IAAf,QEjBaW,EAAcV,YAAY,CACrCC,KAAM,cACNL,aAV2B,CAC3BC,MAAO,mBACPc,WAAY,GASZT,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChBD,EAAMP,MAAQQ,EAAOC,SAEvBM,cAAe,SAACR,EAAOC,GACrBD,EAAMO,WAAaN,EAAOC,Y,EAMWI,EAAYH,QAAxCJ,E,EAAAA,SAAUS,E,EAAAA,cAGZC,EAAoB,SAACT,GAAD,OAA0DA,EAAMU,YAAYjB,OAChGkB,EAAmB,SAACX,GAAD,OAAoEA,EAAMU,YAAYH,YAEvGD,IAAf,Q,0CDtBWM,EAAgBC,OAAOC,SAASC,OAChCC,GAAwB,EACxBC,GAAyB,EAkBvBC,EAAI,uCAAG,gCAAAC,EAAA,sEAEZC,IAAsBC,MAAK,SAACC,GAEhCA,EAASC,EAASD,GAAQ,EAdX,aAc8B,6BAE7CE,EAAcF,MANE,OAUdG,EAAY,IAAIC,gBAAgBb,OAAOC,SAASa,QAEhDC,EAAiB,GACrBH,EAAUI,SAAQ,SAASpC,EAAOqC,GAGhC,IAAIC,EAA2BH,EACzBI,EAAWF,EAAIG,MAAM,KAC3BD,EAASE,MAAM,GAAI,GAAGL,SAAQ,SAACM,GACvBA,KAAWJ,IACfA,EAAII,GAAW,IAEjBJ,EAAMA,EAAII,MAEZJ,EAAIC,EAASA,EAASI,OAAS,IAAM3C,KAGjC6B,EAASC,EAASK,GAAgB,EApC1B,UAoCyC,8BAEvDJ,EAAcF,GA7BI,2CAAH,qDAqCXE,EAAgB,SAACF,GACrB,IAAK,IAAMQ,KAAOR,EACgB,MAA5BA,EAAM,iBACN/B,EAAiB+B,EAAM,gBAEf,cAARQ,GAAgD,MAAxBR,EAAOQ,GAAP,QAC1BlB,EAAQU,EAAOQ,GAAP,OAEE,aAARA,GAA8C,MAAvBR,EAAOQ,GAAP,OACzBd,EAAeM,EAAOQ,GAAP,MAEL,cAARA,GAA+C,MAAvBR,EAAOQ,GAAP,OAC1Bb,EAAgBK,EAAOQ,GAAP,OAQhBV,EAAmB,uCAAG,sCAAAD,EAAA,6DAGtBkB,EAAWC,4BACDC,SAAS,OACrBF,GAAY,KAMRG,EAAeF,2JAAYG,yBAjFL,uBAkFtBC,EAAOF,EAAaG,WAAW,KAAO,GAAKN,EAC3CO,EAboB,UAaX/B,OAAOC,SAASC,QAbL,OAac2B,GAbd,OAaqBF,GAbrB,kBAgBPK,MAAMD,GAhBC,OAgBxBE,EAhBwB,gEAkBxBC,QAAQC,KAAR,4BAAkCR,EAAlC,2BAAyE,MAAK,IAlBtD,kBAmBjB,MAnBiB,WAsBF,MAApBM,EAASG,OAtBa,wBAyBxBF,QAAQG,MAAR,WAAkBV,EAAlB,6BAzBwB,kBA0BjB,MA1BiB,WA2BdM,EAASK,GA3BK,wBA4BxBJ,QAAQK,MAAR,oBACeZ,EADf,qBACwCM,EAASG,OADjD,YAC2DH,EAASO,aA7B5C,kBA+BjB,MA/BiB,uBAkCtBP,EAASQ,QAAQC,IAAI,uBAlCC,aAkCtB,EAAsCZ,WAAW,cAlC3B,wBAmCxBI,QAAQC,KAAR,WAAiBR,EAAjB,2DAnCwB,kBAoCjB,MApCiB,8BAwCjBgB,IAxCiB,UAwCDV,EAASW,OAxCR,sGA0CxBV,QAAQK,MAAR,2BAAkCZ,EAAlC,qBACM,IAAIkB,YAAJ,2BAAoClB,EAApC,6BA3CkB,kEAAH,qDAuDnBjB,EAAW,SAACQ,EAAiC4B,EAAqBC,EAAaC,GAGnF,IAAMtC,EAAW,SAACuC,EAAa/B,EAAiCgC,GAC9D,MAAsB,oBAAXD,EACFE,EAAcF,EAAQ/B,EAAKgC,GAE3BE,EAAYH,EAAQ/B,EAAKgC,IAM9BC,EAAgB,SAACE,EAA6DzE,EAAmCsE,GACrH,IACE,IAAMI,EAAWD,EAAWzE,EAAOkE,EAAYC,GAC/C,YAAoBQ,IAAbD,EAAyB1E,EAAQ0E,EACxC,MAAOE,GAKP,OAJAtB,QAAQC,KACN,iCAA0Be,EAA1B,cAAoCF,EAApC,yBAAsEpE,EAAtE,wBACO4E,EADP,gBAGK,OAMLJ,EAAc,SAACH,EAAa/B,EAAiCgC,GAGjE,IAAIO,EAA2B,GAC/B,IAAK,IAAMxC,KAAOC,EAAK,CACrB,IAAMwC,EAAUR,EAAI,UAAMA,EAAN,YAAcjC,GAAQA,EAC1C,GAAIA,KAAOgC,EAAQ,CACjB,IAAMrE,EAAQ8B,EAASuC,EAAOhC,GAAMC,EAAID,GAAMyC,GAIhC,OAAV9E,IACF6E,EAAIxC,GAAOrC,QAGbsD,QAAQC,KAAR,WACMuB,EADN,cACmBV,EADnB,6CAMJ,OAAOS,GAGT,OAAO/C,EAASiD,EAAQzC,EAAK,KAKzB0C,EAAQ,CACZ,OAAU,SAACC,EAAQf,GACjB,GAAiB,kBAANe,EACT,MAAM,IAAIC,MAAM,mCAGpB,QAAW,SAACD,EAAWf,GACrB,GAAiB,mBAANe,EAAX,CAIA,GAAIf,EAAY,CACd,GAAU,SAANe,EACF,OAAO,EAET,GAAU,UAANA,EACF,OAAO,EAET,MAAM,IAAIC,MAAM,8BAEhB,MAAM,IAAIA,MAAM,uBAehBH,EAAS,CACbjF,eAAgBkF,EAAMG,OACtBC,UAAW,CACTjE,MAAO6D,EAAMG,QAEfE,SAAU,CACRC,KAAON,EAAMO,SAEfC,UAAW,CACTF,KAAON,EAAMO,UE3OV,IAAME,EAAwB,WACnC,OACE,YAAC,IAAD,CAAQC,OAAQC,KAOPA,EAAW,yFAYXC,EAAmBC,YAAI,CAClCC,aAAc,OACdC,OAAQ,UAERC,mBAAoB,OACpBC,mBAAoB,YACpB,UAAW,CACTC,UAAW,cAEb,UAAW,CACTA,UAAW,cAEb,WAAY,CACVA,UAAW,cAGbC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,IAAK,OACLC,UAAW,UApBsB,IA0BtBC,EAAsBX,YAAK,CACtCM,QAAS,OACTM,cAAe,MACfH,IAAK,QAH+B,IASzBI,EAAQ,+FAWRC,EAAgB,SAACC,GAC5B,OACEf,YAAI,2BACkB,WAAhBe,GAA6B,CAACT,QAAS,SAD1C,IAEDU,YAAa,MACbC,YAAa,SACbC,WAAY,OACZC,QAAS,SALR,K,QC1EA,SAAeC,EAAtB,kC,4CAAO,WAAsBC,GAAtB,6CAAAxF,EAAA,8FAA4D,GAA1ByF,EAAlC,EAAkCA,KAASC,EAA3C,wBACCvD,EAAU,CAAE,eAAgB,oBAE5BwD,EAAUC,KAAKC,SAASC,mBAC5B,oBAEIC,EAAc,CAAE,cAAgB,SAAhB,OAA0BJ,IAE1CK,EARD,yBASHC,OAAQR,EAAO,OAAS,OACrBC,GAVA,IAWHvD,QAAQ,uCACHA,GACAuD,EAAavD,SACb4D,KAIHN,IACFO,EAAOP,KAAOS,KAAKC,UAAUV,IAnB1B,kBAyBoB/F,OAAOgC,MAAM8D,EAAUQ,GAzB3C,cAyBGrE,EAzBH,iBA0BUA,EAASW,OA1BnB,WA0BHA,EA1BG,OA2BW8D,EAAd9D,EAAKrB,OAAgBiF,KAAKG,MAAM/D,GAAe,IAE3CX,EAASK,GA7BV,0CA8BMoE,GA9BN,cAgCG,IAAI5C,MAAM7B,EAASO,YAhCtB,2DAkCIoE,QAAQC,OAAO,KAAIC,QAAU,KAAIA,QAAUJ,IAlC/C,2D,sBAsCPb,EAAOnD,IAAM,SAAUoD,GAA8B,IAApBE,EAAmB,uDAAJ,GAC9C,OAAOH,EAAOC,EAAD,YAAC,eAAeE,GAAhB,IAA8BO,OAAQ,UAGrDV,EAAOkB,KAAO,SAAUjB,EAAUC,GAA0B,IAApBC,EAAmB,uDAAJ,GACrD,OAAOH,EAAOC,EAAD,YAAC,eAAeE,GAAhB,IAA8BD,WCjDtC,IAAMiB,EAAsB,SAACC,EAAaC,GAC/C,IAAIC,EAAgBC,KAAKC,IAAI,GAAIH,GACjC,OAAOE,KAAKE,OAAOL,EAAMM,OAAOC,SAAWL,GAAiBA,GASjDM,EAA4B,SAACC,GACxC,IAAIC,EAAQ,IAAIC,KAAMF,GAAU,GAAIG,cAAcC,OAAO,GAAI,GACzDC,EAAU,IAAIH,KAAMF,GAAU,GAAIG,cAAcC,OAAO,GAAI,GAC3DE,EAAU,IAAIJ,KAAMF,GAAU,GAAIG,cAAcC,OAAO,GAAI,GAE3DrH,EAAS,GAKb,OAJIwH,SAASN,GAAS,GAAKlH,EAAOyH,KAAKP,EAAQ,aAC3CM,SAASF,GAAW,GAAKE,SAASN,GAAS,IAAKlH,EAAOyH,KAAKH,EAAU,cAC1EtH,EAAOyH,KAAKF,EAAU,YAEfvH,EAAO0H,KAAK,KCKfxJ,EAAyC,CAC7CyJ,WAAW,EACXC,eAAe,EACfC,YAAa,EACbnH,SAAU,CAAC,CAACoH,GAAIC,cAAUC,MAAO,EAAGC,IAAK,EAAGC,SAAS,IACrDC,OAAQ,GACRC,mBAAoB,EACpBC,sBAAuB,EACvBC,kBAAkB,EAClBC,aAAc,GAEdC,UAAW,GACXC,WAAY,EACZC,SAAU,EACVC,MAAO,GACPC,WAAY,GACZC,UAAW,GAEXlH,OAAQ,OACRG,WAAOgB,GAGIgG,GAAwBC,YAAiB,8BAAD,uCAAgC,WAAOC,GAAP,eAAAnJ,EAAA,sEAE5DuF,EAAOnD,IAAP,UAAc+G,EAAS1J,MAAvB,mBAAuC0J,EAAS/K,eAAhD,eAF4D,cAE7EuD,EAF6E,yBAG5EA,GAH4E,2CAAhC,uDAUxCyH,GAAa3K,YAAY,CACpCC,KAAM,aACNL,eACAM,SAAU,CACR0K,aAAc,SAACxK,EAAOC,GACpBD,EAAMiJ,UAAYhJ,EAAOC,SAE3BuK,iBAAkB,SAACzK,EAAOC,GACxBD,EAAMkJ,cAAgBjJ,EAAOC,SAE/BwK,oBAAqB,SAAC1K,EAAOC,GAC3BD,EAAM4J,iBAAmB3J,EAAOC,SAElCyK,eAAgB,SAAC3K,EAAOC,GACtBD,EAAMmJ,YAActB,EAAoB5H,EAAOC,QAAS,GAExD0K,GAAoB5K,GACpB6K,GAAoB7K,IAEtB8K,wBAAyB,SAAC9K,EAAOC,GAC/BD,EAAMmJ,YAActB,EAAqC,IAAjB5H,EAAOC,QAAgB,GAE/D0K,GAAoB5K,GACpB6K,GAAoB7K,IAEtB+K,WAAY,SAAC/K,EAAOC,GAClBD,EAAMgC,SAAS+G,KAAK9I,EAAOC,UAE7B8K,eAAgB,SAAChL,EAAOC,GACtBD,EAAM6J,aAAa5J,EAAOC,QAAQ+K,SAAW,CAACC,MAAOjL,EAAOC,QAAQgL,MAAOC,OAAQlL,EAAOC,QAAQiL,SAEpGC,IAAK,SAACpL,GAEJ,GAAIA,EAAMgC,SAAShC,EAAM0J,oBAAoBJ,QAAUtJ,EAAMmJ,aACzDnJ,EAAMgC,SAAShC,EAAM0J,oBAAoBH,MAAQvJ,EAAMmJ,YACzD,OAAOnJ,EAIT,IAAIqL,EAAsB,CAACjC,GAAIC,cAC7BC,MAAOtJ,EAAMgC,SAAShC,EAAM0J,oBAAoBJ,MAChDC,IAAKvJ,EAAMmJ,YACXK,QAASxJ,EAAMgC,SAAShC,EAAM0J,oBAAoBF,SAChD8B,EAAsB,CAAClC,GAAIC,cAC7BC,MAAOtJ,EAAMmJ,YACbI,IAAKvJ,EAAMgC,SAAShC,EAAM0J,oBAAoBH,IAC9CC,QAASxJ,EAAMgC,SAAShC,EAAM0J,oBAAoBF,SAGpDxJ,EAAMgC,SAASuJ,OAAOvL,EAAM0J,mBAAoB,EAAG2B,EAAUC,IAE/DE,qBAAsB,SAACxL,GACrBA,EAAMgC,SAAShC,EAAM0J,oBAAoBF,SAAWxJ,EAAMgC,SAAShC,EAAM0J,oBAAoBF,SAE/FiC,yBAA0B,SAACzL,EAAOC,GAChCD,EAAM2J,sBAAwB1J,EAAOC,SAEvCwL,UAAW,SAAC1L,GACV2L,GAAc3L,EAAOA,EAAM0J,mBAAoB1J,EAAM0J,mBAAqB,IAE5EkC,WAAY,SAAC5L,GACX2L,GAAc3L,EAAOA,EAAM0J,mBAAoB1J,EAAM0J,mBAAqB,KAI9EmC,cAAe,SAAAC,GACbA,EAAQC,QACN3B,GAAsB4B,SAAS,SAAChM,EAAOC,GACrCD,EAAMiD,OAAS,aAEnB6I,EAAQC,QACN3B,GAAsB6B,WAAW,SAACjM,EAAOC,GACvCD,EAAMiD,OAAS,UAkBfjD,EAAM8J,UAAY7J,EAAOC,QAAQuJ,OAAOyC,QAAO,SAAC/K,EAAagL,GAAd,OAAsChL,EAAE4H,KAAKoD,EAAEC,KAAMjL,IAAI,IACxGnB,EAAM+J,WAAa/J,EAAM8J,UAAU1H,OACnCpC,EAAMgK,SAAW/J,EAAOC,QAAQ8J,SAChChK,EAAMiK,MAAQhK,EAAOC,QAAQ+J,MAC7BjK,EAAMkK,WAAa,GACnBlK,EAAMgC,SAAWqK,GAAcpM,EAAOC,QAAQ8B,SAAU/B,EAAOC,QAAQ8J,UACvEhK,EAAMyJ,OAASxJ,EAAOC,QAAQuJ,OAC9BzJ,EAAMmK,UAAYlK,EAAOC,QAAQiK,UAAUmC,MAAK,SAACC,EAA8BC,GAC7E,OAAID,EAAGE,aAAeD,EAAGC,aAAuB,EAC5CF,EAAGE,aAAeD,EAAGC,cAAwB,EAC1C,KAGTzM,EAAM6J,aAAe,IAAI6C,MAAM1M,EAAM+J,eAEzC+B,EAAQC,QACN3B,GAAsBuC,UAAU,SAAC3M,EAAOC,GACtCD,EAAMiD,OAAS,SACfjD,EAAMoD,MAAQnD,EAAOmD,MAAMuE,cAS7BiD,GAAsB,SAAC5K,GAC3BA,EAAM0J,mBAAqB1J,EAAMgC,SAAS4K,WAAU,SAAAC,GAAO,OACzDA,EAAQvD,OAAStJ,EAAMmJ,aAAe0D,EAAQtD,KAAOvJ,EAAMmJ,eAE1DnJ,EAAM0J,mBAAqB,IAC5B1J,EAAM0J,mBAAqB,IAOzB2C,GAAgB,SAACrK,EAAegI,GACpC,IAAI8C,EAA0B,GAS9B,OAPwB,IAApB9K,EAASI,QACX0K,EAAY/D,KAAK,CAACK,GAAIC,cAAUC,MAAO,EAAGC,IAAKS,EAAUR,SAAS,IAGpExH,EAASH,SAAQ,SAACgL,GAChBC,EAAY/D,KAAK,CAACK,GAAIC,cAAUC,MAAOuD,EAAQvD,MAAOC,IAAKsD,EAAQtD,IAAKC,QAASqD,EAAQrD,aAEpFsD,GAMHnB,GAAgB,SAAC3L,EAA6B0J,EAA4BqD,GAE1EA,EAAoB,GAAKA,EAAoB/M,EAAMgC,SAASI,OAAS,IAKzEpC,EAAMgC,SAAS0H,GAAoBJ,MAAQrB,KAAK+E,IAC9ChN,EAAMgC,SAAS0H,GAAoBJ,MAAOtJ,EAAMgC,SAAS+K,GAAmBzD,OAC9EtJ,EAAMgC,SAAS0H,GAAoBH,IAAMtB,KAAKgF,IAC5CjN,EAAMgC,SAAS0H,GAAoBH,IAAKvJ,EAAMgC,SAAS+K,GAAmBxD,KAG5EvJ,EAAMgC,SAASuJ,OAAOwB,EAAmB,GAGzCnC,GAAoB5K,KAGhB6K,GAAsB,SAAC7K,GAC3B,GAAGA,EAAMiJ,WAAajJ,EAAMgC,SAAShC,EAAM0J,oBAAoBF,SAAWxJ,EAAMkJ,cAAe,CAG3F,IAFA,IAAIgE,EAAUlN,EAAMgC,SAAShC,EAAM0J,oBAAoBH,IACnD4D,EAAQnN,EAAM0J,mBACXyD,EAAQnN,EAAMgC,SAASI,QAAUpC,EAAMgC,SAASmL,GAAO3D,SAC5D0D,EAAUlN,EAAMgC,SAASmL,GAAO5D,IAChC4D,IAEFnN,EAAMmJ,YAAc+D,EACpBlN,EAAM4J,kBAAmB,I,GAoBkEW,GAAWpK,QAD7FqK,G,GAAAA,aAAcC,G,GAAAA,iBAAkBE,G,GAAAA,eAAgBG,G,GAAAA,wBAAqCE,I,GAAZD,W,GAAYC,gBAAgBI,G,GAAAA,IAClHI,G,GAAAA,qBAAsBC,G,GAAAA,yBAA0BC,G,GAAAA,UAAWE,G,GAAAA,WAAYlB,G,GAAAA,oBAI5D0C,GAAkB,SAACpN,GAAD,OAC7BA,EAAMqN,WAAWpE,WACNqE,GAAsB,SAACtN,GAAD,OACjCA,EAAMqN,WAAWnE,eACNqE,GAAyB,SAACvN,GAAD,OACpCA,EAAMqN,WAAWzD,kBACN4D,GAAoB,SAACxN,GAAD,OAC/BA,EAAMqN,WAAWlE,aACNsE,GAA6B,SAACzN,GAAD,OACxCA,EAAMqN,WAAWlE,YAAc,KACpBuE,GAAiB,SAAC1N,GAAD,OAC5BA,EAAMqN,WAAWrL,UACN2L,GAA2B,SAAC3N,GAAD,OACtCA,EAAMqN,WAAW3D,oBACNkE,GAA8B,SAAC5N,GAAD,OAExCA,EAAMqN,WAAWrL,SAAShC,EAAMqN,WAAW3D,oBAAoBF,SACrDqE,GAA8B,SAAC7N,GAAD,OAEzCA,EAAMqN,WAAW1D,uBAGNmE,GAAiB,SAAC9N,GAAD,OAA8DA,EAAMqN,WAAWvD,WAChGiE,GAAmB,SAAC/N,GAAD,OAAgEA,EAAMqN,WAAWtD,YACpGiE,GAAiB,SAAChO,GAAD,OAA4DA,EAAMqN,WAAWrD,UAC9FiE,GAA0B,SAACjO,GAAD,OAA4DA,EAAMqN,WAAWrD,SAAW,KAClHkE,GAAc,SAAClO,GAAD,OAAsDA,EAAMqN,WAAWpD,OACrFkE,GAAmB,SAACnO,GAAD,OAAgEA,EAAMqN,WAAWnD,YACpGkE,GAAe,SAACpO,GAAD,OAC1BA,EAAMqN,WAAW5D,QACN4E,GAAkB,SAACrO,GAAD,OAA8DA,EAAMqN,WAAWlD,WACjGmE,GAAoB,SAACtO,GAAD,OA3CC,SAAC6J,GACjC,IAAI0E,EAAYtG,KAAK+E,IAAIwB,MAAMvG,KAAM4B,EAAa4E,KAAI,SAAStC,GAAK,OAAOA,EAAEhB,WACzEuD,EAAWzG,KAAK+E,IAAIwB,MAAMvG,KAAM4B,EAAa4E,KAAI,SAAStC,GAAK,OAAOA,EAAEjB,UAE5E,OADAwD,GAAY7E,EAAazH,OAClB6F,KAAK+E,IAAKuB,EAAYG,EAAY,IAAM,QAwC/CC,CAA0B3O,EAAMqN,WAAWxD,eAE9BU,MAAf,QCnPMqE,GAAqF,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,UAE/FC,EAAWC,cACXC,EAAcC,YAAY9O,GAE1B+O,EAAoB,WACxBJ,EAAShP,EAAS+O,IAEdA,IAAcxP,EAAmB8P,QACnCL,EAASvO,EAAc,IAGzBuO,EAASvE,IAAa,KAGlB6E,EAAsB/J,YAAI,yBAC9B4F,MAAO,OACPC,OAAQ,SACJ8D,IAAgBH,GAAc,CAChCQ,gBAAiB,SAJU,IAM7BpJ,cAAe,WANc,IAS/B,OACE,kBAAIZ,IAAG,YAAE,CAACD,EAAkBgK,GAArB,IACLE,KAAK,WAAWC,SAAU,EAC1BC,QAAUN,EACVO,UAAW,SAACC,GAAkE,UAAdA,EAAM7N,KACpEqN,MAGF,YAAC,IAAD,CAAkBS,KAAMf,EAAUgB,KAAK,OACvC,uBAAMf,KAKGgB,GAjEgB,WAE7B,IAAMC,EAAgBzK,YAAI,CACxB0K,YAAa,iBACb9E,MAAO,QACPtF,QAAS,OACTM,cAAe,SACf+J,WAAY,EACZnK,WAAY,SACZW,QAAS,OACTV,IAAK,QARkB,IAWzB,OACE,mBAAKT,IAAKyK,EAAe9F,MAAM,YAAYsF,KAAK,aAAaW,aAAW,mBACtE,YAAC,GAAD,CAAgBrB,SAAUsB,IAAQrB,UAAWxP,EAAmBI,UAC/DsB,GAAgB,YAAC,GAAD,CAAgB6N,SAAUuB,IAAUtB,UAAWxP,EAAmBwF,WAClF7D,GAAiB,YAAC,GAAD,CAAgB4N,SAAUwB,IAAcvB,UAAWxP,EAAmB2F,YACxF,YAAC,GAAD,CAAgB4J,SAAUyB,IAAcxB,UAAWxP,EAAmB8P,W,6BCV5E,I,4DA8EMmB,GAA0E,SAAC,GAA6B,IAA5BtF,EAA2B,EAA3BA,QAASrI,EAAkB,EAAlBA,IAAK4N,EAAa,EAAbA,QAGxFzB,EAAWC,cACX/F,EAAYiG,YAAY9B,IACxBjE,EAAc+F,YAAYzB,IAC1BzD,EAAYkF,YAAYjB,IACxBwC,EAAUvB,YAAY3B,IACtBmD,EAAcxB,YAAYZ,IAG1BqC,EAAMC,iBAAoB,MAX2E,EAYjFC,oBAAS,GAZwE,oBAYpGC,EAZoG,KAY7FC,EAZ6F,OAa5EF,oBAAS,GAbmE,oBAapGG,EAboG,KAaxFC,EAbwF,KAgBrGC,EAAqB,SAAClR,GAEtB6H,EAAoBsB,EAAa,KAAOtB,EAAoB7H,EAAMmR,cAAe,IACnFpC,EAASjE,GAAwB9K,EAAMmR,iBAKrCC,EAAkB,WAGtB,GAFAL,GAAS,GAELJ,EAAIU,SAAWV,EAAIU,QAAQC,oBAAqB,CAClD,IAAIC,EAAKZ,EAAIU,QAAQC,oBAAyCE,WAC1DC,EAAKd,EAAIU,QAAQC,oBAAyCI,YAC9D3C,EAAS/D,GAAe,CAACC,UAASC,MAAOqG,EAAGpG,OAAQsG,OAIlDE,EAAkB,WACtB5C,EAASvE,IAAa,IACtBuE,EAASjE,GAAwBd,KAGnC4H,qBAAU,YAEJ3I,GAAa0H,EAAIU,SAAWP,GAC9BH,EAAIU,QAAQQ,OAAO1I,EAAa,WAE/BsH,GAAWE,EAAIU,SAAWP,IAC3BH,EAAIU,QAAQQ,OAAO1I,EAAa,WAChC4F,EAASrE,IAAoB,QAIjC,IAAMoH,EAAkB,SAACzN,GACvB4M,GAAS,IAGL7K,EAAgBd,YAAI,4BACnB0L,GAAe,CAACpL,QAAS,SADP,IAEvBU,YAAa,MACbC,YAAa,SACbC,WAAY,OACZC,QAAS,SALc,IAQnBsL,EAAgBzM,YAAI,CACxB0M,SAAU,WACV9G,MAAO,OACP+G,WAAYvB,EAAc,KAHH,IAMnBwB,EAAgB,GAoCtB,OACE,8BA9BKlB,EAsBD,mBAAK1L,IAAKc,EAAe6D,MAAM,YAAYsF,KAAK,SAC9C,sEArBF,mBAAKjK,IAAKyM,EAAe9H,MAAM,iBAC7B,YAAC,KAAD,CAAarH,IAAKA,EAChB0C,IAAK4M,EACLvB,IAAKA,EACLzF,MAAM,OACNC,OAAO,OACPgH,QAASlJ,EACTmJ,MAAO5B,EACP6B,WAAYnB,EACZoB,iBAAkB,IAClBC,QAASnB,EACToB,QAASb,EACTc,QAASX,EACTtC,UAAW,EACXkD,yBAAuB,O,ogBAkC7BC,GAA8B,WAGlC,IAAM5D,EAAWC,cACX/F,EAAYiG,YAAY9B,IACxBlE,EAAgBgG,YAAY5B,IAC5BnE,EAAc+F,YAAY1B,IAG1BoF,EAAoB,WACxB7D,EAAStE,IAAkBvB,KAIvB2J,EAAkB,WACtB9D,EAASvE,IAAcvB,KAInB6J,EAAoBxN,YAAI,CAC5BM,QAAS,OACTM,cAAe,SACfL,eAAgB,SAChBC,WAAY,SACZoF,MAAO,OACPzE,QAAS,QANkB,IASvBsM,EAAwBzN,YAAI,CAChCM,QAAS,OACTM,cAAe,MACfL,eAAgB,SAChBC,WAAY,SACZoF,MAAO,OACPzE,QAAS,OACTV,IAAK,QAP0B,IAU3BiN,EAAe,GAYfC,EAAgB,GAStB,OACE,mBAAK3N,IAAKwN,EAAmB7I,MAAM,kBACjC,mBAAK3E,IAAKyN,EAAuB9I,MAAM,0BACrC,mBAAK3E,IAAG,GACN2E,MAAO,6DAA+Df,EAAgB,KAAO,QAC7F,mBAAK5D,IAAG,IAAR,gBAGA,YAAC,IAAD,CAAiBA,IAAK2N,EAAkBrD,KAAM1G,EAAgBgK,IAAaC,IAAatD,KAAK,KAC3FN,KAAK,SAAS6D,eAAclK,EAAesG,SAAU,EAAG6D,eAAa,EACrEnD,aAAW,kCACXT,QAAUmD,EACVlD,UAAW,SAACC,GAAkE,MAAdA,EAAM7N,KACpE8Q,QAIN,YAAC,IAAD,CAAiBtN,IAAK0N,EAAiBpD,KAAM3G,EAAYqK,IAAUC,IAAQ1D,KAAK,KAC9E5F,MAAM,cACNsF,KAAK,SAASiE,eAAcvK,EAAWuG,SAAU,EAAG6D,eAAa,EACjEnD,aAAW,cACXT,QAAUoD,EACVnD,UAAW,SAACC,GAAkE,MAAdA,EAAM7N,KAA6B,UAAd6N,EAAM7N,KACzF+Q,OAGJ,oBAAMvN,IAAG,GACPkK,SAAU,EAAGD,KAAK,SACjB,IAAI9G,KAAMU,GAA4B,GAAIT,cAAcC,OAAO,GAAI,Q,yQAUxE8K,GAA4B,WAChC,IAkBIC,EAlBEzJ,EAAQiF,YAAYhB,IACpBhE,EAAagF,YAAYf,IAEzBwF,EAAU,GASVC,EAAc,GAUpB,OAHI1J,GAAcA,EAAW9H,SACzBsR,EAAmB,mBAAKpO,IAAKqO,EAAY1J,MAAM,oBAA5B,MAAmDC,EAAWlB,KAAK,QAGxF,mBAAKiB,MAAM,oBAAoB3E,IAAG,IAChC,mBAAKA,IAAG,YAAE,CAACqO,EAAYC,GAAf,IAAgC3J,MAAM,eAAeA,GAC5DyJ,IAKQG,GA3Ua,WAG1B,IAAM9E,EAAWC,cACXlF,EAAYoF,YAAYpB,IACxB/D,EAAamF,YAAYnB,IACzB+F,EAAiB5E,aAAY,SAAClP,GAAD,OAAmEA,EAAMqN,WAAWpK,UACjHG,EAAQ8L,aAAY,SAAClP,GAAD,OAAiEA,EAAMqN,WAAWjK,SAG5GwO,qBAAU,WACe,SAAnBkC,GACF/E,EAAS3E,GAAsB,CAAC7K,eAAgBA,EAAgBqB,MAAOA,OAExE,CAACkT,EAAgB/E,IAcpB,IADA,IAAMgF,EAA8B,GAC3BC,EAAI,EAAGA,EAAIjK,EAAYiK,IAE9BD,EAAahL,KAAK,YAAC,GAAD,CAAajH,IAAKkS,EAAG/I,QAAS+I,EAAGpR,IAAKkH,EAAUkK,GAAIxD,QAAe,IAANwD,KAGjF,IAWMC,EAAiB3O,YAAI,CACzBM,QAAS,OACTsF,MAAO,OACPhF,cAAe,SACfL,eAAgB,SAChBC,WAAY,SACZW,QAAS,MACTyN,aAAc,kBAPU,IAUpBC,EAAuB7O,YAAI,CAC/BM,QAAS,OACTM,cAAe,MACfL,eAAgB,SAChBC,WAAY,SACZoF,MAAO,QALuB,IAQhC,OACE,mBAAK5F,IAAK2O,EAAgBhK,MAAM,cA5BhC,mBAAK3E,IAAKc,EAAc0N,GAAiB7J,MAAM,YAAYsF,KAAK,SAC9D,iFAAkE,uBACjEnM,EAAQ,YAAcA,EAAQ,kCAAkC,uBAChE7D,EAAiB,GAAK,2FA2BvB,YAAC,GAAD,MACA,mBAAK+F,IAAK6O,EAAsBlK,MAAM,qBACnC8J,GAEH,YAAC,GAAD,Q,6BC1FC,SAASK,GAASC,GAAO,IAAD,OAC7BC,KAAKC,aAAe,IAAIC,aACxBF,KAAKG,QAAUC,SAASC,cAAc,UACtCL,KAAKM,OAAS,GACdN,KAAKO,MAAQ,EACbP,KAAKQ,OAAS,EACdR,KAAKS,YAAc,GACnBT,KAAKU,cAAgB,GACrBV,KAAKW,YAAc,KAEnBX,KAAKY,OAAS,EACdZ,KAAKa,QAAU,EAEfb,KAAKc,cAAgB,IACrBd,KAAKe,aAAe,MACpBf,KAAKgB,aAAehB,KAAKiB,mBAErBlB,EAAKnJ,OAASmJ,EAAKlJ,QACrBmJ,KAAKkB,cAAcnB,EAAKnJ,MAAOmJ,EAAKlJ,QAElCkJ,EAAKoB,UACPnB,KAAKc,cAAgBf,EAAKoB,SAExBpB,EAAKqB,MAAsB,QAAdrB,EAAKqB,OACpBpB,KAAKe,aAAe,MACpBf,KAAKgB,aAAehB,KAAKqB,iBACzBrB,KAAKsB,OAAS,MAEZvB,EAAKwB,OACPvB,KAAKwB,iBAAiBzB,EAAKwB,OACxBxU,MAAK,WACJ,EAAK0U,eACL,EAAKT,eACqB,QAAtB,EAAKD,cACPW,EAAenU,SAAQ,SAAAoU,GACrBA,EAAG,EAAKjB,eAAiB,EAAKkB,QAAS,EAAKb,oBAIjDc,OAAM,SAAA9R,GAAC,OAAItB,QAAQqT,IAAI/R,MAG5B,IAAI2R,EAAiB,GACrBK,OAAOC,eAAehC,KAAM,aAAc,CACxC/Q,IAAK,WACH,OAAOyS,GAETO,IAAK,SAASN,EAAIO,GAChB,GAAiB,mBAANP,EAAkB,CAC3B,GAAI3B,KAAKU,eAAiBV,KAAK4B,QAE7B,YADAD,EAAG3B,KAAKU,eAAiBV,KAAK4B,QAAS5B,KAAKmC,WAI9CT,EAAejN,KAAKkN,OAM5B7B,GAASsC,UAAY,CACnBC,YAAavC,GACboB,cAAe,SAAStK,EAAOC,GAC7BmJ,KAAKG,QAAQvJ,MAAQA,EACrBoJ,KAAKO,MAAQ3J,EACboJ,KAAKG,QAAQtJ,OAASA,EACtBmJ,KAAKQ,OAAS3J,EACdmJ,KAAKsC,MAAQtC,KAAKG,QAAQoC,WAAW,OAEvCC,gBAAiB,SAASC,GAAc,IAAD,OACrC,OAAO,IAAItP,SAAQ,SAACuP,EAAStP,GAC3B,IAAID,SAAQ,SAACwP,EAAKC,GAChB,GAAIH,aAAuBI,YACzBF,EAAIF,QAED,GAAIA,aAAuBK,KAAM,CACpC,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,WACdN,EAAII,EAAO/V,SAEb+V,EAAOG,kBAAkBT,OAG5B1V,MAAK,SAAAuT,GACJ,EAAKL,aAAauC,gBAAgBlC,GAC/BvT,MAAK,SAAAoW,GACJ,EAAK7C,OAAS6C,EACdT,OAEDb,OAAM,SAAA9R,GACLqD,EAAOrD,SAGZ8R,OAAM,SAAA9R,GACLqD,EAAOrD,UAIb0R,aAAc,SAASnB,GACrBA,EAASA,GAAUN,KAAKM,OACxBN,KAAKS,YAAcT,KAAKoD,YAAY9C,EAAO+C,eAAe,GAAIrD,KAAKc,gBAErEG,mBAAoB,SAASqC,GAAM,IAAD,OAChCA,EAAMA,GAAO,EACbtD,KAAKsC,MAAMiB,UAAY,YACvBvD,KAAKsC,MAAMkB,SAAS,EAAG,EAAGxD,KAAKO,MAAOP,KAAKQ,QAC3CR,KAAKsC,MAAMmB,UAAY,EACvBzD,KAAKsC,MAAMoB,YAAc,QACzB,IAAIC,EAA0B,EAAb3D,KAAKO,MAAcP,KAAKS,YAAY3S,OACjD8V,EAAI,EAER5D,KAAKsC,MAAMuB,YACX7D,KAAKsC,MAAMwB,OAAOF,EAAG5D,KAAKS,YAAY,GAAKT,KAAKQ,OAAS,IAAQ,GAEjER,KAAKS,YAAYlT,SAAQ,SAAAwW,GACvB,IAAI3T,EAAI2T,EAAST,EACbU,EAAI,EAAKxD,QAAU,EAAIpQ,GAAK,EAChC,EAAKkS,MAAM2B,OAAOL,EAAGI,GACrB,EAAKpD,QAAUmD,EAASA,EACxB,EAAKlD,QAAUlN,KAAKgF,IAAIoL,EAASA,EAAQ,EAAKlD,SAC9C+C,GAAKD,KAEP3D,KAAKsC,MAAM2B,OAAOjE,KAAKO,MAAOP,KAAKQ,OAAO,GAC1CR,KAAKsC,MAAM4B,SACXlE,KAAKY,OAASjN,KAAKwQ,KAAKnE,KAAKY,OAASZ,KAAKS,YAAY3S,QACvDkS,KAAKoE,OAAS,GAAKzQ,KAAKmO,IAAI9B,KAAKY,QAAUjN,KAAKmO,IAAI,IACpD9B,KAAKU,cAAgBV,KAAKG,QAAQkE,aAEpCjB,YAAa,SAASnQ,EAAMqR,GAC1B,IAAIC,EAAU5Q,KAAKgF,IAAInE,SAASvB,EAAKnF,OAASwW,GAAkB,GAChE,OAAOrR,EAAKuR,QAAO,SAACT,EAAQrE,GAAT,OAAeA,EAAI6E,IAAY,MAEpD/C,iBAAkB,SAASiB,GACzB,OAAOzC,KAAKwC,gBAAgBC,IAE9BpB,iBAAkB,WACXrB,KAAKsB,SACRtB,KAAKsB,OAAS,IAAImD,OAAO,wBACzBzE,KAAKsB,OAAOoD,iBAAiB,UAAW1E,KAAK2E,oBAAoBC,KAAK5E,OAAO,GAC7EA,KAAKsB,OAAOuD,YAAY7E,KAAKS,eAGjCkE,oBAAqB,SAAS5U,GAC5B,OAAOA,EAAEkD,KAAKmO,MACZ,IAAK,OACHpB,KAAK8E,WAAW/U,EAAEkD,KAAKxD,KAAMM,EAAEkD,KAAKnF,QACpCkS,KAAKsB,OAAOyD,oBAAoB,UAAW/E,KAAK2E,oBAAoBC,KAAK5E,OAAO,GAChFA,KAAKsB,OAAO0D,YACZhF,KAAKsB,OAAS,OAMpBwD,WAAY,SAASrV,EAAMwV,GAAM,IAAD,OAC9BjF,KAAK4B,QAAUxB,SAAS8E,gBAAgB,6BAA8B,QACtElF,KAAKmC,UAAY8C,EAEjBjF,KAAK4B,QAAQuD,aAAa,IAAK1V,GAC/BuQ,KAAK4B,QAAQuD,aAAa,gBAAiB,sBAC3CnF,KAAK4B,QAAQuD,aAAa,eAAgB,SAE1CnF,KAAKoF,WAAW7X,SAAQ,SAAAoU,GAAE,OAAIA,EAAG,EAAKC,QAAS,EAAKO,gB,4ZCpHlDkD,GAA8C,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAG9C7K,EAAWC,cACX/F,EAAYiG,YAAY9B,IACxBjE,EAAc+F,YAAY1B,IAC1BxD,EAAWkF,YAAYlB,IACvBtE,EAAqBwF,YAAYvB,IACjC3L,EAAWkN,YAAYxB,IAR0C,EAWnBmD,mBAAS,CAACqH,EAAG,EAAEI,EAAG,IAXC,oBAWhEuB,EAXgE,KAW5CC,EAX4C,OAYrCjJ,oBAAS,GAZ4B,oBAYhEkJ,EAZgE,KAYrDC,EAZqD,OAarBnJ,mBAAS,KAbY,oBAahEoJ,EAbgE,KAa7CC,EAb6C,KAcjEC,EAAoBvJ,iBAAO,GAC3BwJ,EAAUC,IAAMzJ,OAAO,MAG7BgB,qBAAU,WACLzI,IAAgBgR,EAAkB9I,UACnCiJ,IACAH,EAAkB9I,QAAUlI,MAKhCyI,qBAAU,WACLzI,GAAea,GAChB8P,EAAsB,CAAC5B,EAAI/O,EAAca,EAAa4P,EAAgBtB,EAAG,MAG1E,CAACsB,IASJ,IAAMU,EAAa,WACjB,IAAMhC,EAAIuB,EAAmBvB,EAC7BwB,EAAsB,CAAC5B,EAAI/O,EAAca,EAAa4P,EAAgBtB,OAyClEiC,EAAgBjV,YAAI,CACxBgK,gBAAiB,QACjBnE,OAAQ,QACRD,MAAO,MACP8G,SAAU,WACVwI,OAAQ,EACRC,UAAW,8BACX7U,QAAS,OACTM,cAAe,SACfL,eAAgB,gBAChBC,WAAY,UAVW,IAanB4U,EAA0BpV,YAAI,CAClCgK,gBAAiB,yBACjB/J,aAAc,OACd4F,OAAQ,OACRvF,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZ2U,UAAW,8BACXjV,OAAQuU,EAAY,WAAa,OACjCtU,mBAAoB,OACpBC,mBAAoB,YACpB,UAAW,CACTC,UAAW,cAEb,WAAY,CACVA,UAAW,eAfoB,IAmB7BgV,EAA2B,GAK3BC,EAAY,GAQZC,EAAc,GAqBpB,OACE,YAAC,KAAD,CAEEC,QA3GgB,WAClBd,GAAa,IA2GXe,OAxGe,SAAC1W,EAAQ2N,GAAmB,IACtCkG,EAAQlG,EAARkG,EAAGI,EAAKtG,EAALsG,EACVwB,EAAsB,CAAC5B,IAAGI,MAC1BvJ,EAASpE,GAAgBuN,EAAI0B,EAAkB5P,IAE/CgQ,GAAa,IAoGXgB,KAAK,IACLC,OAAO,SACPjJ,SAAU6H,EACVqB,SAAUjS,EACVmR,QAASA,GAET,mBAAKzJ,IAAKyJ,EAAS9U,IAAKiV,EAAetQ,MAAM,YAC3C,mBAAK3E,IAAKuV,IACV,mBAAKvV,IAAMoV,EAAyBzQ,MAAM,aAAakR,eAAcpB,EACnE7J,aAAY,aAAe5H,EAA0Ba,GAAe,qBAAuBO,EAAqB,MACjG1H,EAAS0H,GAAoBF,QAAU,WAAa,UACrD,wGACdgG,SAAU,EAAGE,UA1GI,SAACC,GACxB,GAAGA,EAAMyL,OACP,OAAQzL,EAAM7N,KACZ,IAAK,IAEHiN,EAASpE,GAAe1C,KAAKgF,IAAI9D,EAAc8Q,EAAmB,KAClE,MACF,IAAK,IAEHlL,EAASpE,GAAe1C,KAAK+E,IAAI7D,EAAc8Q,EAAmBjQ,KAClE,MACF,IAAK,IAEHkQ,EAAqBjS,KAAK+E,IAAwB,GAApBiN,EAAwB,MACtD,MACF,IAAK,IAEHC,EAAqBjS,KAAKgF,IAAIgN,EAAoB,GAAI,OA0FtD,YAAC,IAAD,CAAiB3U,IAAKqV,EAA6B/K,KAAMyL,IAAQxL,KAAK,QAGxE,mBAAKvK,IAAKsV,OASZU,GAAkD,SAAC,GAAoB,EAAnB1B,cAAoB,IAGtE5X,EAAWkN,YAAYxB,IACvB1D,EAAWkF,YAAYlB,IACvBtE,EAAqBwF,YAAYvB,IAqDjC4N,EAAgBjW,YAAI,CACxBM,QAAS,OACTM,cAAe,MACf+L,WAAY,QAHW,IAMzB,OACE,mBAAK3M,IAAKiW,EAAetR,MAAM,YA7B7BjI,EAASyM,KAAK,SAACtM,EAAkBgL,GAAnB,OACZ,mBAAKrL,IAAKK,EAAQiH,GAAIa,MAAO,WAAakD,EACxC+C,aAAY,WAAa/C,EAAQ,MAAQhL,EAAQqH,QAAU,WAAa,UACzD,WAAalB,EAA0BnG,EAAQmH,OAChD,UAAYhB,EAA0BnG,EAAQoH,KAAO,IACnEiG,SAAU,EACZlK,IAAG,YAAE,CACHkW,YAhCShS,EAgCWrH,EAAQqH,QAhCDiS,EAgCU/R,IAAuByD,EA/B7D3D,GAAYiS,EAENjS,IAAYiS,EACf,uOAMIjS,GAAWiS,EACd,uBACEjS,GAAWiS,EACd,2OADD,EAVE,wBA+BHlW,aAAc,MACdgB,YAAamD,IAAuByD,EAAQ,SAAW,QACvD7G,YAAa,QACboV,YAAa,MACbC,UAAW,aACXzQ,OAAS/I,EAAQoH,IAAMpH,EAAQmH,OAASU,EAAY,IAAM,IAC1DmB,OAAQ,QACRqP,OAAQ,GATP,MA/BO,IAAChR,EAAkBiS,O,0CA+D/BG,GAA0B,WAE9B,IAAM9R,EAAYoF,YAAYpB,IACxBgG,EAAiB5E,aAAY,SAAClP,GAAD,OAAmEA,EAAMqN,WAAWpK,UAHnF,EAMR4N,mBAAmB,IANX,oBAM7BgL,EAN6B,KAMrBC,EANqB,KAQ9BC,EAA2BzW,YAAI,yBACnCM,QAAS,OACTM,cAAe,SACf8L,SAAU,WACVnM,eAAgB,UACZgW,EAAOzZ,QAAU,GAAM,CAAC0D,WAAY,WALN,IAMlCoF,MAAO,OACPC,OAAQ,QACR8G,WAAY,SARsB,IAYpCL,qBAAW,WACT,GAAuB,YAAnBkC,EAA8B,CAChC,IAAM+H,EAAmB,GACrBG,EAA8B,EAGf,CAAClS,EAAU,IAEnBjI,SAAQ,SAACoa,EAAUC,EAAQC,GAEpC,IAAIC,EAAO,KACPC,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAON,GAChBI,EAAIG,aAAe,OACnBH,EAAI9E,OAAS,WAEX6E,EAAOC,EAAIvZ,SAIkB,IAAIsR,GAAS,CAACsB,KAAM,MAAOxK,MAAO,OAAQC,OAAQ,MAAOsK,QAAS,IAAQI,MAH5F,IAAI4G,KAAK,CAACL,GAAOA,KAKb1C,WAAa,SAASgD,EAAYC,GAC/Cd,EAAO9S,KAAK2T,KACZV,IAE2BG,EAAM/Z,QAC/B0Z,EAAUD,KAIhBQ,EAAIO,aAGP,CAAC9I,EAAgBhK,IAoBpB,OACA,mBAAKxE,IAAKyW,EAA0B9R,MAAM,uBAjBpC4R,EAAOzZ,OAAS,EAEhByZ,EAAOpN,KAAI,SAACiO,EAAOvP,GAAR,OACT,mBAAKrL,IAAKqL,EAAO0P,IAAI,WAAWjZ,IAAK8Y,GAAgB,GAAIpX,IAAG,QAK9D,8BACE,YAAC,IAAD,CAAiBsK,KAAMkN,IAAWC,MAAI,EAAClN,KAAK,OAC5C,iDAaKmN,GAxWgB,WAAO,IAAD,EAEPC,eAApBtM,EAF2B,EAE3BA,IAF2B,IAEtBzF,aAFsB,MAEd,EAFc,EAI7BgS,EAAgB5X,YAAI,CACxB0M,SAAU,WACV7G,OAAQ,QACRD,MAAO,QAHgB,IAOzB,OACA,mBAAKyF,IAAKA,EAAKrL,IAAK4X,EAAejT,MAAM,YACvC,YAAC,GAAD,CAAU2P,cAAe1O,IACzB,mBAAK5F,IAAG,IACN,YAAC,GAAD,MACA,YAAC,GAAD,CAAcsU,cAAe1O,OC+B7BiS,GAA2B,CAC/B1W,QAAS,OACTgU,UAAW,+BAiBP2C,GAAgE,SAAC,GAA4D,IAA3DvO,EAA0D,EAA1DA,SAAUwO,EAAgD,EAAhDA,WAAYpd,EAAoC,EAApCA,OAAQqd,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,cAEvGxO,EAAWC,cAEXwO,EAAiB,WACjBvd,GACF8O,EAAS9O,MAIb,OACE,mBAAKqF,IAAG,YAAE,CAACD,EAAkB8X,IAArB,IACNlT,MAAOqT,EACP/N,KAAK,SAASC,SAAU,EAAGU,aAAYqN,EACvC9N,QAAU+N,EACV9N,UAAW,SAACC,GAAmE,MAAdA,EAAM7N,KAA6B,UAAd6N,EAAM7N,KAC1F0b,MAGF,YAAC,IAAD,CAAiB5N,KAAMf,EAAUgB,KAAK,OACtC,wBAAOwN,KAQPI,GAAqC,WAEzC,IAAM1O,EAAWC,cACX0O,EAAwBxO,YAAYtB,IAE1C,OACE,mBAAKtI,IAAG,YAAE,CAACD,EAAkB8X,IAArB,IACNlT,MAAM,yEACNsF,KAAK,SAASC,SAAU,EACxBU,aAAY,6FACZT,QAAS,kBAAMV,EAASvD,QACxB,YAAC,IAAD,CAAiBoE,KAAM8N,EAAwBC,IAAUC,IAAgB/N,KAAK,OAC9E,uBAAM6N,EAAwB,SAAW,aAKhCG,GAjHsB,WAEnC,IAAMC,EAAgBxY,YAAI,CACxBM,QAAS,OACTM,cAAe,MACfL,eAAgB,gBAChBE,IAAK,QAJkB,IAOnBgY,EAAazY,YAAI,CACrBM,QAAS,OACTM,cAAe,MACfH,IAAK,QAHe,IAMtB,OACE,mBAAKT,IAAKwY,GACN,mBAAKxY,IAAKyY,GACR,YAAC,GAAD,CAAsBlP,SAAUmP,IAAOX,WAAW,MAAMpd,OAAQmL,GAC9DkS,QAAQ,sDACRC,cAAc,6DAEhB,YAAC,GAAD,MACA,YAAC,GAAD,CAAsB1O,SAAUoP,IAAgBZ,WAAW,aAAapd,OAAQyL,GAC9E4R,QAAQ,qEACRC,cAAc,mFAEhB,YAAC,GAAD,CAAsB1O,SAAUqP,IAAeb,WAAW,cAAcpd,OAAQ2L,GAC9E0R,QAAQ,sEACRC,cAAc,sFAGlB,mBAAKjY,IAAKyY,MCnBZI,GAAqF,SAAC,GAA2B,IAA1BtP,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,UAE/FC,EAAWC,cAEXI,EAAS,WACbL,EAAShP,EAAS+O,IAClBC,EAASvO,EAAc,KAGnB4d,EAAwB9Y,YAAI,CAChC4F,MAAO,QACPC,OAAQ,QACRjF,cAAe,SACfmY,SAAU,UACVtY,IAAK,OACL0U,UAAW,+BANoB,IASjC,OACE,mBAAKnV,IAAG,YAAE,CAACD,EAAkB+Y,GAArB,IACR7O,KAAK,SAASC,SAAU,EACtBC,QAAUL,EACVM,UAAW,SAACC,GAAmE,MAAdA,EAAM7N,KAA6B,UAAd6N,EAAM7N,KAC1FsN,MAEF,YAAC,IAAD,CAAkBQ,KAAMf,EAAUgB,KAAK,OACvC,uBAAMf,KAOGwP,GAtDmB,WAEhC,IAAMC,EAAkBjZ,YAAI,CAC1BM,QAAS,OACTM,cAAe,MACfL,eAAgB,eAChBE,IAAK,QAJoB,IAO3B,OACE,mBAAKT,IAAKiZ,EAAiBtU,MAAM,eAC7B,YAAC,GAAD,CAAkB4E,SAAU2P,IAAQ1P,UAAU,iBAC9C,YAAC,GAAD,CAAkBD,SAAU4P,IAAc3P,UAAU,qBACpD,YAAC,GAAD,CAAkBD,SAAU6P,IAAe5P,UAAU,sBCzBvDtP,GAAiC,CACrCyD,OAAQ,OACRG,WAAOgB,GAGIua,GAAuBtU,YAAiB,6BAAD,uCAA+B,WAAOC,GAAP,eAAAnJ,EAAA,sEAC1DuF,EAAOkB,KAAP,UAAe0C,EAAS1J,MAAxB,mBAAwC0J,EAAS/K,eAAjD,cACrB,CAAEyC,SAAU4c,GAAgBtU,EAAStI,UAAWyH,OAAQa,EAASb,SAFc,cAC3E3G,EAD2E,yBAI1EA,GAJ0E,2CAA/B,uDAW9C+b,GAAoBjf,YAAY,CACpCC,KAAM,oBACNL,gBACAM,SAAU,GAEV+L,cAAe,SAAAC,GACbA,EAAQC,QACN4S,GAAqB3S,SAAS,SAAChM,EAAOC,GACpCD,EAAMiD,OAAS,aAEnB6I,EAAQC,QACN4S,GAAqB1S,WAAW,SAACjM,EAAOC,GACtCD,EAAMiD,OAAS,aAEnB6I,EAAQC,QACN4S,GAAqBhS,UAAU,SAAC3M,EAAOC,GACrCD,EAAMiD,OAAS,SACfjD,EAAMoD,MAAQnD,EAAOmD,MAAMuE,cActBiX,GAAkB,SAAC5c,GAC9B,IAAI8K,EAA4B,GAWhC,OATA9K,EAASH,SAAQ,SAAAM,GACf2K,EAAY/D,KAAK,CACfO,MAAOnH,EAAQmH,MACfC,IAAKpH,EAAQoH,IACbC,QAASrH,EAAQqH,QACjBsV,UAAU,OAIPhS,GAGIiS,GAAe,SAAC/e,GAAD,OAC1BA,EAAMgf,kBAAkB/b,QACbgc,GAAc,SAACjf,GAAD,OACzBA,EAAMkf,4BAA4B9b,OAErByb,MAAf,QCjDA,I,2HAqCMM,GAA2B,WAG/B,IAAMpQ,EAAWC,cAEXhN,EAAWkN,YAAYxB,IACvBjE,EAASyF,YAAYd,IACrBgR,EAAiBlQ,YAAY6P,IAG/BnP,EAAO4O,IACPzB,GAAO,EACPO,EAAU,cACS,YAAnB8B,GACFxP,EAAOkN,IACPC,GAAO,EACPO,EAAU,sBACkB,YAAnB8B,GACTxP,EAAOyP,IACPtC,GAAO,EACPO,EAAU,sBACkB,WAAnB8B,IACTxP,EAAO0P,IACPvC,GAAO,EACPO,EAAU,eAGZ,IAMMiC,EAAO,WACXxQ,EAAS4P,GAAqB,CAC5B3c,SAAUA,EACVyH,OAAQA,EACRlK,eAAgBA,EAChBqB,MAAOA,MAIL4e,EAAe,GAOrB,OACE,mBAAKla,IAAG,YAAE,CAACD,EAAkBma,GAArB,IAAuCvV,MAAOqT,EACpD/N,KAAK,SAASC,SAAU,EACxBC,QAAU8P,EACV7P,UAAW,SAACC,GAAmE,MAAdA,EAAM7N,KAA6B,UAAd6N,EAAM7N,KAC1Fyd,MAEF,YAAC,IAAD,CAAiB3P,KAAMA,EAAMmN,KAAMA,EAAMlN,KAAK,OAC9C,wBAAO,qBACP,mBAAKvK,IAAKa,EAAUsZ,YAAU,SAASC,cAAY,QA/BhC,WACrB,GAAsB,YAAnBN,EACD,MAAO,qBA6BoDO,MAMlDC,GArGa,WAE1B,IAAMlf,EAAcwO,YAAYzO,GAE1Bof,EAAqB3Q,YAAY6P,IACjCe,EAAY5Q,YAAY+P,IAExBc,EAAYza,YAAI,CACpB6F,OAAQ,OACRvF,QAAyB,iBAAhBlF,EAAiC,OAAS,OACnDwF,cAAe,SACfJ,WAAY,SACZC,IAAK,QALc,IAQrB,OACE,mBAAKT,IAAKya,EAAW9V,MAAM,aACzB,yFACgE,uBADhE,4DAE2D,uBAF3D,kCAKA,mBAAK3E,IAAKW,GACR,YAAC,GAAD,CAAY1F,WAAY,EAAGyf,MAAM,mBAAmBnR,SAAUoR,MAC9D,YAAC,GAAD,OAEF,mBAAK3a,IAAKc,EAAcyZ,GAAqB5V,MAAM,YAAYsF,KAAK,SAClE,kFAAmE,uBAClEuQ,EAAY,YAAcA,EAAY,kCAAkC,0BCrCpEI,GAAatgB,YAAY,CACpCC,KAAM,aACNL,aAT0B,CAC1BC,OAAO,GASPK,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChBD,EAAMP,MAAQQ,EAAOC,YAKZH,GAAcmgB,GAAW/f,QAAzBJ,SAGFogB,GAAmB,SAACngB,GAAD,OAAuDA,EAAMogB,WAAW3gB,OAEzFygB,MAAf,QCRA,I,2HA4BMG,GAA+B,WAGnC,IAAMtR,EAAWC,cAEXsR,EAAQ,WACZvR,EAASwR,IAAc,KAGnBf,EAAe,GAOrB,OACE,mBAAKla,IAAG,YAAE,CAACD,EAAkBma,GAArB,IAAuCvV,MAAO,yBACpDsF,KAAK,SAASC,SAAU,EACxBC,QAAU6Q,EACV5Q,UAAW,SAACC,GAAmE,MAAdA,EAAM7N,KAA6B,UAAd6N,EAAM7N,KAC1Fwe,MAEF,YAAC,IAAD,CAAkB1Q,KAAM8O,IAAe7O,KAAK,OAC5C,wBAAO,0BAKE2Q,GAzDgB,WAE7B,IAAM9f,EAAcwO,YAAYzO,GAE1BggB,EAAcnb,YAAI,CACtBM,QAAyB,oBAAhBlF,EAAoC,OAAS,OACtDwF,cAAe,SACfJ,WAAY,SACZC,IAAK,QAJgB,IAOvB,OACE,mBAAKT,IAAKmb,EAAaxW,MAAM,cAC3B,wFAC+D,uBAD/D,mCAIA,mBAAK3E,IAAKW,GACR,YAAC,GAAD,CAAY1F,WAAY,EAAGyf,MAAM,mBAAmBnR,SAAUoR,MAC9D,YAAC,GAAD,SCjCFzgB,GAAiC,CACrCyD,OAAQ,OACRG,WAAOgB,GAGIsc,GAAmCrW,YAAiB,yCAAD,uCAA2C,WAAOC,GAAP,eAAAnJ,EAAA,sEAClFuF,EAAOkB,KAAP,UAAe0C,EAAS1J,MAAxB,mBAAwC0J,EAAS/K,eAAjD,cACrB,CAAEyC,SAAU4c,GAAgBtU,EAAStI,UAAWyH,OAAQa,EAASb,OAAQU,UAAWG,EAASqW,WAFU,cACnG7d,EADmG,yBAIlGA,GAJkG,2CAA3C,uDAW1D8d,GAA8BhhB,YAAY,CAC9CC,KAAM,8BACNL,gBACAM,SAAU,GAEV+L,cAAe,SAAAC,GACbA,EAAQC,QACN2U,GAAiC1U,SAAS,SAAChM,EAAOC,GAChDD,EAAMiD,OAAS,aAEnB6I,EAAQC,QACN2U,GAAiCzU,WAAW,SAACjM,EAAOC,GAClDD,EAAMiD,OAAS,aAEnB6I,EAAQC,QACN2U,GAAiC/T,UAAU,SAAC3M,EAAOC,GACjDD,EAAMiD,OAAS,SACfjD,EAAMoD,MAAQnD,EAAOmD,MAAMuE,cAKtBoX,GAAe,SAAC/e,GAAD,OAC1BA,EAAMkf,4BAA4Bjc,QACvBgc,GAAc,SAACjf,GAAD,OACzBA,EAAMkf,4BAA4B9b,OAGrBwd,MAAf,QC/BA,I,kFAoCaC,GAAiD,SAAC,GAAY,IAAXpd,EAAU,EAAVA,KAGxDsL,EAAWC,cAEX7E,EAAY+E,YAAYb,IACxB1E,EAAwBuF,YAAYrB,IACpC7L,EAAWkN,YAAYxB,IACvBjE,EAASyF,YAAYd,IACrBgR,EAAiBlQ,YAAY6P,IAE7B+B,EAAiB,WACrB/R,EAAS2R,GAAiC,CACxC1e,SAAUA,EACVyH,OAAQA,EACRlK,eAAgBA,EAChBqB,MAAOA,EACP+f,SAAU,CAAC,CAACvX,GAAIe,EAAUR,GAAuBP,SAKjDwG,EAAO6O,IACP1B,GAAO,EACY,YAAnBqC,GACFxP,EAAOkN,IACPC,GAAO,GACqB,YAAnBqC,GACTxP,EAAOyP,IACPtC,GAAO,GACqB,WAAnBqC,IACTxP,EAAO0P,IACPvC,GAAO,GAGT,IAAMyC,EAAe,GAKrB,OACE,mBAAKla,IAAG,YAAE,CAACD,EAAkBma,GAArB,IAAuCvV,MAAO,0BACpDsF,KAAK,SAASC,SAAU,EACxBC,QAAUqR,EACVpR,UAAW,SAACC,GAAmE,MAAdA,EAAM7N,KAA6B,UAAd6N,EAAM7N,KAC1Fgf,MAEF,YAAC,IAAD,CAAkBlR,KAAMA,EAAMmN,KAAMA,EAAMlN,KAAK,OAC/C,wBAAOpM,KAKEsd,GAzF8B,WAE3C,IAAMC,EAA+B9R,YAAY6P,IAC3CkC,EAAsB/R,YAAY+P,IAElCiC,EAA6B5b,YAAI,CACrCM,QAAS,OACTM,cAAe,SACfJ,WAAY,SACZW,QAAS,OACTV,IAAK,QAL+B,IAQtC,OACE,mBAAKT,IAAK4b,EAA4BjX,MAAM,+BAC1C,gDACA,YAAC,IAAD,CAAiB2F,KAAMuR,IAAStR,KAAK,QAFvC,cAIE,6DACA,mBAAKvK,IAAKW,GACR,YAAC,GAAD,CAAY1F,WAAY,EAAGyf,MAAM,mBAAmBnR,SAAUoR,MAC9D,YAAC,GAAD,CAAsBxc,KAAK,2BAE7B,mBAAK6B,IAAKc,EAAc4a,GAA+B/W,MAAM,YAAYsF,KAAK,SAC5E,kFAAmE,uBAClE0R,EAAsB,YAAcA,EAAsB,kCAAkC,0BCqD/FG,GAAuE,SAAC,GAAgC,IAA/BtS,EAA8B,EAA9BA,UAAWuS,EAAmB,EAAnBA,cAElFtS,EAAWC,cACXrF,EAAwBuF,YAAYrB,IAEpCyT,EAAsB,WAC1BvS,EAAStD,GAAyB4V,KAG9BE,EAAsBjc,YAAI,CAC9BgK,gBAAiB+R,IAAkB1X,EAAwB,OAAS,OACpElD,QAAS,QAFoB,IAK/B,OACE,mBAAKnB,IAAG,YAAE,CAACD,EAAiBkc,GAApB,IAA0CtX,MAAO,gCACvDsF,KAAK,SAASC,SAAU,EACxBU,aAAY,iCAAmCpB,EAC/CW,QAAU6R,EACV5R,UAAW,SAACC,GAAmE,MAAdA,EAAM7N,KAA6B,UAAd6N,EAAM7N,KAC1Fwf,MAEF,wBAAOxS,KAKE0S,GA3G0B,WAGvC,IAAMrX,EAAY+E,YAAYb,IACxB3N,EAAcwO,YAAYzO,GAC1BF,EAAa2O,YAAYvO,GACzBgJ,EAAwBuF,YAAYrB,IAEpCmT,EAA+B9R,YAAY6P,IAC3CkC,EAAsB/R,YAAY+P,IA8BlCwC,EAAyBnc,YAAI,CACjCM,QAA0B,qBAAhBlF,GAAqD,IAAfH,EAAoB,OAAS,OAC7E2F,cAAe,SACfL,eAAgB,SAChBC,WAAY,SACZC,IAAK,QAL2B,IAQ5B2b,EAAkCpc,YAAI,CAC1CM,QAAS,OACTM,cAAe,SACfJ,WAAY,OACZC,IAAK,OACL4b,SAAU,OACVC,UAAW,QAN8B,IAS3C,OACE,mBAAKtc,IAAKmc,GACR,2CACA,mBAAKnc,IAAKoc,EAAiCzX,MAAM,2BA9C/CE,EAAU/H,OAAS,EAEnB+H,EAAUsE,KAAK,SAACkS,EAAexT,GAAhB,OACb,YAAC,GAAD,CAAgBrL,IAAKqL,EAAO2B,UAAW6R,EAAS9gB,KAAMwhB,cAAelU,OAKvE,8FAyCF,uBAlCEhD,EAAU/H,OAASuH,GAAyBQ,EAAUR,GAAuBkY,YAE7E1X,EAAUR,GAAuBkY,YAIjC,0EA6BF,mBAAKvc,IAAKW,GACR,YAAC,GAAD,CAAY1F,WAAY,EAAGyf,MAAM,eAAenR,SAAUoR,MAE1D,YAAC,GAAD,CAAsBxc,KAAK,oCAE7B,mBAAK6B,IAAKc,EAAc4a,GAA+B/W,MAAM,YAAYsF,KAAK,SAC5E,kFAAmE,uBAClE0R,EAAsB,YAAcA,EAAsB,kCAAkC,0BCjErG,I,2HAoCaa,GAAuF,SAAC,GAAmC,IAAlCvhB,EAAiC,EAAjCA,WAAYyf,EAAqB,EAArBA,MAAOnR,EAAc,EAAdA,SAGjHE,EAAWC,cAEX+S,EAAe,WACnBhT,EAASvO,EAAcD,KAGnByhB,EAAe,GAOrB,OACE,mBAAK1c,IAAG,YAAE,CAACD,EAAkB2c,GAArB,IACNzS,KAAK,SAASC,SAAU,EACxBC,QAAUsS,EACVrS,UAAW,SAACC,GAAmE,MAAdA,EAAM7N,KAA6B,UAAd6N,EAAM7N,KAC1FigB,MAEF,YAAC,IAAD,CAAiBnS,KAAMf,EAAUgB,KAAK,OACtC,wBAAOmQ,KAMEiC,GAlEe,WAE5B,IAAM1hB,EAAa2O,YAAYvO,GAEzBuhB,EAAgB5c,YAAI,CACxBM,QAAwB,IAAfrF,EAAmB,OAAQ,SADb,IAInB4hB,EAAe7c,YAAI,CACvBM,QAAwB,IAAfrF,EAAmB,OAAQ,SADd,IAIlB6hB,EAAe9c,YAAI,CACvBM,QAAwB,IAAfrF,EAAmB,OAAQ,SADd,IAIxB,OACE,mBAAM0J,MAAM,UACV,mBAAK3E,IAAK4c,GACR,YAAC,GAAD,OAEF,mBAAK5c,IAAK6c,GACR,YAAC,GAAD,MACA,YAAC,GAAD,MACA,YAAC,GAAD,OAEF,mBAAK7c,IAAK8c,GACR,YAAC,GAAD,S,4CCqBOC,GAjDmB,WAEhC,IAAMhiB,EAAgB6O,YAAY9O,GAE5B0d,EAAexY,YAAI,CACvBM,QAASvF,IAAkBf,EAAmBI,QAAU,OAAQ,OAChEwG,cAAe,SACfL,eAAgB,eAChBE,IAAK,OACLuc,aAAc,OACdC,YAAa,QANS,IASlBC,EAAcld,YAAI,CACtBM,QAASvF,IAAkBf,EAAmB8P,OAAS,OAAS,OAChElJ,cAAe,SACfL,eAAgB,eAChBE,IAAK,OACLuc,aAAc,OACdnX,OAAQ,QANa,IASjBsX,EAAend,YAAI,CACvBM,QAAUvF,IAAkBf,EAAmBI,SAAWW,IAAkBf,EAAmB8P,OACnF,OAAS,OACrBlJ,cAAe,SACfJ,WAAY,SACZW,QAAS,OACTV,IAAK,QANiB,IASxB,OACG,oBAAMkE,MAAM,kBAAkB3E,IAAG,GAAmBiK,KAAK,QACxD,mBAAKjK,IAAKwY,EAAc7T,MAAM,qBAC1B,YAAC,GAAD,MACA,YAAC,GAAD,MACA,YAAC,GAAD,OAEJ,mBAAK3E,IAAKkd,EAAavY,MAAM,oBAC3B,YAAC,GAAD,OAEF,mBAAK3E,IAAKmd,GACR,YAAC,IAAD,CAAiB7S,KAAMuR,IAAStR,KAAK,QADvC,iB,2JCKS6S,GAhDe,WAG5B,IAAMtC,EAAalR,YAAYiR,IACzBwC,EAAsBzT,YAAY6P,IAClC/U,EAAWkF,YAAYlB,IAwBvB4U,EAAW,GAWjB,OACE,mBAAKtd,IAAKsd,EAAa3Y,MAAM,iBAC3B,YAAC,IAAD,CAAiB2F,KAlCfwQ,EACK1B,IAC0B,YAAxBiE,EACFE,IAEAC,IA6BwBjT,KAAK,QACpC,wBAzBEuQ,EACK,0GAC0B,YAAxBuC,EACH,iGAAN,OACU,IAAIla,KAAiB,EAAXuB,GAAetB,cAAcC,OAAO,GAAI,GAD5D,wDAIO,yDCCEoa,GAnCY,WAEzB,IAAM3C,EAAalR,YAAYiR,IACzBwC,EAAsBzT,YAAY8T,IAmBlCC,EAAY,CAChBrd,QAAS,OACTM,cAAe,MACfiF,OAAQ,QAGV,OACE,YAAC,IAAM+X,SAAP,KArBG9C,GAAsC,YAAxBuC,EAEb,YAAC,GAAD,MAIA,mBAAKrd,IAAK2d,EAAWhZ,MAAM,QACzB,YAAC,GAAD,MACA,YAAC,GAAD,SCbKkZ,InBNO5a,GmBMP4a,GATf,WACE,OACE,mBAAKC,UAAU,OACb,YAAC,EAAD,MACA,YAAC,GAAD,QCMSC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBliB,MAAK,YAAkD,IAA/CmiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDCO,eAAe,CAC5BC,QAAS,CACPzjB,cAAe0jB,EACfrjB,YAAasjB,EACb3W,WAAY4W,GACZjF,kBAAmBkF,GACnBhF,4BAA6BiF,GAC7B/D,WAAYgE,MCAVC,GAAa5c,QAAQ6c,KAAK,CAC9BpjB,KtBToBqH,GsBUd,ItBV6B,IAAId,SAAQ,SAACuP,EAAStP,GAAV,OAAqB6c,WAAWvN,EAASzO,UsBiB1F8b,GAAWhjB,MAET,WACEmjB,IAASC,OACP,YAAC,IAAMC,WAAP,KACI,YAAC,IAAD,CAAUC,MAAOA,IACf,YAAC,GAAD,QAGNjQ,SAASkQ,eAAe,YAK5B,SAAAvgB,GAAC,OAlBauC,EAkBF,8DACyBvC,EAAEsD,SACrC,uBAFU,uFAjBZ6c,IAASC,OAAO7d,EAAM8N,SAASkQ,eAAe,SADjC,IAAChe,KA4BhByc,O","file":"static/js/main.235cd6b5.chunk.js","sourcesContent":["export interface Segment {\n  id: string,\n  start: number,\n  end: number,\n  deleted: boolean,\n}\n\nexport interface Track {\n  id: string,\n  uri: string,\n  flavor: any,\n  audioStream: any,\n  videoStream: any,\n}\n\nexport interface Workflow {\n  id: string,\n  name: string,\n  description: string,\n  displayOrder: number,\n}\n\nexport interface TimelineState {\n  segments: Segment[]\n  scrubberPos: number\n}\n\nexport interface RequestArgument {\n  mediaPackageId: string\n  ocUrl: string\n}\n\nexport interface PostEditArgument extends RequestArgument {\n  segments: Segment[]\n  tracks: Track[]\n}\n\nexport interface PostAndProcessEditArgument extends PostEditArgument{\n  workflow: [{id: string}]\n}\n\nexport enum MainMenuStateNames {\n  cutting = \"Cutting\",\n  metadata = \"Metadata\",\n  thumbnail = \"Thumbnail\",\n  finish = \"Finish\",\n}\n\nexport interface httpRequestState {\n  status: 'idle' | 'loading' | 'success' | 'failed',\n  error: string | undefined\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { MainMenuStateNames} from '../types'\n\nexport interface mainMenu {\n  value: MainMenuStateNames,\n}\n\nconst initialState: mainMenu = {\n  value: MainMenuStateNames.cutting,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const mainMenuSlice = createSlice({\n  name: 'mainMenuState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<mainMenu[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = mainMenuSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectMainMenuState = (state: { mainMenuState: { value: mainMenu[\"value\"]; }; }) => state.mainMenuState.value\n\nexport default mainMenuSlice.reducer\n","/**\n * Loads config values from\n * - a settings file\n * - GET parameters\n * and exports them.\n * Code was largely adapted from https://github.com/elan-ev/opencast-studio/blob/master/src/settings.js (January 11th, 2021)\n */\nimport parseToml from '@iarna/toml/parse-string';\n\n/**\n * Parsed settings are exported through these variables\n */\nexport var mediaPackageId : string\nexport var ocUrl: string = window.location.origin\nexport var showMetadata: boolean = true\nexport var showThumbnail: boolean = true\n\n/**\n * Local constants\n */\nconst CONTEXT_SETTINGS_FILE = 'editor-settings.toml';\n\n// Sources that values can come from.\nconst SRC_SERVER = 'src-server';\nconst SRC_URL = 'src-url';\n\n/**\n * Entry point. Loads values from settings into the exported variables\n * Priorities are:\n * 1. GET Parameters\n * 2. Settings file\n * 3. Default values\n */\nexport const init = async () => {\n  // Get settings from config file\n  await loadContextSettings().then((result) => {\n\n    result = validate(result, false, SRC_SERVER, \"from server settings file\")\n\n    assignResults(result)\n  })\n\n  // Get settings from URL query.\n  var urlParams = new URLSearchParams(window.location.search);\n\n  let rawUrlSettings = {};\n  urlParams.forEach(function(value, key) {\n    // Create empty objects for full path (if the key contains '.') and set\n    // the value at the end.\n    let obj : {[k: string]: any} = rawUrlSettings;\n    const segments = key.split('.');\n    segments.slice(0, -1).forEach((segment) => {\n      if (!(segment in obj)) {\n        obj[segment] = {};\n      }\n      obj = obj[segment];\n    });\n    obj[segments[segments.length - 1]] = value;\n  });\n\n  const result = validate(rawUrlSettings, true, SRC_URL, 'given as URL GET parameter');\n\n  assignResults(result)\n\n};\n\n/**\n * Assigns parsed and validated results to their respective variables\n * @param result\n */\nconst assignResults = (result: Record<string, any> | null) => {\n  for (const key in result) {\n    if (result[\"mediaPackageId\"] != null) {\n        mediaPackageId = result[\"mediaPackageId\"]\n    }\n    if (key === \"debugging\" && (result[key][\"ocUrl\"] != null)) {\n      ocUrl = result[key][\"ocUrl\"]\n    }\n    if (key === \"metadata\" && (result[key][\"show\"] != null)) {\n      showMetadata = result[key][\"show\"]\n    }\n    if (key === \"thumbnail\" && (result[key][\"show\"] != null)) {\n      showThumbnail = result[key][\"show\"]\n    }\n  }\n}\n\n/**\n * Attempts to load toml settings file\n */\nconst loadContextSettings = async () => {\n\n  // Try to retrieve the context settings.\n  let basepath = process.env.PUBLIC_URL || '/';\n  if (!basepath.endsWith('/')) {\n    basepath += '/';\n  }\n\n  // Construct path to settings file. If the `REACT_APP_SETTINGS_PATH` is\n  // given and starts with '/', it is interpreted as absolute path from the\n  // server root.\n  const settingsPath = process.env.REACT_APP_SETTINGS_PATH || CONTEXT_SETTINGS_FILE;\n  const base = settingsPath.startsWith('/') ? '' : basepath;\n  const url = `${window.location.origin}${base}${settingsPath}`;\n  let response;\n  try {\n    response = await fetch(url);\n  } catch (e) {\n    console.warn(`Could not access '${settingsPath}' due to network error!`, e || \"\");\n    return null;\n  }\n\n  if (response.status === 404) {\n    // If the settings file was not found, we silently ignore the error. We\n    // expect many installation to provide this file.\n    console.debug(`'${settingsPath}' returned 404: ignoring`);\n    return null;\n  } else if (!response.ok) {\n    console.error(\n      `Fetching '${settingsPath}' failed: ${response.status} ${response.statusText}`\n    );\n    return null;\n  }\n\n  if (response.headers.get('Content-Type')?.startsWith('text/html')) {\n    console.warn(`'${settingsPath}' request has 'Content-Type: text/html' -> ignoring...`);\n    return null;\n  }\n\n  try {\n    return parseToml(await response.text());\n  } catch (e) {\n    console.error(`Could not parse '${settingsPath}' as TOML: `, e);\n    throw new SyntaxError(`Could not parse '${settingsPath}' as TOML: ${e}`);\n  }\n\n};\n\n/**\n * Validate the given `obj` with the global settings `SCHEMA`. If `allowParse`\n * is true, string values are attempted to parse into the expected type. `src`\n * must be one of `SRC_SERVER`, `SRC_URL` or `SRC_LOCAL_STORAGE`.\n * `srcDescription` is just a string for error messages specifying where `obj`\n * comes from.\n * */\nconst validate = (obj: Record<string, any> | null, allowParse: boolean, src: string, sourceDescription: string) => {\n  // Validates `obj` with `schema`. `path` is the current path used for error\n  // messages.\n  const validate = (schema: any, obj: Record<string, any> | null, path: string) => {\n    if (typeof schema === 'function') {\n      return validateValue(schema, obj, path);\n    } else {\n      return validateObj(schema, obj, path);\n    }\n  };\n\n  // Validate a settings value with a validation function. Returns the final\n  // value of the setting or `null` if it should be ignored.\n  const validateValue = (validation: (arg0: any, arg1: boolean, arg2: string) => any, value: Record<string, any> | null, path: string) => {\n    try {\n      const newValue = validation(value, allowParse, src);\n      return newValue === undefined ? value : newValue;\n    } catch (e) {\n      console.warn(\n        `Validation of setting '${path}' (${sourceDescription}) with value '${value}' failed: `\n          + `${e}. Ignoring.`\n      );\n      return null;\n    }\n  };\n\n  // Validate a settings object/namespace. `schema` and `obj` need to be\n  // objects.\n  const validateObj = (schema: any, obj: Record<string, any> | null, path: string) => {\n    // We iterate through all keys of the given settings object, checking if\n    // each key is valid and recursively validating the value of that key.\n    let out : {[k: string]: any} = {};\n    for (const key in obj) {\n      const newPath = path ? `${path}.${key}` : key;\n      if (key in schema) {\n        const value = validate(schema[key], obj[key], newPath);\n\n        // If `null` is returned, the validation failed and we ignore this\n        // value.\n        if (value !== null) {\n          out[key] = value;\n        }\n      } else {\n        console.warn(\n          `'${newPath}' (${sourceDescription}) is not a valid settings key. Ignoring.`\n        );\n      }\n    }\n\n    return out;\n  };\n\n  return validate(SCHEMA, obj, \"\");\n}\n\n\n// Validation functions for different types.\nconst types = {\n  'string': (v: any, allowParse: any) => {\n    if (typeof v !== 'string') {\n      throw new Error(\"is not a string, but should be\");\n    }\n  },\n  'boolean': (v: string, allowParse: any) => {\n    if (typeof v === 'boolean') {\n      return;\n    }\n\n    if (allowParse) {\n      if (v === 'true') {\n        return true;\n      }\n      if (v === 'false') {\n        return false;\n      }\n      throw new Error(\"can't be parsed as boolean\");\n    } else {\n      throw new Error(\"is not a boolean\");\n    }\n  },\n};\n\n// Defines all potential settings and their types.\n//\n// Each setting value has to be a validation function. Such a function takes two\n// arguments: the input value `v` and the boolean `allowParse` which specifies\n// whether the input might be parsed into the correct type (this is only `true`\n// for GET parameters). The validation should throw an error if the input value\n// is not valid for the setting. If the function returns `undefined`, the input\n// value is valid and used. If the validator returns a different value, the\n// input is valid, but is replaced by that new value. See the `types` object\n// above for some examples.\nconst SCHEMA = {\n  mediaPackageId: types.string,\n  debugging: {\n    ocUrl: types.string,\n  },\n  metadata: {\n    show : types.boolean,\n  },\n  thumbnail: {\n    show : types.boolean,\n  }\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface finish {\n  value: \"Save changes\" | \"Start processing\" | \"Discard changes\" | undefined,\n  pageNumber: number,\n}\n\nconst initialState: finish = {\n  value: \"Start processing\",\n  pageNumber: 0,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const finishSlice = createSlice({\n  name: 'finishState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<finish[\"value\"]>) => {\n      state.value = action.payload;\n    },\n    setPageNumber: (state, action) => {\n      state.pageNumber = action.payload;\n    }\n  }\n})\n\n// Export Actions\nexport const { setState, setPageNumber } = finishSlice.actions\n\n// Export Selectors\nexport const selectFinishState = (state: { finishState: { value: finish[\"value\"]; }; }) => state.finishState.value\nexport const selectPageNumber = (state: { finishState: { pageNumber: finish[\"pageNumber\"]; }; }) => state.finishState.pageNumber\n\nexport default finishSlice.reducer\n","/**\n * This file contains general css stylings\n */\nimport { css, Global } from '@emotion/core'\nimport React from \"react\";\nimport { httpRequestState }  from './types'\n\n/**\n * An emotion component that inserts styles globally\n * Is removed when the styles change or when the Global component unmounts.\n */\nexport const GlobalStyle: React.FC = () => {\n  return (\n    <Global styles={globalStyle} />\n  );\n}\n\n/**\n * CSS for the global style component\n */\nexport const globalStyle = css({\n  body: {\n    backgroundColor: 'snow',\n    fontSize: 'medium',\n    // Makes the body span to the bottom of the page\n    minHeight: \"100vh\",\n  },\n});\n\n/**\n * CSS for buttons\n */\nexport const basicButtonStyle = css({\n  borderRadius: '10px',\n  cursor: \"pointer\",\n  // Animation\n  transitionDuration: \"0.3s\",\n  transitionProperty: \"transform\",\n  \"&:hover\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:focus\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:active\": {\n    transform: 'scale(0.9)',\n  },\n  // Flex position child elements\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  gap: '10px',\n  textAlign: 'center' as const,\n});\n\n/**\n * CSS for a container that holds back/forward buttons\n */\nexport const backOrContinueStyle = css(({\n  display: 'flex',\n  flexDirection: 'row' as const,\n  gap: '20px',\n}))\n\n/**\n * CSS for ariaLive regions that should not be visible\n */\nexport const ariaLive = css({\n  position: 'absolute',\n  left: '-99999px',\n  height: '1px',\n  width: '1px',\n  overflow: 'hidden',\n})\n\n/**\n * CSS for displaying of errors\n */\nexport const errorBoxStyle = (errorStatus: httpRequestState[\"status\"]) => {\n  return (\n    css({\n      ...(errorStatus !== 'failed') && {display: \"none\"},\n      borderColor: 'red',\n      borderStyle: 'dashed',\n      fontWeight: 'bold',\n      padding: '10px',\n    })\n  );\n}\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\n/**\n * Client I stole this form a react tutorial\n */\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const encoded = btoa(unescape(encodeURIComponent(\n    \"admin:opencast\"\n  )));\n  const authHeaders = { 'Authorization': `Basic ${encoded}` };\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n      ...authHeaders,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  let text\n  try {\n    const response = await window.fetch(endpoint, config)\n    text = await response.text()\n    text.length ? data = JSON.parse(text) : data = ''\n    // data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","export const roundToDecimalPlace = (num: number, decimalPlace: number) => {\n  let decimalFactor = Math.pow(10, decimalPlace)\n  return Math.round((num + Number.EPSILON) * decimalFactor) / decimalFactor\n}\n\n\n// Returns a promise that resolves after `ms` milliseconds.\nexport const sleep = (ms: number) => new Promise((resolve, reject) => setTimeout(resolve, ms));\n\n\n// Get an understandable time string for ARIA\nexport const convertMsToReadableString = (ms: number): string => {\n  let hours = new Date((ms ? ms : 0)).toISOString().substr(11, 2)\n  let minutes = new Date((ms ? ms : 0)).toISOString().substr(14, 2)\n  let seconds = new Date((ms ? ms : 0)).toISOString().substr(17, 2)\n\n  let result = []\n  if (parseInt(hours) > 0) { result.push(hours + \" hours, \")}\n  if (parseInt(minutes) > 0 || parseInt(hours) > 0) { result.push(minutes + \" minutes, \")}\n  result.push(seconds + \" seconds\")\n\n  return result.join(\"\")\n}","import { createSlice, nanoid, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\nimport { Segment, httpRequestState, Track, RequestArgument, Workflow }  from '../types'\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\nimport { WritableDraft } from 'immer/dist/internal';\n\nexport interface video {\n  isPlaying: boolean,             // Are videos currently playing?\n  isPlayPreview: boolean,         // Should deleted segments be skipped?\n  previewTriggered: boolean,      // Basically acts as a callback for the video players. TODO: Figure out how to do callbacks\n  currentlyAt: number,            // Position in the video in milliseconds\n  segments: Segment[],\n  tracks: Track[],\n  activeSegmentIndex: number,     // Index of the segment that is currenlty hovered\n  selectedWorkflowIndex: number,  // Index of the currently selected workflow\n  aspectRatios: {width: number, height: number}[],  // Aspect ratios of every video\n\n  videoURLs: string[],  // Links to each video\n  videoCount: number,   // Total number of videos\n  duration: number,     // Video duration in milliseconds\n  title: string,\n  presenters: string[],\n  workflows: Workflow[],\n}\n\nconst initialState: video & httpRequestState = {\n  isPlaying: false,\n  isPlayPreview: true,\n  currentlyAt: 0,   // Position in the video in milliseconds\n  segments: [{id: nanoid(), start: 0, end: 1, deleted: false}],\n  tracks: [],\n  activeSegmentIndex: 0,\n  selectedWorkflowIndex: 0,\n  previewTriggered: false,\n  aspectRatios: [],\n\n  videoURLs: [],\n  videoCount: 0,\n  duration: 0,\n  title: '',\n  presenters: [],\n  workflows: [],\n\n  status: 'idle',\n  error: undefined,\n}\n\nexport const fetchVideoInformation = createAsyncThunk('video/fetchVideoInformation', async (argument: RequestArgument) => {\n  // const response = await client.get('https://legacy.opencast.org/admin-ng/tools/ID-dual-stream-demo/editor.json')\n  const response = await client.get(`${argument.ocUrl}/editor/${argument.mediaPackageId}/edit.json`)\n  return response\n})\n\n/**\n * Slice for the state of the \"video\"\n * Treats the multitude of videos that may exist as one video\n */\nexport const videoSlice = createSlice({\n  name: 'videoState',\n  initialState,\n  reducers: {\n    setIsPlaying: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlaying = action.payload;\n    },\n    setIsPlayPreview: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlayPreview = action.payload;\n    },\n    setPreviewTriggered: (state, action) => {\n      state.previewTriggered = action.payload\n    },\n    setCurrentlyAt: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload, 0);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    setCurrentlyAtInSeconds: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload * 1000, 0);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    addSegment: (state, action: PayloadAction<video[\"segments\"][0]>) => {\n      state.segments.push(action.payload)\n    },\n    setAspectRatio: (state, action: PayloadAction<{dataKey: number} & {width: number, height: number}> ) => {\n      state.aspectRatios[action.payload.dataKey] = {width: action.payload.width, height: action.payload.height}\n    },\n    cut: (state) => {\n      // If we're exactly between two segments, we can't split the current segment\n      if (state.segments[state.activeSegmentIndex].start === state.currentlyAt ||\n          state.segments[state.activeSegmentIndex].end === state.currentlyAt ) {\n        return state;\n      }\n\n      // Make two (new) segments out of it\n      let segmentA : Segment =  {id: nanoid(),\n        start: state.segments[state.activeSegmentIndex].start,\n        end: state.currentlyAt,\n        deleted: state.segments[state.activeSegmentIndex].deleted}\n      let segmentB : Segment =  {id: nanoid(),\n        start: state.currentlyAt,\n        end: state.segments[state.activeSegmentIndex].end,\n        deleted: state.segments[state.activeSegmentIndex].deleted}\n\n      // Add the new segments and remove the old one\n      state.segments.splice(state.activeSegmentIndex, 1, segmentA, segmentB);\n    },\n    markAsDeletedOrAlive: (state) => {\n      state.segments[state.activeSegmentIndex].deleted = !state.segments[state.activeSegmentIndex].deleted\n    },\n    setSelectedWorkflowIndex: (state, action: PayloadAction<video[\"selectedWorkflowIndex\"]>) => {\n      state.selectedWorkflowIndex = action.payload\n    },\n    mergeLeft: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex - 1)\n    },\n    mergeRight: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex + 1)\n    },\n  },\n  // For Async Requests\n  extraReducers: builder => {\n    builder.addCase(\n      fetchVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n\n        // // Old API\n        // // eslint-disable-next-line no-sequences\n        // state.videoURLs = action.payload.previews.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        // state.videoCount = action.payload.previews.length\n        // state.duration = action.payload.duration\n        // state.title = action.payload.title\n        // state.presenters = action.payload.presenters\n        // state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        // state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n        //   if (n1.displayOrder > n2.displayOrder) { return 1; }\n        //   if (n1.displayOrder < n2.displayOrder) { return -1; }\n        //   return 0;\n        // });\n\n        // New API\n        // eslint-disable-next-line no-sequences\n        state.videoURLs = action.payload.tracks.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        state.videoCount = state.videoURLs.length\n        state.duration = action.payload.duration\n        state.title = action.payload.title\n        state.presenters = []\n        state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        state.tracks = action.payload.tracks\n        state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n          if (n1.displayOrder > n2.displayOrder) { return 1; }\n          if (n1.displayOrder < n2.displayOrder) { return -1; }\n          return 0;\n        });\n\n        state.aspectRatios = new Array(state.videoCount)\n    })\n    builder.addCase(\n      fetchVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\n/**\n * Helper function to update the activeSegmentIndex\n * @param state\n */\nconst updateActiveSegment = (state: WritableDraft<video>) => {\n  state.activeSegmentIndex = state.segments.findIndex(element =>\n    element.start <= state.currentlyAt && element.end >= state.currentlyAt)\n  // TODO: Proper error handling. Rewrite function?\n  if(state.activeSegmentIndex < 0) {\n    state.activeSegmentIndex = 0\n  }\n}\n\n/**\n * Helper Function for testing with current/old editor API\n */\nconst parseSegments = (segments: any, duration: number) => {\n  let newSegments : Segment[] = []\n\n  if (segments.length === 0) {\n    newSegments.push({id: nanoid(), start: 0, end: duration, deleted: false})\n  }\n\n  segments.forEach((element: { start: any; end: any; deleted: any; }) => {\n    newSegments.push({id: nanoid(), start: element.start, end: element.end, deleted: element.deleted})\n  });\n  return newSegments\n}\n\n/**\n * Helper function for merging two segments\n */\nconst mergeSegments = (state: WritableDraft<video>, activeSegmentIndex: number, mergeSegmentIndex: number) => {\n  // Check if mergeSegmentIndex is valid\n  if (mergeSegmentIndex < 0 || mergeSegmentIndex > state.segments.length - 1) {\n    return\n  }\n\n  // Increase activeSegment length\n  state.segments[activeSegmentIndex].start = Math.min(\n    state.segments[activeSegmentIndex].start, state.segments[mergeSegmentIndex].start)\n  state.segments[activeSegmentIndex].end = Math.max(\n    state.segments[activeSegmentIndex].end, state.segments[mergeSegmentIndex].end)\n\n  // Remove the other segment\n  state.segments.splice(mergeSegmentIndex, 1);\n\n  // Update active segment\n  updateActiveSegment(state)\n}\n\nconst skipDeletedSegments = (state: WritableDraft<video>) => {\n  if(state.isPlaying && state.segments[state.activeSegmentIndex].deleted && state.isPlayPreview) {\n      let endTime = state.segments[state.activeSegmentIndex].end\n      let index = state.activeSegmentIndex\n      while (index < state.segments.length && state.segments[index].deleted) {\n        endTime = state.segments[index].end\n        index++\n      }\n      state.currentlyAt = endTime\n      state.previewTriggered = true\n    }\n}\n\n/**\n * Calculates a total aspect ratio for the video player wrappers,\n * based on the aspect ratio of all videos.\n * Returns the total aspect ratio in percent,\n * or returns a default aspect ratio to limit the height of the video player area\n * TODO: Error checking\n * TODO: Improve calculation to handle multiple rows of videos\n */\nconst calculateTotalAspectRatio = (aspectRatios: video[\"aspectRatios\"]) => {\n  let minHeight = Math.min.apply(Math, aspectRatios.map(function(o) { return o.height; }))\n  let minWidth = Math.min.apply(Math, aspectRatios.map(function(o) { return o.width; }))\n  minWidth *= aspectRatios.length\n  return Math.min((minHeight / minWidth) * 100, (9/32) * 100)\n}\n\nexport const { setIsPlaying, setIsPlayPreview, setCurrentlyAt, setCurrentlyAtInSeconds, addSegment, setAspectRatio, cut,\n  markAsDeletedOrAlive, setSelectedWorkflowIndex, mergeLeft, mergeRight, setPreviewTriggered } = videoSlice.actions\n\n// Export selectors\n// Selectors mainly pertaining to the video state\nexport const selectIsPlaying = (state: { videoState: { isPlaying: video[\"isPlaying\"] }; }) =>\n  state.videoState.isPlaying\nexport const selectIsPlayPreview = (state: { videoState: { isPlayPreview: video[\"isPlayPreview\"] }; }) =>\n  state.videoState.isPlayPreview\nexport const selectPreviewTriggered = (state: { videoState: { previewTriggered: video[\"previewTriggered\"] } }) =>\n  state.videoState.previewTriggered\nexport const selectCurrentlyAt = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt\nexport const selectCurrentlyAtInSeconds = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt / 1000\nexport const selectSegments = (state: { videoState: { segments: video[\"segments\"] } }) =>\n  state.videoState.segments\nexport const selectActiveSegmentIndex = (state: { videoState: { activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  state.videoState.activeSegmentIndex\nexport const selectIsCurrentSegmentAlive = (state: { videoState:\n  { segments: { [x: number]: { deleted: boolean; }; }; activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  !state.videoState.segments[state.videoState.activeSegmentIndex].deleted\nexport const selectSelectedWorkflowIndex = (state: { videoState:\n  { selectedWorkflowIndex: video[\"selectedWorkflowIndex\"]; }; }) =>\n  state.videoState.selectedWorkflowIndex\n\n// Selectors mainly pertaining to the information fetched from Opencast\nexport const selectVideoURL = (state: { videoState: { videoURLs: video[\"videoURLs\"] } }) => state.videoState.videoURLs\nexport const selectVideoCount = (state: { videoState: { videoCount: video[\"videoCount\"] } }) => state.videoState.videoCount\nexport const selectDuration = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration\nexport const selectDurationInSeconds = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration / 1000\nexport const selectTitle = (state: { videoState: { title: video[\"title\"] } }) => state.videoState.title\nexport const selectPresenters = (state: { videoState: { presenters: video[\"presenters\"] } }) => state.videoState.presenters\nexport const selectTracks = (state: { videoState: { tracks: video[\"tracks\"] } }) =>\n  state.videoState.tracks\nexport const selectWorkflows = (state: { videoState: { workflows: video[\"workflows\"] } }) => state.videoState.workflows\nexport const selectAspectRatio = (state: { videoState: { aspectRatios: video[\"aspectRatios\"] } }) =>\n  calculateTotalAspectRatio(state.videoState.aspectRatios)\n\nexport default videoSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm, faListUl, faPhotoVideo, faSignOutAlt, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setState, selectMainMenuState, mainMenu } from '../redux/mainMenuSlice'\nimport { setPageNumber } from '../redux/finishSlice'\n\nimport { MainMenuStateNames } from '../types'\nimport { showMetadata, showThumbnail } from '../config'\nimport { basicButtonStyle } from '../cssStyles'\nimport { setIsPlaying } from \"../redux/videoSlice\";\n\n/**\n * A container for selecting the functionality shown in the main part of the app\n */\nconst MainMenu: React.FC<{}> = () => {\n\n  const mainMenuStyle = css({\n    borderRight: '1px solid #BBB',\n    width: '100px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    flexShrink: 0,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  });\n\n  return (\n    <nav css={mainMenuStyle} title=\"Main Menu\" role=\"navigation\" aria-label=\"Main Navigation\">\n      <MainMenuButton iconName={faFilm} stateName={MainMenuStateNames.cutting}/>\n      {showMetadata && <MainMenuButton iconName={faListUl} stateName={MainMenuStateNames.metadata}/>}\n      {showThumbnail && <MainMenuButton iconName={faPhotoVideo} stateName={MainMenuStateNames.thumbnail}/>}\n      <MainMenuButton iconName={faSignOutAlt} stateName={MainMenuStateNames.finish}/>\n    </nav>\n  );\n};\n\n/**\n * A button to set the state of the app\n * @param param0\n */\nconst MainMenuButton: React.FC<{iconName: IconDefinition, stateName: mainMenu[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectMainMenuState)\n\n  const onMenuItemClicked = () => {\n    dispatch(setState(stateName));\n    // Reset multi-page content to their first page\n    if (stateName === MainMenuStateNames.finish) {\n      dispatch(setPageNumber(0))\n    }\n    // Halt ongoing events\n    dispatch(setIsPlaying(false))\n  }\n\n  const mainMenuButtonStyle = css({\n    width: '100%',\n    height: '100px',\n    ...(activeState === stateName) && {\n      backgroundColor: '#DDD',\n    },\n    flexDirection: 'column' as const,\n  });\n\n  return (\n    <li css={[basicButtonStyle, mainMenuButtonStyle]}\n      role=\"menuitem\" tabIndex={0}\n      onClick={ onMenuItemClicked }\n      onKeyDown={(event: React.KeyboardEvent<HTMLLIElement>) => { if (event.key === \"Enter\") {\n        onMenuItemClicked()\n      }}}\n      >\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </li>\n  );\n};\n\nexport default MainMenu;\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { httpRequestState } from '../types'\nimport { mediaPackageId, ocUrl } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faToggleOn, faToggleOff} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectCurrentlyAtInSeconds, setIsPlaying, setCurrentlyAtInSeconds,\n  fetchVideoInformation, selectVideoURL, selectVideoCount, selectDurationInSeconds, selectTitle, selectPresenters,\n  setPreviewTriggered, selectPreviewTriggered, selectIsPlayPreview, setIsPlayPreview, setAspectRatio, selectAspectRatio\n} from '../redux/videoSlice'\n\nimport ReactPlayer from 'react-player'\n\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\nimport { errorBoxStyle } from \"../cssStyles\";\n\n/**\n * Container for the videos and their controls\n * TODO: Complete fetching\n * TODO: Move fetching to a more central part of the app\n */\nconst Video: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const videoURLs = useSelector(selectVideoURL)\n  const videoCount = useSelector(selectVideoCount)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n  const error = useSelector((state: { videoState: { error: httpRequestState[\"error\"] } }) => state.videoState.error)\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (videoURLStatus === 'idle') {\n      dispatch(fetchVideoInformation({mediaPackageId: mediaPackageId, ocUrl: ocUrl}))\n    }\n  }, [videoURLStatus, dispatch])\n\n  // Update based on current fetching status\n  // let content\n  // if (videoURLStatus === 'loading') {\n  //   content = <div className=\"loader\">Loading...</div>\n  // } else if (videoURLStatus === 'success') {\n  //   content = \"\"//<div className=\"loader\">Success...</div>\n  // } else if (videoURLStatus === 'failed') {\n  //   content = <div>{error}</div>\n  // }\n\n  // Initialize video players\n  const videoPlayers: JSX.Element[] = [];\n  for (let i = 0; i < videoCount; i++) {\n    // videoPlayers.push(<VideoPlayer key={i} url='https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4' />);\n    videoPlayers.push(<VideoPlayer key={i} dataKey={i} url={videoURLs[i]} isMuted={i !== 0}/>);\n  }\n\n  const errorBox = () => {\n    return (\n    <div css={errorBoxStyle(videoURLStatus)} title=\"Error Box\" role=\"alert\">\n      <span>A problem occured during communication with Opencast.</span><br />\n      {error ? \"Details: \" + error : \"No error details are available.\"}<br />\n      {mediaPackageId ? \"\" : \"Make sure the URL is of the form `your-opencast-address?mediaPackageId=id-of-the-event`\"}\n    </div>\n    );\n  }\n\n  // Style\n  const videoAreaStyle = css({\n    display: 'flex',\n    width: 'auto',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '0px',\n    borderBottom: '1px solid #BBB',\n  });\n\n  const videoPlayerAreaStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  });\n\n  return (\n    <div css={videoAreaStyle} title=\"Video Area\">\n      {errorBox()}\n      <VideoHeader />\n      <div css={videoPlayerAreaStyle} title=\"Video Player Area\">\n        {videoPlayers}\n      </div>\n      <VideoControls />\n    </div>\n  );\n};\n\n/**\n * A single video player\n * @param param0\n */\nconst VideoPlayer: React.FC<{dataKey: number, url: string, isMuted: boolean}> = ({dataKey, url, isMuted}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAtInSeconds)\n  const duration  = useSelector(selectDurationInSeconds)\n  const testTmp = useSelector(selectPreviewTriggered)\n  const aspectRatio = useSelector(selectAspectRatio)\n\n  // Init state variables\n  const ref = useRef<ReactPlayer>(null);\n  const [ready, setReady] = useState(false);\n  const [errorState, setError] = useState(false);\n\n  // Callback for when the video is playing\n  const onProgressCallback = (state: { played: number, playedSeconds: number, loaded: number, loadedSeconds:  number }) => {\n    // Only update redux if there was a substantial change\n    if (roundToDecimalPlace(currentlyAt, 3) !== roundToDecimalPlace(state.playedSeconds, 3)) {\n      dispatch(setCurrentlyAtInSeconds(state.playedSeconds))\n    }\n  }\n\n  // Callback for checking whether the video element is ready\n  const onReadyCallback = () => {\n    setReady(true);\n\n    if (ref.current && ref.current.getInternalPlayer()) {\n      let w = (ref.current.getInternalPlayer() as HTMLVideoElement).videoWidth\n      let h = (ref.current.getInternalPlayer() as HTMLVideoElement).videoHeight\n      dispatch(setAspectRatio({dataKey, width: w, height: h}))\n    }\n  }\n\n  const onEndedCallback = () => {\n    dispatch(setIsPlaying(false));\n    dispatch(setCurrentlyAtInSeconds(duration)); // It seems onEnded is called before the full duration is reached, so we set currentlyAt to the very end\n  }\n\n  useEffect(() => {\n    // Seek if the position in the video got changed externally\n    if(!isPlaying && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n    }\n    if(testTmp && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n      dispatch(setPreviewTriggered(false))\n    }\n  })\n\n  const onErrorCallback = (e: any) => {\n    setError(true)\n  }\n\n  const errorBoxStyle = css({\n    ...(!errorState) && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  const playerWrapper = css({\n    position: 'relative',\n    width: '100%',\n    paddingTop: aspectRatio + '%',\n  });\n\n  const reactPlayerStyle = css({\n    position: 'absolute',\n    top: 0,\n    left: 0,\n  })\n\n  const render = () => {\n    if (!errorState) {\n      return(\n        <div css={playerWrapper} title=\"playerWrapper\">\n          <ReactPlayer url={url}\n            css={reactPlayerStyle}\n            ref={ref}\n            width='100%'\n            height='100%'\n            playing={isPlaying}\n            muted={isMuted}\n            onProgress={onProgressCallback}\n            progressInterval={100}\n            onReady={onReadyCallback}\n            onEnded={onEndedCallback}\n            onError={onErrorCallback}\n            tabIndex={-1}\n            disablePictureInPicture\n          />\n        </div>\n      );\n    } else {\n      return (\n        <div css={errorBoxStyle} title=\"Error Box\" role=\"alert\">\n          <span>An error has occured loading this video. </span>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <>\n      {render()}\n    </>\n  );\n\n  // return (\n  //   <div title=\"Video Player\">\n  //     <video width=\"320\" height=\"240\" controls ref={vidRef}>\n  //     <source src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4\" type=\"video/mp4\" />\n  //     Your browser does not support the video tag.\n  //     </video>\n  //   </div>\n  // );\n};\n\n/**\n * Contains controls for manipulating multiple video players at once\n * TODO: Add missing controls\n * TODO: Turn time display into a control\n */\nconst VideoControls: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const isPlayPreview = useSelector(selectIsPlayPreview)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n\n  // Change preview mode from \"on\" to \"off\" and vice versa\n  const switchPlayPreview = () => {\n    dispatch(setIsPlayPreview(!isPlayPreview))\n  }\n\n  // Change play mode from \"on\" to \"off\" and vice versa\n  const switchIsPlaying = () => {\n    dispatch(setIsPlaying(!isPlaying))\n  }\n\n  // Style\n  const videoControlStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n  })\n\n  const videoControlsRowStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n    gap: '50px',\n  })\n\n  const playButtonStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const playPreviewStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.05)',\n    },\n  })\n\n  return (\n    <div css={videoControlStyle} title=\"Video Controls\">\n      <div css={videoControlsRowStyle} title=\"Video Controls Top Row\">\n        <div css={{display: 'flex', gap: '10px', justifyContent: 'center', alignItems: 'center'}}\n          title={\"Skips deleted segments when playing the video. Currently \" + (isPlayPreview ? \"on\" : \"off\")}>\n          <div css={{display: 'inline-block', flexWrap: 'nowrap'}}>\n            Preview Mode\n          </div>\n          <FontAwesomeIcon css={playPreviewStyle} icon={isPlayPreview ? faToggleOn : faToggleOff} size=\"1x\"\n            role=\"switch\" aria-checked={isPlayPreview} tabIndex={0} aria-hidden={false}\n            aria-label=\"Enable or disable preview mode.\"\n            onClick={ switchPlayPreview }\n            onKeyDown={(event: React.KeyboardEvent<SVGSVGElement>) => { if (event.key === \" \") {\n              switchPlayPreview()\n            }}}\n          />\n        </div>\n        <FontAwesomeIcon css={playButtonStyle} icon={isPlaying ? faPause : faPlay} size=\"2x\"\n          title=\"Play Button\"\n          role=\"button\" aria-pressed={isPlaying} tabIndex={0} aria-hidden={false}\n          aria-label=\"Play Button\"\n          onClick={ switchIsPlaying }\n          onKeyDown={(event: React.KeyboardEvent<SVGSVGElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n            switchIsPlaying()\n          }}}\n        />\n        <time css={{display: 'inline-block', width: '110px'}}\n          tabIndex={0} role=\"timer\">\n          {new Date((currentlyAt ? currentlyAt : 0)).toISOString().substr(11, 12)}\n        </time>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Displays elements above the video, e.g. title\n */\nconst VideoHeader: React.FC<{}> = () => {\n  const title = useSelector(selectTitle)\n  const presenters = useSelector(selectPresenters)\n\n  const titleStyle = css({\n    display: 'inline-block',\n    padding: '15px',\n    overflow: 'hidden',\n    whiteSpace: \"nowrap\",\n    textOverflow: 'ellipsis',\n    maxWidth: '500px',\n  })\n\n  const titleStyleBold = css({\n    fontWeight: 'bold',\n    fontSize: '24px',\n    verticalAlign: '-2.5px',\n  })\n\n  let presenter_header;\n  if (presenters && presenters.length) {\n      presenter_header = <div css={titleStyle} title=\"Video Presenters\">by {presenters.join(\", \")}</div>\n  }\n  return (\n    <div title=\"Video Area Header\" css={{fontSize: '16px'}}>\n      <div css={[titleStyle, titleStyleBold]} title=\"Video Title\">{title}</div>\n      {presenter_header}\n    </div>\n  );\n}\n\nexport default Video;\n","/**\n * Big thanks to Duncan \"slampunk\" Smith for writing this code and allowing it\n * to be used for this application.\n * duncan83@gmail.com\n */\n\nexport function Waveform(opts) {\n  this.audioContext = new AudioContext();\n  this.oCanvas = document.createElement('canvas');\n  this.buffer = {};\n  this.WIDTH = 0;\n  this.HEIGHT = 0;\n  this.channelData = [];\n  this.waveformImage = '';\n  this.audioBuffer = null;\n\n  this.aveRMS = 0;\n  this.peakRMS = 0;\n\n  this.numberSamples = 100000;\n  this.waveformType = 'img';\n  this.drawWaveform = this.drawCanvasWaveform;\n\n  if (opts.width && opts.height) {\n    this.setDimensions(opts.width, opts.height);\n  }\n  if (opts.samples) {\n    this.numberSamples = opts.samples;\n  }\n  if (opts.type && opts.type === 'svg') {\n    this.waveformType = 'svg';\n    this.drawWaveform = this.delegateToWorker;\n    this.worker = null;\n  }\n  if (opts.media) {\n    this.generateWaveform(opts.media)\n      .then(() => {\n        this.getAudioData();\n        this.drawWaveform();\n        if (this.waveformType !== 'svg') {\n          _completeFuncs.forEach(fn => {\n            fn(this.waveformImage || this.svgPath, this.waveformType);\n          });\n        }\n      })\n      .catch(e => console.log(e));\n  }\n\n  var _completeFuncs = [];\n  Object.defineProperty(this, 'oncomplete', {\n    get: function() {\n      return _completeFuncs;\n    },\n    set: function(fn, opt) {\n      if (typeof fn == 'function') {\n        if (this.waveformImage || this.svgPath) {\n          fn(this.waveformImage || this.svgPath, this.svgLength);\n          return;\n        }\n\n        _completeFuncs.push(fn);\n      }\n    }\n  });\n}\n\nWaveform.prototype = {\n  constructor: Waveform,\n  setDimensions: function(width, height) {\n    this.oCanvas.width = width;\n    this.WIDTH = width;\n    this.oCanvas.height = height;\n    this.HEIGHT = height;\n    this.ocCtx = this.oCanvas.getContext('2d');\n  },\n  decodeAudioData: function(arraybuffer) {\n    return new Promise((resolve, reject) => {\n      new Promise((res, rej) => {\n        if (arraybuffer instanceof ArrayBuffer) {\n          res(arraybuffer);\n        }\n        else if (arraybuffer instanceof Blob) {\n          let reader = new FileReader();\n          reader.onload = function() {\n            res(reader.result);\n          }\n          reader.readAsArrayBuffer(arraybuffer);\n        }\n      })\n      .then(buffer => {\n        this.audioContext.decodeAudioData(buffer)\n          .then(audiobuffer => {\n            this.buffer = audiobuffer;\n            resolve();\n          })\n          .catch(e => {\n            reject(e);\n          })\n      })\n      .catch(e => {\n        reject(e);\n      })\n    })\n  },\n  getAudioData: function(buffer) {\n    buffer = buffer || this.buffer;\n    this.channelData = this.dropSamples(buffer.getChannelData(0), this.numberSamples);\n  },\n  drawCanvasWaveform: function(amp) {\n    amp = amp || 1;\n    this.ocCtx.fillStyle = '#FFFFFF00'; //'#b7d8f9';\n    this.ocCtx.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n    this.ocCtx.lineWidth = 1;\n    this.ocCtx.strokeStyle = 'black'; //'#38597a';\n    let sliceWidth = this.WIDTH * 1.0 / this.channelData.length;\n    let x = 0;\n\n    this.ocCtx.beginPath();\n    this.ocCtx.moveTo(x, this.channelData[0] * this.HEIGHT / 128.0 / 2);\n\n    this.channelData.forEach(sample => {\n      let v = sample * amp;\n      let y = this.HEIGHT * (1 + v) / 2;\n      this.ocCtx.lineTo(x, y);\n      this.aveRMS += sample * sample;\n      this.peakRMS = Math.max(sample * sample, this.peakRMS);\n      x += sliceWidth;\n    });\n    this.ocCtx.lineTo(this.WIDTH, this.HEIGHT/2);\n    this.ocCtx.stroke();\n    this.aveRMS = Math.sqrt(this.aveRMS / this.channelData.length);\n    this.aveDBs = 20 * Math.log(this.aveRMS) / Math.log(10);\n    this.waveformImage = this.oCanvas.toDataURL();\n  },\n  dropSamples: function(data, requestedLength) {\n    let divider = Math.max(parseInt(data.length / requestedLength), 1);\n    return data.filter((sample, i) => i % divider === 0);\n  },\n  generateWaveform: function(arraybuffer) {\n    return this.decodeAudioData(arraybuffer);\n  },\n  delegateToWorker: function() {\n    if (!this.worker) {\n      this.worker = new Worker('../util/svgworker.js');\n      this.worker.addEventListener('message', this.workerCommunication.bind(this), false);\n      this.worker.postMessage(this.channelData);\n    }\n  },\n  workerCommunication: function(e) {\n    switch(e.data.type) {\n      case 'path':\n        this.setSVGpath(e.data.path, e.data.length);\n        this.worker.removeEventListener('message', this.workerCommunication.bind(this), false);\n        this.worker.terminate();\n        this.worker = null;\n        break;\n      default:\n        break;\n    }\n  },\n  setSVGpath: function(path, len) {\n    this.svgPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    this.svgLength = len;\n\n    this.svgPath.setAttribute('d', path);\n    this.svgPath.setAttribute('vector-effect', 'non-scaling-stroke');\n    this.svgPath.setAttribute('stroke-width', '0.5px');\n\n    this.oncomplete.forEach(fn => fn(this.svgPath, this.svgLength));\n  }\n};\n","import React, { useState, useRef, useEffect } from 'react'\n\nimport Draggable from 'react-draggable';\n\nimport { css } from '@emotion/core'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment, httpRequestState } from '../types'\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectSegments, selectActiveSegmentIndex, selectDuration,\n  selectVideoURL, setCurrentlyAt\n} from '../redux/videoSlice'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\n\nimport useResizeObserver from \"use-resize-observer\";\n\nimport { Waveform } from '../util/waveform'\nimport { convertMsToReadableString } from '../util/utilityFunctions';\n\n/**\n * A container for visualizing the cutting of the video, as well as for controlling\n * the current position in the video\n * Its width corresponds to the duration of the video\n */\nconst Timeline: React.FC<{}> = () => {\n\n  const { ref, width = 1, } = useResizeObserver<HTMLDivElement>();\n\n  const timelineStyle = css({\n    position: 'relative' as 'relative',     // Need to set position for Draggable bounds to work\n    height: '250px',\n    width: '100%',\n    //backgroundImage: `url({myImg})`,\n  });\n\n  return (\n  <div ref={ref} css={timelineStyle} title=\"Timeline\">\n    <Scrubber timelineWidth={width}/>\n    <div css={{height: '230px'}}>\n      <Waveforms />\n      <SegmentsList timelineWidth={width}/>\n    </div>\n  </div>\n  );\n};\n\n/**\n * Displays and defines the current position in the video\n * @param param0\n */\nconst Scrubber: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)  // For ARIA information display\n  const segments = useSelector(selectSegments)                      // For ARIA information display\n\n  // Init state variables\n  const [controlledPosition, setControlledPosition] = useState({x: 0,y: 0,});\n  const [isGrabbed, setIsGrabbed] = useState(false)\n  const [keyboardJumpDelta, setKeyboardJumpDelta] = useState(1000)  // In milliseconds. For keyboard navigation\n  const wasCurrentlyAtRef = useRef(0)\n  const nodeRef = React.useRef(null); // For supressing \"ReactDOM.findDOMNode() is deprecated\" warning\n\n  // Reposition scrubber when the current x position was changed externally\n  useEffect(() => {\n    if(currentlyAt !== wasCurrentlyAtRef.current) {\n      updateXPos();\n      wasCurrentlyAtRef.current = currentlyAt;\n    }\n  })\n\n  // Reposition scrubber when the timeline width changes\n  useEffect(() => {\n    if(currentlyAt && duration) {\n      setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timelineWidth])\n\n  // Callback for when the scrubber gets dragged by the user\n  // const onControlledDrag = (e: any, position: any) => {\n  //   const {x, y} = position;\n  //   dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n  // };\n\n  // Callback for when the position changes by something other than dragging\n  const updateXPos = () => {\n    const y = controlledPosition.y;\n    setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y});\n  };\n\n  const onStartDrag = () => {\n    setIsGrabbed(true)\n  }\n\n  const onStopDrag = (e: any, position: any) => {\n    const {x, y} = position;\n    setControlledPosition({x, y});\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n\n    setIsGrabbed(false)\n  }\n\n  // TODO: Better/more intuitive controls\n  // TODO: Better increases and decreases than ten intervals\n  // TODO: Additional helpful controls (e.g. jump to start/end of segment/next segment)\n  const keyboardControls = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if(event.altKey) {\n      switch (event.key) {\n        case \"j\":\n          // Left pressed\n          dispatch(setCurrentlyAt(Math.max(currentlyAt - keyboardJumpDelta, 0)))\n          break;\n        case \"l\":\n          // Right pressed\n          dispatch(setCurrentlyAt(Math.min(currentlyAt + keyboardJumpDelta, duration)))\n          break;\n        case \"i\":\n          // Up pressed\n          setKeyboardJumpDelta(Math.min(keyboardJumpDelta * 10, 1000000))\n          break;\n        case \"k\":\n          // Up pressed\n          setKeyboardJumpDelta(Math.max(keyboardJumpDelta / 10, 1))\n          break;\n      }\n    }\n  }\n\n  const scrubberStyle = css({\n    backgroundColor: 'black',\n    height: '250px',\n    width: '1px',\n    position: 'absolute' as 'absolute',\n    zIndex: 2,\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  });\n\n  const scrubberDragHandleStyle = css({\n    backgroundColor: 'rgba(255, 255, 255, 1)',\n    borderRadius: '10px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: isGrabbed ? \"grabbing\" : \"grab\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const scrubberDragHandleIconStyle = css({\n    transform: 'scaleY(1.5) rotate(90deg)',\n    padding: '5px',\n  })\n\n  const arrowUpStyle = css({\n    width: 0,\n    height: 0,\n    borderLeft: '7px solid transparent',\n    borderRight: '7px solid transparent',\n    borderBottom: '7px solid black',\n  })\n\n  const arrowDownStyle = css({\n    width: 0,\n    height: 0,\n    borderLeft: '7px solid transparent',\n    borderRight: '7px solid transparent',\n    borderTop: '7px solid black',\n  })\n\n  // const ariaLive = css({\n  //   position: 'absolute',\n  //   left: '-99999px',\n  //   height: '1px',\n  //   width: '1px',\n  //   overflow: 'hidden',\n  // })\n\n  // // Possible TODO: Find a way to use ariaLive in a way that only the latest change is announced\n  // const keyboardUpdateMessage = () => {\n  //   return currentlyAt +  \" Milliseconds\"\n  // }\n\n  return (\n    <Draggable\n      //onDrag={onControlledDrag}\n      onStart={onStartDrag}\n      onStop={onStopDrag}\n      axis=\"x\"\n      bounds=\"parent\"\n      position={controlledPosition}\n      disabled={isPlaying}\n      nodeRef={nodeRef}\n      >\n      <div ref={nodeRef} css={scrubberStyle} title=\"Scrubber\">\n        <div css={arrowDownStyle}></div>\n        <div css= {scrubberDragHandleStyle} title=\"dragHandle\" aria-grabbed={isGrabbed}\n          aria-label={\"Scrubber. \" + convertMsToReadableString(currentlyAt) + \". Active segment: \" + activeSegmentIndex + \". \"\n                      + (segments[activeSegmentIndex].deleted ? \"Deleted.\" : \"Alive.\")\n                      + \". Controls: Alt+j and Alt+k to move the scrubber. Alt+i and Alt+k to increase/decrase the move delta.\"}\n          tabIndex={0} onKeyDown={keyboardControls}>\n          <FontAwesomeIcon css={scrubberDragHandleIconStyle} icon={faBars} size=\"1x\" />\n          {/* <div css={ariaLive} aria-live=\"polite\" aria-atomic=\"true\">{keyboardUpdateMessage()}</div> */}\n        </div>\n        <div css={arrowUpStyle}></div>\n      </div>\n    </Draggable>\n  );\n};\n\n/**\n * Container responsible for rendering the segments that are created when cutting\n */\nconst SegmentsList: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const segments = useSelector(selectSegments)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)\n\n  /**\n   * Returns a background color based on whether the segment is to be deleted\n   * and whether the segment is currently active\n   */\n  const bgColor = (deleted: boolean, active: boolean) => {\n    if (!deleted && !active) {\n      return 'rgba(0, 0, 255, 0.4)'\n    } else if (deleted && !active) {\n      return `repeating-linear-gradient(\n                -45deg,\n                rgba(255, 45, 45, 0.4),\n                rgba(255, 45, 45, 0.4) 10px,\n                rgba(255, 0, 0, 0.4) 10px,\n                rgba(255, 0, 0, 0.4) 20px);`\n    } else if (!deleted && active) {\n      return 'rgba(0, 0, 200, 0.4)'\n    } else if (deleted && active) {\n      return `repeating-linear-gradient(\n                -45deg,\n                rgba(200, 45, 45, 0.4),\n                rgba(200, 45, 45, 0.4) 10px,\n                rgba(200, 0, 0, 0.4) 10px,\n                rgba(200, 0, 0, 0.4) 20px);`\n    }\n  }\n\n  // Render the individual segments\n  const renderedSegments = () => {\n    return (\n      segments.map( (segment: Segment, index: number) => (\n        <div key={segment.id} title={\"Segment \" + index}\n          aria-label={\"Segment \" + index + \". \" + (segment.deleted ? \"Deleted.\" : \"Alive.\")\n                      +  \" Start: \" + convertMsToReadableString(segment.start)\n                      + \". End: \" + convertMsToReadableString(segment.end) + \".\"}\n          tabIndex={0}\n        css={{\n          background: bgColor(segment.deleted, activeSegmentIndex === index),\n          borderRadius: '5px',\n          borderStyle: activeSegmentIndex === index ? 'dashed' : 'solid',\n          borderColor: 'white',\n          borderWidth: '1px',\n          boxSizing: 'border-box',\n          width: ((segment.end - segment.start) / duration) * 100 + '%',\n          height: '230px',\n          zIndex: 1,\n        }}>\n        </div>\n      ))\n    );\n  }\n\n  const segmentsStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    paddingTop: '10px',\n  })\n\n  return (\n    <div css={segmentsStyle} title=\"Segments\">\n      {renderedSegments()}\n    </div>\n  );\n};\n\n/**\n * Generates waveform images and displays them\n */\nconst Waveforms: React.FC<{}> = () => {\n\n  const videoURLs = useSelector(selectVideoURL)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n\n  // Update based on current fetching status\n  const [images, setImages] = useState<string[]>([])\n\n  const waveformDisplayTestStyle = css({\n    display: 'flex',\n    flexDirection: 'column',\n    position: \"absolute\" as \"absolute\",\n    justifyContent: 'center',\n    ...(images.length <= 0) && {alignItems: 'center'},  // Only center during loading\n    width: '100%',\n    height: '230px',\n    paddingTop: '10px',\n  });\n\n  // When the URLs to the videos are fetched, generate waveforms\n  useEffect( () => {\n    if (videoURLStatus === 'success') {\n      const images: string[] = []    // Store local paths to image files\n      let waveformsProcessed : number = 0  // Counter for checking if all workers are done\n\n      // Only display the waveform of the first video we get\n      const onlyOneURL = [videoURLs[0]]\n\n      onlyOneURL.forEach((videoURL, _index, array) => {\n        // Set up blob request\n        var blob = null\n        var xhr = new XMLHttpRequest()\n        xhr.open(\"GET\", videoURL)\n        xhr.responseType = \"blob\"\n        xhr.onload = function()\n        {\n          blob = xhr.response\n          var file = new File([blob], blob)\n\n          // Start waveform worker with blob\n          const waveformWorker : any = new Waveform({type: 'img', width: '2000', height: '230', samples: 100000, media: file});\n          // When done, save path to generated waveform img\n          waveformWorker.oncomplete = function(image: any, numSamples: any) {\n            images.push(image)\n            waveformsProcessed++\n            // If all images are generated, rerender\n            if (waveformsProcessed === array.length) {\n              setImages(images)\n            }\n          }\n        }\n        xhr.send()\n      })\n    }\n  }, [videoURLStatus, videoURLs]);\n\n\n  const renderImages = () => {\n    if (images.length > 0) {\n      return (\n        images.map((image, index) =>\n          <img key={index} alt='Waveform' src={image ? image : \"\"} css={{minHeight: 0}}></img>\n        )\n      );\n    } else {\n      return (\n        <>\n          <FontAwesomeIcon icon={faSpinner} spin size=\"3x\"/>\n          <div>Generating Waveform</div>\n        </>\n      );\n    }\n  }\n\n  return (\n  <div css={waveformDisplayTestStyle} title=\"WaveformDisplayTest\">\n    {renderImages()}\n  </div>\n  );\n}\n\nexport default Timeline;\n","import React from \"react\";\n\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition,\n  faCut,\n  faStepBackward,\n  faStepForward,\n  faTrash,\n  faTrashRestore,\n  } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  cut, markAsDeletedOrAlive, selectIsCurrentSegmentAlive, mergeLeft, mergeRight\n} from '../redux/videoSlice'\n\n/**\n * Defines the different actions a user can perform while in cutting mode\n */\nconst CuttingActions: React.FC<{}> = () => {\n\n  const cuttingStyle =  css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-between',\n    gap: '30px',\n  })\n\n  const blockStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    gap: '30px',\n  })\n\n  return (\n    <div css={cuttingStyle}>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faCut} actionName=\"Cut\" action={cut}\n            tooltip=\"Splits the segment at the current scrubber position\"\n            ariaLabelText=\"Cut. Splits the segment at the current scrubber position\"\n          />\n          <MarkAsDeletedButton />\n          <CuttingActionsButton iconName={faStepBackward} actionName=\"Merge Left\" action={mergeLeft}\n            tooltip=\"Combines the currently active segment with the segment to its left\"\n            ariaLabelText=\"Merge Left. Combines the currently active segment with the segment to its left\"\n          />\n          <CuttingActionsButton iconName={faStepForward} actionName=\"Merge Right\" action={mergeRight}\n            tooltip=\"Combines the currently active segment with the segment to its right\"\n            ariaLabelText=\"Merge Right. Combines the currently active segment with the segment to its right\"\n          />\n        </div>\n        <div css={blockStyle}>\n          {/* <CuttingActionsButton iconName={faQuestion} actionName=\"Reset changes\" action={null}\n            tooltip=\"Not implemented\"\n            ariaLabelText=\"Reset changes. Not implemented\"\n          />\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Undo\" action={null}\n            tooltip=\"Not implemented\"\n            ariaLabelText=\"Undo. Not implemented\"\n          /> */}\n        </div>\n    </div>\n  );\n};\n\n/**\n * CSS for cutting buttons\n */\nconst cuttingActionButtonStyle = {\n  padding: '16px',\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n};\n\ninterface cuttingActionsButtonInterface {\n  iconName: IconDefinition,\n  actionName: string,\n  action: any,\n  tooltip: string,\n  ariaLabelText: string,\n}\n\n/**\n * A button representing a single action a user can take while cutting\n * TODO: Add functionality\n * TODO: Complete styling\n * @param param0\n */\nconst CuttingActionsButton: React.FC<cuttingActionsButtonInterface> = ({iconName, actionName, action, tooltip, ariaLabelText}) => {\n\n  const dispatch = useDispatch();\n\n  const dispatchAction = () => {\n    if (action) {\n      dispatch(action())\n    }\n  }\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]}\n      title={tooltip}\n      role=\"button\" tabIndex={0} aria-label={ariaLabelText}\n      onClick={ dispatchAction }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        dispatchAction()\n      }}}\n      >\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{actionName}</span>\n    </div>\n  );\n};\n\n/**\n * Button that changes its function based on context\n */\nconst MarkAsDeletedButton : React.FC<{}> = () => {\n\n  const dispatch = useDispatch();\n  const isCurrentSegmentAlive = useSelector(selectIsCurrentSegmentAlive)\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]}\n      title=\"Marks the segment at the current scrubber position as deleted or alive\"\n      role=\"button\" tabIndex={0}\n      aria-label={\"Delete and Restore. Marks the segment at the current scrubber position as deleted or alive\"}\n      onClick={() => dispatch(markAsDeletedOrAlive())}>\n      <FontAwesomeIcon icon={isCurrentSegmentAlive ? faTrash : faTrashRestore} size=\"1x\" />\n      <div>{isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}</div>\n    </div>\n  );\n}\n\nexport default CuttingActions;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSave, faFileExport, faTimesCircle, IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch } from 'react-redux';\nimport { setState, setPageNumber, finish } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst FinishMenu : React.FC<{}> = () => {\n\n  const finishMenuStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-around',\n    gap: '30px',\n  })\n\n  return (\n    <div css={finishMenuStyle} title=\"Finish Menu\">\n        <FinishMenuButton iconName={faSave} stateName=\"Save changes\"/>\n        <FinishMenuButton iconName={faFileExport} stateName=\"Start processing\"/>\n        <FinishMenuButton iconName={faTimesCircle} stateName=\"Discard changes\"/>\n    </div>\n  );\n}\n\n/**\n * Buttons for the finish menu\n */\nconst FinishMenuButton: React.FC<{iconName: IconDefinition, stateName: finish[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n\n  const finish = () => {\n    dispatch(setState(stateName));\n    dispatch(setPageNumber(1))\n  }\n\n  const finishMenuButtonStyle = css({\n    width: '250px',\n    height: '220px',\n    flexDirection: 'column' as const,\n    fontSize: \"x-large\",\n    gap: '30px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  });\n\n  return (\n    <div css={[basicButtonStyle, finishMenuButtonStyle]}\n    role=\"button\" tabIndex={0}\n      onClick={ finish }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        finish()\n      }}}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\n\n\nexport default FinishMenu;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { Segment, PostEditArgument, httpRequestState } from '../types'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformation = createAsyncThunk('video/postVideoInformation', async (argument: PostEditArgument) => {\n  const response = await client.post(`${argument.ocUrl}/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostSlice = createSlice({\n  name: 'workflowPostState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\ninterface segmentAPI {\n  start: number,\n  end: number,\n  deleted: boolean,\n  selected: boolean,\n}\n\n// Convert a segment from how it is stored in redux into\n// a segment that can be send to Opencast\nexport const convertSegments = (segments: Segment[]) => {\n  let newSegments: segmentAPI[] = []\n\n  segments.forEach(segment => {\n    newSegments.push({\n      start: segment.start,\n      end: segment.end,\n      deleted: segment.deleted,\n      selected: false,\n    })\n  });\n\n  return newSegments\n}\n\nexport const selectStatus = (state: { workflowPostState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\nexport default workflowPostSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle, ariaLive, errorBoxStyle } from '../cssStyles'\nimport { mediaPackageId, ocUrl } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSpinner, faCheck, faExclamationCircle, faChevronLeft, faSave,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { selectSegments, selectTracks } from '../redux/videoSlice'\nimport { postVideoInformation, selectStatus, selectError } from '../redux/workflowPostSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Shown if the user wishes to save.\n * Informs the user about saving and displays a save button\n */\nconst Save : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const postWorkflowStatus = useSelector(selectStatus);\n  const postError = useSelector(selectError)\n\n  const saveStyle = css({\n    height: '100%',\n    display: finishState !== \"Save changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '30px',\n  })\n\n  return (\n    <div css={saveStyle} title=\"Save Area\">\n      <span>\n        Save the changes you made, but the video will not be cut yet. <br />\n        To make Opencast cut the video, please select \"Process\". <br />\n        Doth thou truly wish tah save?\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"No, take me back\" iconName={faChevronLeft}/>\n        <SaveButton />\n      </div>\n      <div css={errorBoxStyle(postWorkflowStatus)} title=\"Error Box\" role=\"alert\">\n        <span>An error has occured. Please wait a bit and try again.</span><br />\n        {postError ? \"Details: \" + postError : \"No error details are available.\"}<br />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sends a post request to save current changes\n */\nconst SaveButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n\n  // Update based on current fetching status\n  let icon = faSave\n  let spin = false\n  let tooltip = \"Save Button\"\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n    spin = true\n    tooltip = \"Attempting to save\"\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n    spin = false\n    tooltip = \"Saved successfully\"\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n    spin = false\n    tooltip = \"Save failed\"\n  }\n\n  const ariaSaveUpdate = () => {\n    if(workflowStatus === 'success') {\n      return \"Saved successfully\"\n    }\n  }\n\n  const save = () => {\n    dispatch(postVideoInformation({\n      segments: segments,\n      tracks: tracks,\n      mediaPackageId: mediaPackageId,\n      ocUrl: ocUrl,\n    }))\n  }\n\n  const saveButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={tooltip}\n      role=\"button\" tabIndex={0}\n      onClick={ save }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        save()\n      }}}>\n      <FontAwesomeIcon icon={icon} spin={spin} size=\"1x\"/>\n      <span>{\"Yes, Save changes\"}</span>\n      <div css={ariaLive} aria-live=\"polite\" aria-atomic=\"true\">{ariaSaveUpdate()}</div>\n    </div>\n  );\n}\n\n\nexport default Save;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface abort {\n  value: boolean,\n}\n\nconst initialState: abort = {\n  value: false,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const abortSlice = createSlice({\n  name: 'abortState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<abort[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = abortSlice.actions\n\n// Export Selectors\nexport const selectAbortState = (state: { abortState: { value: abort[\"value\"] }; }) => state.abortState.value\n\nexport default abortSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle} from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faChevronLeft, faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { setState as setAbortState } from '../redux/abortSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Shown if the user wishes to abort.\n * Informs the user about aborting and displays abort button.\n */\nconst Discard : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const cancelStyle = css({\n    display: finishState !== \"Discard changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '30px',\n  })\n\n  return (\n    <div css={cancelStyle} title=\"Abort Area\">\n      <span>\n        Discard all the changes you made? They will be lost forever! <br />\n        Doth thou truly wish tah abort?\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"No, take me back\" iconName={faChevronLeft} />\n        <DiscardButton />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sets the app into an aborted state\n */\nconst DiscardButton : React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const abort = () => {\n    dispatch(setAbortState(true))\n  }\n\n  const saveButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Discard changes button\"}\n      role=\"button\" tabIndex={0}\n      onClick={ abort }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        abort()\n      }}}>\n      <FontAwesomeIcon  icon={faTimesCircle} size=\"1x\"/>\n      <span>{\"Yes, discard changes\"}</span>\n    </div>\n  );\n}\n\nexport default Discard;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { PostAndProcessEditArgument, httpRequestState } from '../types'\n\nimport { convertSegments } from './workflowPostSlice'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformationWithWorkflow = createAsyncThunk('video/postVideoInformationWithWorkflow', async (argument: PostAndProcessEditArgument) => {\n  const response = await client.post(`${argument.ocUrl}/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks, workflows: argument.workflow }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes and starting a workflow\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostAndProcessSlice = createSlice({\n  name: 'workflowPostAndProcessState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformationWithWorkflow.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\nexport const selectStatus = (state: { workflowPostAndProcessState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostAndProcessState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\n\nexport default workflowPostAndProcessSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle, errorBoxStyle } from '../cssStyles'\nimport { mediaPackageId, ocUrl } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\nimport { faSpinner, faCheck, faExclamationCircle, faChevronLeft, faFileExport } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, selectSegments, selectTracks, } from '../redux/videoSlice'\nimport { postVideoInformationWithWorkflow, selectStatus, selectError } from '../redux/workflowPostAndProcessSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Will eventually display settings based on the selected workflow index\n */\nconst WorkflowConfiguration : React.FC<{}> = () => {\n\n  const postAndProcessWorkflowStatus = useSelector(selectStatus);\n  const postAndProcessError = useSelector(selectError)\n\n  const workflowConfigurationStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  })\n\n  return (\n    <div css={workflowConfigurationStyle} title=\"Workflow Configuration Area\">\n      <h2>Workflow Configuration</h2>\n      <FontAwesomeIcon icon={faTools} size=\"10x\" />\n      Placeholder\n      <div>Satisfied with your configuration?</div>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={1} label=\"No, take me back\" iconName={faChevronLeft}/>\n        <SaveAndProcessButton text=\"Yes, start processing\"/>\n      </div>\n      <div css={errorBoxStyle(postAndProcessWorkflowStatus)} title=\"Error Box\" role=\"alert\">\n        <span>An error has occured. Please wait a bit and try again.</span><br />\n        {postAndProcessError ? \"Details: \" + postAndProcessError : \"No error details are available.\"}<br />\n      </div>\n    </div>\n  );\n\n}\n\n/**\n * Button that sends a post request to save current changes\n * and starts the selected workflow\n */\nexport const SaveAndProcessButton: React.FC<{text: string}> = ({text}) => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const workflows = useSelector(selectWorkflows)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n\n  const saveAndProcess = () => {\n    dispatch(postVideoInformationWithWorkflow({\n      segments: segments,\n      tracks: tracks,\n      mediaPackageId: mediaPackageId,\n      ocUrl: ocUrl,\n      workflow: [{id: workflows[selectedWorkflowIndex].id}],\n    }))\n  }\n\n  // Update based on current fetching status\n  let icon = faFileExport\n  let spin = false\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n    spin = true\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n    spin = false\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n    spin = false\n  }\n\n  const saveButtonStyle = css({\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Start processing button\"}\n      role=\"button\" tabIndex={0}\n      onClick={ saveAndProcess }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        saveAndProcess()\n      }}}>\n      <FontAwesomeIcon  icon={icon} spin={spin} size=\"1x\"/>\n      <span>{text}</span>\n    </div>\n  );\n}\n\nexport default WorkflowConfiguration;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle, errorBoxStyle } from '../cssStyles'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, setSelectedWorkflowIndex } from '../redux/videoSlice'\nimport { selectFinishState, selectPageNumber } from '../redux/finishSlice'\n\nimport { PageButton } from './Finish'\nimport { faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { SaveAndProcessButton } from \"./WorkflowConfiguration\";\nimport { selectStatus, selectError } from \"../redux/workflowPostAndProcessSlice\";\n\n/**\n * Allows the user to select a workflow\n */\nconst WorkflowSelection : React.FC<{}> = () => {\n\n  // Initialite redux states\n  const workflows = useSelector(selectWorkflows)\n  const finishState = useSelector(selectFinishState)\n  const pageNumber = useSelector(selectPageNumber)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const postAndProcessWorkflowStatus = useSelector(selectStatus);\n  const postAndProcessError = useSelector(selectError)\n\n  // Create workflow selection\n  const workflowButtons = () => {\n    if (workflows.length > 0) {\n      return (\n        workflows.map( (workflow: any, index: number) => (\n          <WorkflowButton key={index} stateName={workflow.name} workflowIndex={index}/>\n        ))\n      );\n    } else {\n      return (\n        \"There are no workflows to select. Save your changes and contact an Opencast Administrator.\"\n      );\n    }\n  }\n\n  // Gets the description from the currently selected workflow\n  const workflowDescription = () => {\n    if (workflows.length > selectedWorkflowIndex && workflows[selectedWorkflowIndex].description) {\n      return (\n        workflows[selectedWorkflowIndex].description\n      );\n    } else {\n      return (\n        \"And this is where I would put a workflow description.... if I had one!\"\n      );\n    }\n  }\n\n  const workflowSelectionStyle = css({\n    display: (finishState === \"Start processing\" && pageNumber === 1) ? 'flex' : 'none',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '50px',\n  })\n\n  const workflowSelectionSelectionStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'left',\n    gap: '20px',\n    flexWrap: 'wrap',\n    maxHeight: '50vh',\n  })\n\n  return (\n    <div css={workflowSelectionStyle}>\n      <h2>Select a workflow</h2>\n      <div css={workflowSelectionSelectionStyle} title=\"Workflow Selection Area\">\n        {workflowButtons()}\n      </div>\n      <div>{workflowDescription()}</div>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"Take me back\" iconName={faChevronLeft}/>\n        {/* <PageButton pageNumber={2} label=\"Continue\" iconName={faChevronRight}/> */}\n        <SaveAndProcessButton text=\"Start processing with workflow\"/>\n      </div>\n      <div css={errorBoxStyle(postAndProcessWorkflowStatus)} title=\"Error Box\" role=\"alert\">\n        <span>An error has occured. Please wait a bit and try again.</span><br />\n        {postAndProcessError ? \"Details: \" + postAndProcessError : \"No error details are available.\"}<br />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Clicking this button sets the associated workflow as selected\n * @param param0\n */\nconst WorkflowButton: React.FC<{stateName: string, workflowIndex: number}> = ({stateName, workflowIndex}) => {\n\n  const dispatch = useDispatch();\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const selectWorkflowIndex = () => {\n    dispatch(setSelectedWorkflowIndex(workflowIndex))\n  }\n\n  const workflowButtonStyle = css({\n    backgroundColor: workflowIndex !== selectedWorkflowIndex ? 'snow' : '#DDD',\n    padding: '16px',\n  });\n\n  return (\n    <div css={[basicButtonStyle,workflowButtonStyle]} title={\"Click to select this workflow\"}\n      role=\"button\" tabIndex={0}\n      aria-label={\"Press to select the workflow: \" + stateName}\n      onClick={ selectWorkflowIndex }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        selectWorkflowIndex()\n      }}}>\n      <span>{stateName}</span>\n    </div>\n  );\n}\n\nexport default WorkflowSelection;\n","import React from \"react\";\n\nimport FinishMenu from \"./FinishMenu\";\nimport Save from \"./Save\"\nimport Discard from \"./Discard\"\nimport WorkflowSelection from \"./WorkflowSelection\";\nimport WorkflowConfiguration from \"./WorkflowConfiguration\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPageNumber, setPageNumber } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst Finish : React.FC<{}> = () => {\n\n  const pageNumber = useSelector(selectPageNumber)\n\n  const pageZeroStyle = css({\n    display: pageNumber !== 0 ? 'none' :'block',\n  })\n\n  const pageOneStyle = css({\n    display: pageNumber !== 1 ? 'none' :'block',\n  })\n\n  const pageTwoStyle = css({\n    display: pageNumber !== 2 ? 'none' :'block',\n  })\n\n  return (\n    <div  title=\"Finish\">\n      <div css={pageZeroStyle} >\n        <FinishMenu />\n      </div>\n      <div css={pageOneStyle} >\n        <Save />\n        <WorkflowSelection />\n        <Discard />\n      </div>\n      <div css={pageTwoStyle} >\n        <WorkflowConfiguration />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Takes you to a different page\n */\nexport const PageButton : React.FC<{pageNumber: number, label: string, iconName: IconDefinition}> = ({pageNumber, label, iconName}) => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const onPageChange = () => {\n    dispatch(setPageNumber(pageNumber))\n  }\n\n  const pageButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, pageButtonStyle]}\n      role=\"button\" tabIndex={0}\n      onClick={ onPageChange }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        onPageChange()\n      }}}>\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{label}</span>\n    </div>\n  );\n}\n\n\nexport default Finish;\n","import React from \"react\";\n\nimport Video from './Video';\nimport Timeline from './Timeline';\nimport CuttingActions from './CuttingActions';\nimport Finish from \"./Finish\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useSelector } from 'react-redux'\nimport { selectMainMenuState } from '../redux/mainMenuSlice'\n\nimport { MainMenuStateNames } from '../types'\n\n/**\n * A container for the main functionality\n * Shows different components depending on the state off the app\n */\nconst MainContent: React.FC<{}> = () => {\n\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  const cuttingStyle = css({\n    display: mainMenuState !== MainMenuStateNames.cutting ? 'none' :'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    paddingLeft: '20px',\n  })\n\n  const finishStyle = css({\n    display: mainMenuState !== MainMenuStateNames.finish ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    height: '100%',\n  })\n\n  const defaultStyle = css({\n    display: (mainMenuState === MainMenuStateNames.cutting || mainMenuState === MainMenuStateNames.finish )\n              ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n     <main title=\"MainMenuContext\" css={{width: '100%'}} role=\"main\">\n      <div css={cuttingStyle} title=\"Cutting Container\">\n          <Video />\n          <CuttingActions />\n          <Timeline />\n      </div>\n      <div css={finishStyle} title=\"Finish Container\">\n        <Finish />\n      </div>\n      <div css={defaultStyle}>\n        <FontAwesomeIcon icon={faTools} size=\"10x\" />\n        Placeholder\n      </div>\n     </main>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faTimesCircle, faQuestion, } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector } from 'react-redux';\nimport { selectDuration } from '../redux/videoSlice'\nimport { selectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\n/**\n * This page is to be displayed when the user is \"done\" with the editor\n * and should not be able to perfom any actions anymore\n * TODO: Improve state management somehow to avoid the possibility of an error case\n * TODO: Improve text\n * TODO: Add a button that closes the editor window/frame?\n */\nconst TheEnd : React.FC<{}> = () => {\n\n  // Init redux variables\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(selectStatus)\n  const duration = useSelector(selectDuration)\n\n  const icon = () => {\n    if (abortState) {\n      return faTimesCircle\n    } else if (postAndProcessState === \"success\") {\n      return faCheckCircle\n    } else {\n      return faQuestion\n    }\n  }\n\n  const text = () => {\n    if (abortState) {\n      return \"You really did it. All your changes are now lost forever. You can now continue doing whatever you want.\"\n    } else if (postAndProcessState === \"success\") {\n      return `Changes successfully saved to Opencast. Processing your changes may take up to\n              ${new Date((duration * 2)).toISOString().substr(11, 8)} hours.\n              You can now close the editor.`\n    } else {\n      return \"Now this is awkward. Something has gone very wrong.\"\n    }\n  }\n\n  const theEndStyle = css({\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n    <div css={theEndStyle} title=\"The last area\">\n      <FontAwesomeIcon icon={icon()} size=\"10x\" />\n      <text>{text()}</text>\n    </div>\n  );\n}\n\nexport default TheEnd","import React from \"react\";\n\nimport MainMenu from './MainMenu';\nimport MainContent from './MainContent';\nimport TheEnd from './TheEnd';\n\nimport { useSelector } from 'react-redux';\nimport { selectStatus as postAndProcessSelectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\nconst Body: React.FC<{}> = () => {\n\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(postAndProcessSelectStatus)\n\n  // If we're in a special state, display a special page\n  // Otherwise display the normal page\n  const main = () => {\n    if(abortState || postAndProcessState === \"success\") {\n      return (\n        <TheEnd />\n      );\n    } else {\n      return (\n        <div css={bodyStyle} title=\"Body\">\n          <MainMenu />\n          <MainContent />\n        </div>\n      );\n    }\n  }\n\n  const bodyStyle = {\n    display: 'flex',\n    flexDirection: 'row' as const,\n    height: '100%',\n  };\n\n  return (\n    <React.Fragment>\n      {main()}\n    </React.Fragment>\n  );\n};\n\nexport default Body;\n","import React from 'react';\nimport Body from './main/Body';\nimport { GlobalStyle } from './cssStyles'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport mainMenuStateReducer from './mainMenuSlice'\nimport finishStateReducer from './finishSlice'\nimport videoReducer from './videoSlice'\nimport workflowPostReducer from './workflowPostSlice'\nimport workflowPostAndProcessReducer from './workflowPostAndProcessSlice'\nimport abortReducer from './abortSlice'\n\nexport default configureStore({\n  reducer: {\n    mainMenuState: mainMenuStateReducer,\n    finishState: finishStateReducer,\n    videoState: videoReducer,\n    workflowPostState: workflowPostReducer,\n    workflowPostAndProcessState: workflowPostAndProcessReducer,\n    abortState: abortReducer,\n  }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nimport { init } from './config'\nimport { sleep } from './util/utilityFunctions'\n\n\n// Load config here\n// Load the rest of the application and try to fetch the settings file from the\n// server.\nconst initialize = Promise.race([\n  init(),\n  sleep(300),\n]);\n\nconst render = (body: JSX.Element) => {\n  ReactDOM.render(body, document.getElementById('root'));\n};\n\ninitialize.then(\n\n  () => {\n    ReactDOM.render(\n      <React.StrictMode>\n          <Provider store={store}>\n            <App />\n          </Provider>\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  },\n\n  // This error case is vey unlikely to occur.\n  e => render(<p>\n    {`Fatal error while loading app: ${e.message}`}\n    <br />\n    This might be caused by a incorrect configuration by the system administrator.\n  </p>),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}