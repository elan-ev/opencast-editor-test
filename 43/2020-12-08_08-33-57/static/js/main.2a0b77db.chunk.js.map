{"version":3,"sources":["types.ts","redux/mainMenuSlice.ts","cssStyles.tsx","main/MainMenu.tsx","util/client.js","util/utilityFunctions.ts","redux/videoSlice.ts","main/Video.tsx","img/placeholder_waveform.png","main/Timeline.tsx","main/CuttingActions.tsx","redux/finishSlice.ts","main/FinishMenu.tsx","main/WorkflowSelection.tsx","redux/workflowPostAndProcessSlice.ts","main/WorkflowConfiguration.tsx","redux/workflowPostSlice.ts","redux/abortSlice.ts","main/FinishContent.tsx","main/Finish.tsx","main/MainContent.tsx","main/TheEnd.tsx","main/Body.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["MainMenuStateNames","initialState","value","cutting","mainMenuSlice","createSlice","name","reducers","setState","state","action","payload","actions","selectMainMenuState","mainMenuState","GlobalStyle","styles","globalStyle","basicButtonStyle","css","borderRadius","cursor","transitionDuration","transitionProperty","transform","display","justifyContent","alignItems","gap","textAlign","MainMenuButton","iconName","stateName","dispatch","useDispatch","activeState","useSelector","mainMenuButtonStyle","width","height","backgroundColor","flexDirection","title","onClick","icon","size","MainMenu","style","borderRight","flexShrink","padding","faFilm","faListUl","metadata","faPhotoVideo","thumbnail","faSignOutAlt","finish","client","endpoint","a","body","customConfig","headers","encoded","btoa","unescape","encodeURIComponent","authHeaders","config","method","JSON","stringify","window","fetch","response","text","data","length","parse","ok","Error","statusText","Promise","reject","message","get","post","roundToDecimalPlace","num","decimalPlace","decimalFactor","Math","pow","round","Number","EPSILON","isPlaying","currentlyAt","segments","id","nanoid","start","end","deleted","activeSegmentIndex","selectedWorkflowIndex","videoURLs","videoCount","duration","presenters","workflows","status","error","undefined","fetchVideoInformation","createAsyncThunk","videoSlice","setIsPlaying","setCurrentlyAt","updateActiveSegment","setCurrentlyAtInSeconds","addSegment","push","cut","segmentA","segmentB","splice","markAsDeletedOrAlive","setSelectedWorkflowIndex","mergeLeft","mergeSegments","mergeRight","extraReducers","builder","addCase","pending","fulfilled","previews","reduce","o","uri","parseSegments","sort","n1","n2","displayOrder","rejected","findIndex","element","newSegments","forEach","mergeSegmentIndex","min","max","selectIsPlaying","videoState","selectCurrentlyAt","selectCurrentlyAtInSeconds","selectSegments","selectActiveSegmentIndex","selectIsCurrentSegmentAlive","selectSelectedWorkflowIndex","selectVideoURL","selectVideoCount","selectDuration","selectDurationInSeconds","selectTitle","selectPresenters","selectWorkflows","VideoPlayer","url","isMuted","useState","ready","setReady","ref","useRef","useEffect","current","seekTo","playing","muted","onProgress","playedSeconds","progressInterval","onReady","onEnded","VideoControls","isSkipping","setIsSkipping","videoControlStyle","videoControlsRowStyle","playButtonStyle","skipToggleStyle","faEyeSlash","faToggleOn","faToggleOff","faPause","faPlay","Date","toISOString","substr","VideoHeader","titleStyle","join","Video","content","videoURLStatus","className","videoPlayers","i","key","videoAreaStyle","borderBottom","videoPlayerAreaStyle","Scrubber","timelineWidth","x","y","controlledPosition","setControlledPosition","isGrabbed","setIsGrabbed","wasCurrentlyAtRef","updateXPos","scrubberStyle","position","zIndex","boxShadow","scrubberDragHandleStyle","scrubberDragHandleIconStyle","onStart","onStop","e","axis","bounds","disabled","faBars","SegmentsList","bgColor","index","segmentsStyle","paddingTop","map","segment","borderStyle","borderColor","borderWidth","boxSizing","Timeline","useResizeObserver","timelineStyle","alt","src","myImg","top","cuttingActionButtonStyle","CuttingActionsButton","actionName","MarkAsDeletedButton","isCurrentSegmentAlive","faTrash","faTrashRestore","CuttingActions","cuttingStyle","blockStyle","faCut","faStepBackward","faStepForward","faQuestion","finishSlice","pageNumber","setPageNumber","selectFinishState","finishState","selectPageNumber","FinishMenuButton","FinishMenu","faSave","faFileExport","faTimesCircle","WorkflowButton","workflowIndex","workflowButtonStyle","WorkflowSelection","workflowStyle","paddingRight","workflow","postVideoInformationWithWorkflow","argument","mediaPackageId","convertSegments","worklows","workflowID","workflowPostAndProcessSlice","selected","selectStatus","workflowPostAndProcessState","selectError","SaveAndProcessButton","workflowStatus","faDotCircle","faSpinner","faCheck","faExclamationCircle","saveButtonStyle","WorkflowConfiguration","postAndProcessWorkflowStatus","postAndProcessError","workflowConfigurationStyle","errorBoxStyle","fontWeight","faTools","label","postVideoInformation","workflowPostSlice","workflowPostState","abortSlice","selectAbortState","abortState","Save","postWorkflowStatus","postError","saveStyle","Process","startWorkflowStyle","Abort","cancelStyle","SaveButton","AbortButton","setAbortState","PageButton","pageButtonStyle","FinishContent","Finish","FinishMenuStyle","FinishContentStyle","MainContent","paddingLeft","saveProcessCancelStyle","defaultStyle","TheEnd","postAndProcessState","theEndStyle","faCheckCircle","Body","postAndProcessSelectStatus","bodyStyle","Fragment","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mainMenuStateReducer","finishStateReducer","videoReducer","workflowPostReducer","workflowPostAndProcessReducer","abortReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.2a0b77db.chunk.js","sourcesContent":["export interface Segment {\n  id: string,\n  start: number,\n  end: number,\n  deleted: boolean,\n}\n\nexport interface TimelineState {\n  segments: Segment[]\n  scrubberPos: number\n}\n\nexport interface PostEditArgument {\n  segments: Segment[]\n  mediaPackageId: string\n}\n\nexport interface PostAndProcessEditArgument extends PostEditArgument{\n  workflowID: string\n}\n\nexport enum MainMenuStateNames {\n  cutting = \"Cutting\",\n  metadata = \"Metadata\",\n  thumbnail = \"Thumbnail\",\n  finish = \"Finish\",\n}\n\nexport interface httpRequestState {\n  status: 'idle' | 'loading' | 'success' | 'failed',\n  error: string | undefined\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nimport { MainMenuStateNames} from '../types'\n\ninterface mainMenu {\n  value: MainMenuStateNames,\n}\n\nconst initialState: mainMenu = {\n  value: MainMenuStateNames.cutting,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const mainMenuSlice = createSlice({\n  name: 'mainMenuState',\n  initialState,\n  reducers: {\n    setState: (state, action) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = mainMenuSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectMainMenuState = (state: { mainMenuState: { value: mainMenu[\"value\"]; }; }) => state.mainMenuState.value\n\nexport default mainMenuSlice.reducer\n","/**\n * This file contains general css stylings\n */\nimport { css, Global } from '@emotion/core'\nimport React from \"react\";\n\n/**\n * An emotion component that inserts styles globally\n * Is removed when the styles change or when the Global component unmounts.\n */\nexport const GlobalStyle: React.FC = () => {\n  return (\n    <Global styles={globalStyle} />\n  );\n}\n\n/**\n * CSS for the global style component\n */\nexport const globalStyle = css({\n  body: {\n    backgroundColor: 'snow',\n    fontSize: 'medium',\n    // Makes the body span to the bottom of the page\n    minHeight: \"100vh\",\n  },\n});\n\n/**\n * CSS for buttons\n */\nexport const basicButtonStyle = css({\n  borderRadius: '10px',\n  cursor: \"pointer\",\n  // Animation\n  transitionDuration: \"0.3s\",\n  transitionProperty: \"transform\",\n  \"&:hover\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:active\": {\n    transform: 'scale(0.9)',\n  },\n  // Flex position child elements\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  gap: '10px',\n  textAlign: 'center' as const,\n});","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm, faListUl, faPhotoVideo, faSignOutAlt, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setState, selectMainMenuState } from '../redux/mainMenuSlice'\n\nimport { MainMenuStateNames } from '../types'\nimport { basicButtonStyle } from '../cssStyles'\n\n/**\n * A container for selecting the functionality shown in the main part of the app\n */\nconst MainMenu: React.FC<{}> = () => {\n\n  const mainMenuStyle = {\n    borderRight: '1px solid #BBB',\n    width: '100px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    flexShrink: 0,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  };\n\n  return (\n    <div style={mainMenuStyle} title=\"MainMenu\">\n      <MainMenuButton iconName={faFilm} stateName={MainMenuStateNames.cutting}/>\n      <MainMenuButton iconName={faListUl} stateName={MainMenuStateNames.metadata}/>\n      <MainMenuButton iconName={faPhotoVideo} stateName={MainMenuStateNames.thumbnail}/>\n      <MainMenuButton iconName={faSignOutAlt} stateName={MainMenuStateNames.finish}/>\n    </div>\n  );\n};\n\n/**\n * A button to set the state of the app\n * @param param0\n */\nconst MainMenuButton: React.FC<{iconName: IconDefinition, stateName: string}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectMainMenuState)\n\n  const mainMenuButtonStyle = css({\n    width: '100%',\n    height: '100px',\n    ...(activeState === stateName) && {\n      backgroundColor: 'lightblue',\n    },\n    flexDirection: 'column' as const,\n  });\n\n  return (\n    <div css={[basicButtonStyle, mainMenuButtonStyle]} title={stateName}\n      onClick={() => {\n        dispatch(setState(stateName));\n      }}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\nexport default MainMenu;\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\n/**\n * Client I stole this form a react tutorial\n */\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const encoded = btoa(unescape(encodeURIComponent(\n    \"admin:opencast\"\n  )));\n  const authHeaders = { 'Authorization': `Basic ${encoded}` };\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n      ...authHeaders,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  let text\n  try {\n    const response = await window.fetch(endpoint, config)\n    text = await response.text()\n    text.length ? data = JSON.parse(text) : data = ''\n    // data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","export const roundToDecimalPlace = (num: number, decimalPlace: number) => {\n  let decimalFactor = Math.pow(10, decimalPlace)\n  return Math.round((num + Number.EPSILON) * decimalFactor) / decimalFactor\n}\n","import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\nimport { Segment, httpRequestState }  from '../types'\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\nimport { WritableDraft } from 'immer/dist/internal';\n\nexport interface video {\n  isPlaying: boolean,\n  currentlyAt: number,   // Position in the video in milliseconds\n  segments: Segment[],\n  activeSegmentIndex: number,\n  selectedWorkflowIndex: number,\n\n  videoURLs: string[],\n  videoCount: number,\n  duration: number,   // Video duration in milliseconds\n  title: string,\n  presenters: string[],\n  workflows: string[],\n}\n\nconst initialState: video & httpRequestState = {\n  isPlaying: false,\n  currentlyAt: 0,   // Position in the video in milliseconds\n  segments: [{id: nanoid(), start: 0, end: 1, deleted: false}],\n  activeSegmentIndex: 0,\n  selectedWorkflowIndex: 0,\n\n  videoURLs: [],\n  videoCount: 0,\n  duration: 0,\n  title: '',\n  presenters: [],\n  workflows: [],\n\n  status: 'idle',\n  error: undefined,\n}\n\nexport const fetchVideoInformation = createAsyncThunk('video/fetchVideoInformation', async () => {\n  const response = await client.get('https://legacy.opencast.org/admin-ng/tools/ID-dual-stream-demo/editor.json')\n  return response\n})\n\n/**\n * Slice for the state of the \"video\"\n * Treats the multitude of videos that may exist as one video\n * TODO: Find a way to init the segments array with a starting segment\n */\nexport const videoSlice = createSlice({\n  name: 'videoState',\n  initialState,\n  reducers: {\n    setIsPlaying: (state, action) => {\n      state.isPlaying = action.payload;\n    },\n    setCurrentlyAt: (state, action) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload, 3);\n\n      updateActiveSegment(state);\n    },\n    setCurrentlyAtInSeconds: (state, action) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload * 1000, 3);\n\n      updateActiveSegment(state);\n    },\n    addSegment: (state, action) => {\n      state.segments.push(action.payload)\n    },\n    cut: (state) => {\n      // If we're exactly between two segments, we can't split the current segment\n      if (state.segments[state.activeSegmentIndex].start === state.currentlyAt ||\n          state.segments[state.activeSegmentIndex].end === state.currentlyAt ) {\n        return state;\n      }\n\n      // Make two (new) segments out of it\n      let segmentA : Segment =  {id: nanoid(),\n        start: state.segments[state.activeSegmentIndex].start,\n        end: state.currentlyAt,\n        deleted: true}\n      let segmentB : Segment =  {id: nanoid(),\n        start: state.currentlyAt,\n        end: state.segments[state.activeSegmentIndex].end,\n        deleted: true}\n\n      // Add the new segments and remove the old one\n      state.segments.splice(state.activeSegmentIndex, 1, segmentA, segmentB);\n    },\n    markAsDeletedOrAlive: (state) => {\n      state.segments[state.activeSegmentIndex].deleted = !state.segments[state.activeSegmentIndex].deleted\n    },\n    setSelectedWorkflowIndex: (state, action) => {\n      state.selectedWorkflowIndex = action.payload\n    },\n    mergeLeft: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex - 1)\n    },\n    mergeRight: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex + 1)\n    },\n  },\n  // For Async Requests\n  extraReducers: builder => {\n    builder.addCase(\n      fetchVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n        // eslint-disable-next-line no-sequences\n        state.videoURLs = action.payload.previews.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        state.videoCount = action.payload.previews.length\n        state.duration = action.payload.duration\n        state.title = action.payload.title\n        state.presenters = action.payload.presenters\n        state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n          if (n1.displayOrder > n2.displayOrder) { return 1; }\n          if (n1.displayOrder < n2.displayOrder) { return -1; }\n          return 0;\n        });\n    })\n    builder.addCase(\n      fetchVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\n/**\n * Helper function to update the activeSegmentIndex\n * @param state\n */\nconst updateActiveSegment = (state: WritableDraft<video>) => {\n  state.activeSegmentIndex = state.segments.findIndex(element =>\n    element.start <= state.currentlyAt && element.end >= state.currentlyAt)\n  // TODO: Proper error handling. Rewrite function?\n  if(state.activeSegmentIndex < 0) {\n    state.activeSegmentIndex = 0\n  }\n}\n\n/**\n * Helper Function for testing with current/old editor API\n */\nconst parseSegments = (segments: any, duration: number) => {\n  let newSegments : Segment[] = []\n\n  if (segments.length === 0) {\n    newSegments.push({id: nanoid(), start: 0, end: duration, deleted: false})\n  }\n\n  segments.forEach((element: { start: any; end: any; deleted: any; }) => {\n    newSegments.push({id: nanoid(), start: element.start, end: element.end, deleted: element.deleted})\n  });\n  return newSegments\n}\n\n/**\n * Helper function for merging two segments\n */\nconst mergeSegments = (state: WritableDraft<video>, activeSegmentIndex: number, mergeSegmentIndex: number) => {\n  // Check if mergeSegmentIndex is valid\n  if (mergeSegmentIndex < 0 || mergeSegmentIndex > state.segments.length - 1) {\n    return\n  }\n\n  // Increase activeSegment length\n  state.segments[activeSegmentIndex].start = Math.min(\n    state.segments[activeSegmentIndex].start, state.segments[mergeSegmentIndex].start)\n  state.segments[activeSegmentIndex].end = Math.max(\n    state.segments[activeSegmentIndex].end, state.segments[mergeSegmentIndex].end)\n\n  // Remove the other segment\n  state.segments.splice(mergeSegmentIndex, 1);\n\n  // Update active segment\n  updateActiveSegment(state)\n}\n\nexport const { setIsPlaying, setCurrentlyAt, setCurrentlyAtInSeconds, addSegment, cut, markAsDeletedOrAlive,\n  setSelectedWorkflowIndex, mergeLeft, mergeRight } = videoSlice.actions\n\n// Export selectors\n// Selectors mainly pertaining to the video state\nexport const selectIsPlaying = (state: { videoState: { isPlaying: video[\"isPlaying\"] }; }) =>\n  state.videoState.isPlaying\nexport const selectCurrentlyAt = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt\nexport const selectCurrentlyAtInSeconds = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt / 1000\nexport const selectSegments = (state: { videoState: { segments: video[\"segments\"] } }) =>\n  state.videoState.segments\nexport const selectActiveSegmentIndex = (state: { videoState: { activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  state.videoState.activeSegmentIndex\nexport const selectIsCurrentSegmentAlive = (state: { videoState:\n  { segments: { [x: number]: { deleted: boolean; }; }; activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  !state.videoState.segments[state.videoState.activeSegmentIndex].deleted\nexport const selectSelectedWorkflowIndex = (state: { videoState:\n  { selectedWorkflowIndex: video[\"selectedWorkflowIndex\"]; }; }) =>\n  state.videoState.selectedWorkflowIndex\n\n// Selectors mainly pertaining to the information fetched from Opencast\nexport const selectVideoURL = (state: { videoState: { videoURLs: video[\"videoURLs\"] } }) => state.videoState.videoURLs\nexport const selectVideoCount = (state: { videoState: { videoCount: video[\"videoCount\"] } }) => state.videoState.videoCount\nexport const selectDuration = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration\nexport const selectDurationInSeconds = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration / 1000\nexport const selectTitle = (state: { videoState: { title: video[\"title\"] } }) => state.videoState.title\nexport const selectPresenters = (state: { videoState: { presenters: video[\"presenters\"] } }) => state.videoState.presenters\nexport const selectWorkflows = (state: { videoState: { workflows: video[\"workflows\"] } }) => state.videoState.workflows\n\nexport default videoSlice.reducer\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { httpRequestState } from '../types'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faToggleOn, faToggleOff, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectCurrentlyAtInSeconds, setIsPlaying, setCurrentlyAtInSeconds,\n  fetchVideoInformation, selectVideoURL, selectVideoCount, selectDurationInSeconds, selectTitle, selectPresenters\n} from '../redux/videoSlice'\n\nimport ReactPlayer from 'react-player'\n\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\n\n/**\n * Container for the videos and their controls\n * TODO: Complete fetching\n * TODO: Move fetching to a more central part of the app\n */\nconst Video: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const videoURLs = useSelector(selectVideoURL)\n  const videoCount = useSelector(selectVideoCount)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n  const error = useSelector((state: { videoState: { error: httpRequestState[\"error\"] } }) => state.videoState.error)\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (videoURLStatus === 'idle') {\n      dispatch(fetchVideoInformation())\n    }\n  }, [videoURLStatus, dispatch])\n\n  // Update based on current fetching status\n  let content\n  if (videoURLStatus === 'loading') {\n    content = <div className=\"loader\">Loading...</div>\n  } else if (videoURLStatus === 'success') {\n    content = \"\"//<div className=\"loader\">Success...</div>\n  } else if (videoURLStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n\n  // Initialize video players\n  const videoPlayers: JSX.Element[] = [];\n  for (let i = 0; i < videoCount; i++) {\n    // videoPlayers.push(<VideoPlayer key={i} url='https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4' />);\n    videoPlayers.push(<VideoPlayer key={i} url={videoURLs[i]} isMuted={i === 0}/>);\n  }\n\n  // Style\n  const videoAreaStyle = css({\n    display: 'flex',\n    width: 'auto',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '10px',\n    borderBottom: '1px solid #BBB',\n  });\n\n  const videoPlayerAreaStyle = css({\n    backgroundColor: 'black',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  });\n\n  return (\n    <div css={videoAreaStyle} title=\"Video Area\">\n      {content}\n      <VideoHeader />\n      <div css={videoPlayerAreaStyle} title=\"Video Player Area\">\n        {videoPlayers}\n      </div>\n      <VideoControls />\n    </div>\n  );\n};\n\n/**\n * A single video player\n * @param param0\n */\nconst VideoPlayer: React.FC<{url: string, isMuted: boolean}> = ({url, isMuted}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAtInSeconds)\n  const duration  = useSelector(selectDurationInSeconds)\n  const [ready, setReady] = useState(false);\n\n  // Init state variables\n  const ref = useRef<ReactPlayer>(null);\n\n  // Callback for when the video is playing\n  const onProgressCallback = (state: { played: number, playedSeconds: number, loaded: number, loadedSeconds:  number }) => {\n    // Only update redux if there was a substantial change\n    if (roundToDecimalPlace(currentlyAt, 3) !== roundToDecimalPlace(state.playedSeconds, 3)) {\n      dispatch(setCurrentlyAtInSeconds(state.playedSeconds))\n    }\n  }\n\n  // Callback for checking whether the video element is ready\n  const onReadyCallback = () => {\n    setReady(true);\n  }\n\n  const onEndedCallback = () => {\n    dispatch(setIsPlaying(false));\n    dispatch(setCurrentlyAtInSeconds(duration)); // It seems onEnded is called before the full duration is reached, so we set currentlyAt to the very end\n  }\n\n  useEffect(() => {\n    // Seek if the position in the video got changed externally\n    if(!isPlaying && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n    }\n  })\n\n  return (\n    <ReactPlayer url={url}\n      ref={ref}\n      width='100%'\n      height='auto'\n      playing={isPlaying}\n      muted={isMuted}\n      onProgress={onProgressCallback}\n      progressInterval={100}\n      onReady={onReadyCallback}\n      onEnded={onEndedCallback}\n    />\n  );\n\n  // return (\n  //   <div title=\"Video Player\">\n  //     <video width=\"320\" height=\"240\" controls ref={vidRef}>\n  //     <source src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4\" type=\"video/mp4\" />\n  //     Your browser does not support the video tag.\n  //     </video>\n  //   </div>\n  // );\n};\n\n/**\n * Contains controls for manipulating multiple video players at once\n * TODO: Add missing controls\n * TODO: Turn time display into a control\n */\nconst VideoControls: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n\n  const [isSkipping, setIsSkipping] = useState(false)\n\n  // Style\n  const videoControlStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n  })\n\n  const videoControlsRowStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n    gap: '50px',\n  })\n\n  const playButtonStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const skipToggleStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.05)',\n    },\n  })\n\n  return (\n    <div css={videoControlStyle} title=\"Video Controls\">\n      <div css={videoControlsRowStyle} title=\"Video Controls Top Row\">\n        <div style={{display: 'flex', gap: '10px'}}>\n          <FontAwesomeIcon icon={faEyeSlash} size=\"1x\" />\n          <FontAwesomeIcon css={skipToggleStyle} icon={isSkipping ? faToggleOn : faToggleOff} size=\"1x\"\n            onClick={() => setIsSkipping(!isSkipping)}\n          />\n        </div>\n        <FontAwesomeIcon css={playButtonStyle} icon={isPlaying ? faPause : faPlay} size=\"2x\"\n          onClick={() => dispatch(setIsPlaying(!isPlaying))}\n        />\n        <div css={{display: 'inline-block', width: '110px'}}>\n          {new Date((currentlyAt ? currentlyAt : 0)).toISOString().substr(11, 12)}\n        </div>\n      </div>\n      {/* <div css={videoControlsRowStyle} title=\"Video Controls Bottom Row\">\n\n\n      </div> */}\n    </div>\n  );\n}\n\n/**\n * Displays elements above the video, e.g. title\n */\nconst VideoHeader: React.FC<{}> = () => {\n  const title = useSelector(selectTitle)\n  const presenters = useSelector(selectPresenters)\n\n  const titleStyle = css({\n    fontSize: 'large'\n  })\n\n  return (\n    <div title=\"Video Area Header\">\n      <div css={titleStyle} title=\"Video Title\">{title}</div>\n      <div title=\"Video Presenters\">by {presenters.join(\", \")}</div>\n    </div>\n  );\n}\n\nexport default Video;\n","export default __webpack_public_path__ + \"static/media/placeholder_waveform.d23b087b.png\";","import React, { useState, useRef, useEffect } from 'react'\n\nimport Draggable from 'react-draggable';\n\nimport { css } from '@emotion/core'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment } from '../types'\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectSegments, selectActiveSegmentIndex, selectDuration,\n  setCurrentlyAt\n} from '../redux/videoSlice'\n\n// import { selectDuration, } from '../redux/videoURLSlice'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nimport useResizeObserver from \"use-resize-observer\";\n\nimport myImg from '../img/placeholder_waveform.png'\n\n/**\n * A container for visualizing the cutting of the video, as well as for controlling\n * the current position in the video\n * Its width corresponds to the duration of the video\n */\nconst Timeline: React.FC<{}> = () => {\n\n  const { ref, width = 1, } = useResizeObserver<HTMLDivElement>();\n\n  const timelineStyle = css({\n    position: 'relative' as 'relative',     // Need to set position for Draggable bounds to work\n    height: '250px',\n    width: '100%',\n    //backgroundImage: `url({myImg})`,\n  });\n\n  return (\n  <div ref={ref} css={timelineStyle} title=\"Timeline\">\n    <Scrubber timelineWidth={width}/>\n    <div css={{height: '230px'}}>\n      <img alt='waveform2' src={myImg} style={{position: \"absolute\" as \"absolute\", height: '230px', width: '100%', top: '10px'}}></img>\n      <SegmentsList timelineWidth={width}/>\n    </div>\n  </div>\n  );\n};\n\n/**\n * Displays and defines the current position in the video\n * TODO: Fix position fail when starting and then quickly stopping the video\n *       Possibly because state.playedSceonds in Video is faulty for small values\n * TODO: Fix timeline width changes\n * @param param0\n */\nconst Scrubber: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n\n  // Init state variables\n  const [controlledPosition, setControlledPosition] = useState({x: 0,y: 0,});\n  const [isGrabbed, setIsGrabbed] = useState(false)\n  const wasCurrentlyAtRef = useRef(0)\n\n  // Reposition scrubber when the current x position was changed externally\n  useEffect(() => {\n    if(currentlyAt !== wasCurrentlyAtRef.current) {\n      updateXPos();\n      wasCurrentlyAtRef.current = currentlyAt;\n    }\n  })\n\n  // // Reposition scrubber when the timeline width changes\n  // useEffect(() => {\n  //   setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [timelineWidth])\n\n  // Callback for when the scrubber gets dragged by the user\n  // const onControlledDrag = (e: any, position: any) => {\n  //   const {x, y} = position;\n  //   dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n  // };\n\n  // Callback for when the position changes by something other than dragging\n  const updateXPos = () => {\n    const y = controlledPosition.y;\n    setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y});\n  };\n\n  const onStartDrag = () => {\n    setIsGrabbed(true)\n  }\n\n  const onStopDrag = (e: any, position: any) => {\n    const {x, y} = position;\n    setControlledPosition({x, y});\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n\n    setIsGrabbed(false)\n  }\n\n  const scrubberStyle = css({\n    backgroundColor: 'rgba(255, 0, 0, 1)',\n    height: '250px',\n    width: '1px',\n    position: 'absolute' as 'absolute',\n    zIndex: 2,\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  });\n\n  const scrubberDragHandleStyle = css({\n    backgroundColor: 'rgba(255, 255, 255, 1)',\n    borderRadius: '10px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: isGrabbed ? \"grabbing\" : \"grab\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const scrubberDragHandleIconStyle = css({\n    transform: 'scaleY(1.5) rotate(90deg)',\n    padding: '5px',\n  })\n\n  return (\n    <Draggable\n      //onDrag={onControlledDrag}\n      onStart={onStartDrag}\n      onStop={onStopDrag}\n      axis=\"x\"\n      bounds=\"parent\"\n      position={controlledPosition}\n      disabled={isPlaying}\n      >\n      <div css={scrubberStyle} title=\"Scrubber\">\n        <div css= {scrubberDragHandleStyle} title=\"dragHandle\">\n          <FontAwesomeIcon css={scrubberDragHandleIconStyle} icon={faBars} size=\"1x\" />\n        </div>\n      </div>\n    </Draggable>\n  );\n};\n\n/**\n * Container responsible for rendering the segments that are created when cuting\n * TODO: Complete styling\n */\nconst SegmentsList: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const segments = useSelector(selectSegments)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)\n\n  /**\n   * Returns a background color based on whether the segment is to be deleted\n   * and whether the segment is currently active\n   */\n  const bgColor = (deleted: boolean, index: boolean) => {\n    if (!deleted && !index) {\n      return 'rgba(0, 0, 255, 0.4)'\n    } else if (deleted && !index) {\n      return 'rgba(255, 0, 0, 0.4)'\n    } else if (!deleted && index) {\n      return 'rgba(0, 0, 200, 0.4)'\n    } else if (deleted && index) {\n      return 'rgba(200, 0, 0, 0.4)'\n    }\n  }\n\n  // Render the individual segments\n  const renderedSegments = () => {\n    return (\n      segments.map( (segment: Segment, index: number) => (\n        <div key={segment.id} title=\"Segment\" css={{\n          backgroundColor: bgColor(segment.deleted, activeSegmentIndex === index),//segment.state === \"alive\" ? 'rgba(0, 0, 255, 0.4)' : 'rgba(255, 0, 0, 0.4)',\n          borderRadius: '5px',\n          borderStyle: 'solid',\n          borderColor: 'white',\n          borderWidth: '1px',\n          boxSizing: 'border-box',\n          width: ((segment.end - segment.start) / duration) * 100 + '%',\n          height: '230px',\n          zIndex: 1,\n        }}>\n        </div>\n      ))\n    );\n  }\n\n  const segmentsStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    paddingTop: '10px',\n  })\n\n  return (\n    <div css={segmentsStyle} title=\"Segments\">\n      {renderedSegments()}\n    </div>\n  );\n};\n\nexport default Timeline;\n","import React from \"react\";\n\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition,\n  faCut,\n  faQuestion,\n  faStepBackward,\n  faStepForward,\n  faTrash,\n  faTrashRestore,\n  } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  cut, markAsDeletedOrAlive, selectIsCurrentSegmentAlive, mergeLeft, mergeRight\n} from '../redux/videoSlice'\n\n/**\n * Defines the different actions a user can perform while in cutting mode\n */\nconst CuttingActions: React.FC<{}> = () => {\n\n  const cuttingStyle =  css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-between',\n    gap: '30px',\n  })\n\n  const blockStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    gap: '30px',\n  })\n\n  return (\n    <div css={cuttingStyle}>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faCut} actionName=\"Cut\" action={cut}/>\n          <MarkAsDeletedButton />\n          <CuttingActionsButton iconName={faStepBackward} actionName=\"Merge Left\" action={mergeLeft}/>\n          <CuttingActionsButton iconName={faStepForward} actionName=\"Merge Right\" action={mergeRight}/>\n        </div>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Reset changes\" action={null}/>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Undo\" action={null}/>\n        </div>\n    </div>\n  );\n};\n\n/**\n * CSS for cutting buttons\n */\nconst cuttingActionButtonStyle = {\n  padding: '16px',\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n};\n\n/**\n * A button representing a single action a user can take while cutting\n * TODO: Add functionality\n * TODO: Complete styling\n * @param param0\n */\nconst CuttingActionsButton: React.FC<{iconName: IconDefinition, actionName: string, action: any}> = ({iconName, actionName, action}) => {\n\n  const dispatch = useDispatch();\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]} title={actionName}\n      onClick={() => action ? dispatch(action()) : \"\"}>\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{actionName}</span>\n    </div>\n  );\n};\n\n/**\n * Button that changes its function based on context\n */\nconst MarkAsDeletedButton : React.FC<{}> = () => {\n\n  const dispatch = useDispatch();\n  const isCurrentSegmentAlive = useSelector(selectIsCurrentSegmentAlive)\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]} title={isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}\n      onClick={() => dispatch(markAsDeletedOrAlive())}>\n      <FontAwesomeIcon icon={isCurrentSegmentAlive ? faTrash : faTrashRestore} size=\"1x\" />\n      <div>{isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}</div>\n    </div>\n  );\n}\n\nexport default CuttingActions;\n","import { createSlice } from '@reduxjs/toolkit'\n\ninterface finish {\n  value: \"Save\" | \"Process\" | \"Abort\" | undefined,\n  pageNumber: number,\n}\n\nconst initialState: finish = {\n  value: \"Process\",\n  pageNumber: 0,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const finishSlice = createSlice({\n  name: 'finishState',\n  initialState,\n  reducers: {\n    setState: (state, action) => {\n      state.value = action.payload;\n    },\n    setPageNumber: (state, action) => {\n      state.pageNumber = action.payload;\n    }\n  }\n})\n\n// Export Actions\nexport const { setState, setPageNumber } = finishSlice.actions\n\n// Export Selectors\nexport const selectFinishState = (state: { finishState: { value: finish[\"value\"]; }; }) => state.finishState.value\nexport const selectPageNumber = (state: { finishState: { pageNumber: finish[\"pageNumber\"]; }; }) => state.finishState.pageNumber\n\nexport default finishSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSave, faFileExport, faTimesCircle, IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch } from 'react-redux';\nimport { setState, setPageNumber } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst FinishMenu : React.FC<{}> = () => {\n\n  return (\n    <>\n        <FinishMenuButton iconName={faSave} stateName=\"Save\"/>\n        <FinishMenuButton iconName={faFileExport} stateName=\"Process\"/>\n        <FinishMenuButton iconName={faTimesCircle} stateName=\"Abort\"/>\n    </>\n  );\n}\n\n/**\n * Buttons for the finish menu\n */\nconst FinishMenuButton: React.FC<{iconName: IconDefinition, stateName: string}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n\n  const mainMenuButtonStyle = css({\n    width: '200px',\n    height: '200px',\n    flexDirection: 'column' as const,\n  });\n\n  return (\n    <div css={[basicButtonStyle, mainMenuButtonStyle]} title={stateName}\n      onClick={() => {\n        dispatch(setState(stateName));\n        dispatch(setPageNumber(1))\n      }}>\n      <FontAwesomeIcon  icon={iconName} size=\"3x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\n\n\nexport default FinishMenu;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, setSelectedWorkflowIndex } from '../redux/videoSlice'\n\n/**\n * Allows the user to select a workflow\n */\nconst WorkflowSelection : React.FC<{}> = () => {\n\n  // Initialite redux states\n  const workflows = useSelector(selectWorkflows)\n\n  // Create workflow selection\n  const workflowButtons = () => {\n    return (\n      workflows.map( (workflow: any, index: number) => (\n        <WorkflowButton key={index} stateName={workflow.name} workflowIndex={index}/>\n      ))\n    );\n  }\n\n  const workflowStyle = css({\n    borderRight: '1px solid #BBB',\n    width: '350px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'left',\n    padding: '20px',\n    paddingRight: '40px',\n    gap: '30px',\n  })\n\n  return (\n    <div css={workflowStyle} title=\"Workflow Selection Area\">\n      <h2>Workflow Selection</h2>\n      {workflowButtons()}\n    </div>\n  );\n}\n\n/**\n * Clicking this button sets the associated workflow as selected\n * @param param0\n */\nconst WorkflowButton: React.FC<{stateName: string, workflowIndex: number}> = ({stateName, workflowIndex}) => {\n\n  const dispatch = useDispatch();\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const workflowButtonStyle = css({\n    backgroundColor: workflowIndex !== selectedWorkflowIndex ? 'snow' : 'lightblue',\n    padding: '16px',\n  });\n\n  return (\n    <div css={[basicButtonStyle,workflowButtonStyle]} title={\"Workflow Button for \"+stateName}\n      onClick={() =>\n        dispatch(setSelectedWorkflowIndex(workflowIndex))\n      }>\n      <span>{stateName}</span>\n    </div>\n  );\n}\n\nexport default WorkflowSelection;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { Segment, PostAndProcessEditArgument, httpRequestState } from '../types'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformationWithWorkflow = createAsyncThunk('video/postVideoInformationWithWorkflow', async (argument: PostAndProcessEditArgument) => {\n  const response = await client.post(`http://localhost:8081/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), worklows: argument.workflowID }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes and starting a workflow\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostAndProcessSlice = createSlice({\n  name: 'workflowPostAndProcessState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformationWithWorkflow.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\ninterface segmentAPI {\n  start: number,\n  end: number,\n  deleted: boolean,\n  selected: boolean,\n}\n\n// Convert a segment from how it is stored in redux into\n// a segment that can be send to Opencast\nconst convertSegments = (segments: Segment[]) => {\n  let newSegments: segmentAPI[] = []\n\n  segments.forEach(segment => {\n    newSegments.push({\n      start: segment.start,\n      end: segment.end,\n      deleted: segment.deleted,\n      selected: false,\n    })\n  });\n\n  return newSegments\n}\n\nexport const selectStatus = (state: { workflowPostAndProcessState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostAndProcessState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\n\nexport default workflowPostAndProcessSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\nimport { faSpinner, faDotCircle, faCheck, faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, selectSegments, } from '../redux/videoSlice'\nimport { postVideoInformationWithWorkflow, selectStatus, selectError } from '../redux/workflowPostAndProcessSlice'\n\nimport { PageButton } from './FinishContent'\n\n/**\n * Will eventually display settings based on the selected workflow index\n */\nconst WorkflowConfiguration : React.FC<{}> = () => {\n\n  const postAndProcessWorkflowStatus = useSelector(selectStatus);\n  const postAndProcessError = useSelector(selectError)\n\n  const workflowConfigurationStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  const errorBoxStyle = css({\n    ...(postAndProcessWorkflowStatus !== 'failed') && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  return (\n    <div css={workflowConfigurationStyle} title=\"Workflow Configuration Area\">\n      <h2>Workflow Configuration</h2>\n      <FontAwesomeIcon icon={faTools} size=\"10x\" />\n      Under Construction\n      <SaveAndProcessButton />\n      <div css={errorBoxStyle} title=\"Error Box\">\n        <span>An error has occured. Please wait a bit and try again. Details: </span><br />\n        {postAndProcessError}\n      </div>\n      <PageButton pageNumber={0} label=\"Back\" />\n    </div>\n  );\n\n}\n\n/**\n * Button that sends a post request to save current changes\n * and starts the selected workflow\n */\nconst SaveAndProcessButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const workflows = useSelector(selectWorkflows)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n  const segments = useSelector(selectSegments)\n  const workflowStatus = useSelector(selectStatus);\n\n  // Update based on current fetching status\n  let icon = faDotCircle\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n  }\n\n  const saveButtonStyle = css({\n    borderWidth: '1px',\n    borderColor: workflowStatus === 'failed' ? 'red' : 'green',\n    borderStyle: 'solid',\n    padding: '16px',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Process\"}\n      onClick={() =>\n        dispatch(postVideoInformationWithWorkflow({\n          segments: segments,\n          mediaPackageId: \"9bf8aec2-10f5-4c64-bfde-2752fa3a394d\",\n          workflowID: workflows[selectedWorkflowIndex],\n        }))\n      }>\n      <FontAwesomeIcon  icon={icon} size=\"1x\"/>\n      <span>{\"Start Processing\"}</span>\n    </div>\n  );\n}\n\nexport default WorkflowConfiguration;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { Segment, PostEditArgument, httpRequestState } from '../types'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformation = createAsyncThunk('video/postVideoInformation', async (argument: PostEditArgument) => {\n  const response = await client.post(`http://localhost:8081/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments) }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostSlice = createSlice({\n  name: 'workflowPostState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\ninterface segmentAPI {\n  start: number,\n  end: number,\n  deleted: boolean,\n  selected: boolean,\n}\n\n// Convert a segment from how it is stored in redux into\n// a segment that can be send to Opencast\nconst convertSegments = (segments: Segment[]) => {\n  let newSegments: segmentAPI[] = []\n\n  segments.forEach(segment => {\n    newSegments.push({\n      start: segment.start,\n      end: segment.end,\n      deleted: segment.deleted,\n      selected: false,\n    })\n  });\n\n  return newSegments\n}\n\nexport const selectStatus = (state: { workflowPostState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\nexport default workflowPostSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\ninterface abort {\n  value: boolean,\n}\n\nconst initialState: abort = {\n  value: false,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const abortSlice = createSlice({\n  name: 'abortState',\n  initialState,\n  reducers: {\n    setState: (state, action) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = abortSlice.actions\n\n// Export Selectors\nexport const selectAbortState = (state: { abortState: { value: abort[\"value\"] }; }) => state.abortState.value\n\nexport default abortSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport WorkflowSelection from \"./WorkflowSelection\";\nimport WorkflowConfiguration from \"./WorkflowConfiguration\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSpinner, faDotCircle, faCheck, faExclamationCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState, setPageNumber } from '../redux/finishSlice'\nimport { selectSegments } from '../redux/videoSlice'\nimport { postVideoInformation, selectStatus, selectError } from '../redux/workflowPostSlice'\nimport { setState as setAbortState } from '../redux/abortSlice'\n\n/**\n * Display content based on the state select in the finish menu\n */\nconst FinishContent : React.FC<{}> = () => {\n  return (\n    <>\n      <Save />\n      <Process />\n      <Abort />\n    </>\n  );\n}\n\n/**\n * Shown if the user wishes to save.\n * Informs the user about saving and displays a save button\n */\nconst Save : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const postWorkflowStatus = useSelector(selectStatus);\n  const postError = useSelector(selectError)\n\n  const saveStyle = css({\n    height: '100%',\n    display: finishState !== \"Save\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '20px',\n  })\n\n  const errorBoxStyle = css({\n    ...(postWorkflowStatus !== 'failed') && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  return (\n    <div css={saveStyle} title=\"Save Area\">\n      <span>\n        Save the changes you made, but the video will not be cut yet. <br />\n        To make Opencast cut the video, please select \"Process\". <br />\n        Doth thou truly wish tah save?\n      </span>\n      <SaveButton />\n      <div css={errorBoxStyle} title=\"Error Box\">\n        <span>An error has occured. Please wait a bit and try again. Details: </span><br />\n        {postError}<br />\n      </div>\n      <PageButton pageNumber={0} label=\"Back\" />\n    </div>\n  );\n}\n\n/**\n * Shown if the user wishes to process.\n * Informs the user about processing and displays workflow selection\n * and workflow configuration\n */\nconst Process : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const startWorkflowStyle = css({\n    height: '100%',\n    display: finishState !== \"Process\" ? 'none' : 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n  })\n  return (\n    <div css={startWorkflowStyle} title=\"Workflow Container\">\n      <WorkflowSelection />\n      <WorkflowConfiguration />\n    </div>\n  );\n}\n\n/**\n * Shown if the user wishes to abort.\n * Informs the user about aborting and displays abort button.\n */\nconst Abort : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const cancelStyle = css({\n    display: finishState !== \"Abort\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '20px',\n  })\n\n  return (\n    <div css={cancelStyle} title=\"Abort Area\">\n      <span>\n        Discard all the changes you made? They will be lost forever! <br />\n        Doth thou truly wish tah abort?\n      </span>\n      <AbortButton />\n      <PageButton pageNumber={0} label=\"Back\" />\n    </div>\n  );\n}\n\n/**\n * Button that sends a post request to save current changes\n */\nconst SaveButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const segments = useSelector(selectSegments)\n  const workflowStatus = useSelector(selectStatus);\n\n  // Update based on current fetching status\n  let icon = faDotCircle\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n  }\n\n  const saveButtonStyle = css({\n    width: '200px',\n    borderWidth: '1px',\n    borderColor: workflowStatus === 'failed' ? 'red' : 'green',\n    borderStyle: 'solid',\n    padding: '16px',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Save\"}\n      onClick={() =>\n        dispatch(postVideoInformation({\n          segments: segments,\n          mediaPackageId: \"9bf8aec2-10f5-4c64-bfde-2752fa3a394d\",\n        }))\n      }>\n      <FontAwesomeIcon  icon={icon} size=\"1x\"/>\n      <span>{\"Save\"}</span>\n    </div>\n  );\n}\n\n/**\n * Button that sets the app into an aborted state\n */\nconst AbortButton : React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const saveButtonStyle = css({\n    width: '200px',\n    borderWidth: '1px',\n    borderColor: 'red',\n    borderStyle: 'solid',\n    padding: '16px',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Abort Button\"}\n      onClick={() =>\n        dispatch(setAbortState(true))\n      }>\n      <span>{\"Abort\"}</span>\n    </div>\n  );\n}\n\n/**\n * Takes you to a different page\n */\nexport const PageButton : React.FC<{pageNumber: number, label: string}> = ({pageNumber, label}) => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const pageButtonStyle = css({\n    width: '200px',\n    borderWidth: '1px',\n    borderStyle: 'solid',\n    padding: '16px',\n  })\n\n  return (\n    <div css={[basicButtonStyle, pageButtonStyle]} title={label}\n      onClick={() =>\n        dispatch(setPageNumber(pageNumber))\n      }>\n      <span>{label}</span>\n    </div>\n  );\n}\n\nexport default FinishContent\n","import React from \"react\";\n\nimport FinishMenu from \"./FinishMenu\";\nimport FinishContent from \"./FinishContent\"\n\nimport { css } from '@emotion/core'\n\nimport { useSelector } from 'react-redux';\nimport { selectPageNumber } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst Finish : React.FC<{}> = () => {\n\n  const pageNumber = useSelector(selectPageNumber)\n\n  const FinishMenuStyle = css({\n    display: pageNumber !== 0 ? 'none' :'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-around',\n    alignItems: 'space-around',\n    padding: '20px',\n    gap: '30px',\n  })\n\n  const FinishContentStyle = css({\n    display: pageNumber !== 1 ? 'none' :'flex',\n    width: '100%',\n    height: '100%',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    alignItems: 'space-around',\n    padding: '20px',\n    gap: '30px',\n  })\n\n  return (\n    <div  title=\"Finish\">\n      <div css={FinishMenuStyle} >\n        <FinishMenu />\n      </div>\n      <div css={FinishContentStyle} >\n        <FinishContent />\n      </div>\n    </div>\n  );\n}\n\n\nexport default Finish;\n","import React from \"react\";\n\nimport Video from './Video';\nimport Timeline from './Timeline';\nimport CuttingActions from './CuttingActions';\nimport Finish from \"./Finish\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useSelector } from 'react-redux'\nimport { selectMainMenuState } from '../redux/mainMenuSlice'\n\nimport { MainMenuStateNames } from '../types'\n\n/**\n * A container for the main functionality\n * Shows different components depending on the state off the app\n */\nconst MainContent: React.FC<{}> = () => {\n\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  const cuttingStyle = css({\n    width: '100%',\n    display: mainMenuState !== MainMenuStateNames.cutting ? 'none' :'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    paddingLeft: '20px',\n  })\n\n  const saveProcessCancelStyle = css({\n    display: mainMenuState !== MainMenuStateNames.finish ? 'none' : 'flex',\n    width: '100%',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n  })\n\n  const defaultStyle = css({\n    display: (mainMenuState === MainMenuStateNames.cutting || mainMenuState === MainMenuStateNames.finish )\n              ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n     <div title=\"MainMenuContext\" css={{width: '100%'}}>\n      <div css={cuttingStyle} title=\"Cutting Container\">\n          <Video />\n          <CuttingActions />\n          <Timeline />\n      </div>\n      <div css={saveProcessCancelStyle} title=\"Workflow Container\">\n        <Finish />\n      </div>\n      <div css={defaultStyle}>\n        <FontAwesomeIcon icon={faTools} size=\"10x\" />\n        Under Construction\n      </div>\n     </div>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faTimesCircle, faQuestion, } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector } from 'react-redux';\nimport { selectDuration } from '../redux/videoSlice'\nimport { selectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\n/**\n * This page is to be displayed when the user is \"done\" with the editor\n * and should not be able to perfom any actions anymore\n * TODO: Improve state management somehow to avoid the possibility of an error case\n * TODO: Improve text\n * TODO: Add a button that closes the editor window/frame?\n */\nconst TheEnd : React.FC<{}> = () => {\n\n  // Init redux variables\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(selectStatus)\n  const duration = useSelector(selectDuration)\n\n  const icon = () => {\n    if (abortState) {\n      return faTimesCircle\n    } else if (postAndProcessState === \"success\") {\n      return faCheckCircle\n    } else {\n      return faQuestion\n    }\n  }\n\n  const text = () => {\n    if (abortState) {\n      return \"You really did it. All your changes are now lost forever. You can now continue doing whatever you want.\"\n    } else if (postAndProcessState === \"success\") {\n      return `Changes successfully saved to Opencast. Processing your changes may take up to\n              ${new Date((duration * 2)).toISOString().substr(11, 8)} hours.\n              You can now close the editor.`\n    } else {\n      return \"Now this is awkward. Something has gone very wrong.\"\n    }\n  }\n\n  const theEndStyle = css({\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n    <div css={theEndStyle} title=\"The last area\">\n      <FontAwesomeIcon icon={icon()} size=\"10x\" />\n      {text()}\n    </div>\n  );\n}\n\nexport default TheEnd","import React from \"react\";\n\nimport MainMenu from './MainMenu';\nimport MainContent from './MainContent';\nimport TheEnd from './TheEnd';\n\nimport { useSelector } from 'react-redux';\nimport { selectStatus as postAndProcessSelectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\nconst Body: React.FC<{}> = () => {\n\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(postAndProcessSelectStatus)\n\n  // If we're in a special state, display a special page\n  // Otherwise display the normal page\n  const main = () => {\n    if(abortState || postAndProcessState === \"success\") {\n      return (\n        <TheEnd />\n      );\n    } else {\n      return (\n        <div css={bodyStyle} title=\"Body\">\n          <MainMenu />\n          <MainContent />\n        </div>\n      );\n    }\n  }\n\n  const bodyStyle = {\n    display: 'flex',\n    flexDirection: 'row' as const,\n    height: '100%',\n  };\n\n  return (\n    <React.Fragment>\n      {main()}\n    </React.Fragment>\n  );\n};\n\nexport default Body;\n","import React from 'react';\nimport Body from './main/Body';\nimport { GlobalStyle } from './cssStyles'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport mainMenuStateReducer from './mainMenuSlice'\nimport finishStateReducer from './finishSlice'\nimport videoReducer from './videoSlice'\nimport workflowPostReducer from './workflowPostSlice'\nimport workflowPostAndProcessReducer from './workflowPostAndProcessSlice'\nimport abortReducer from './abortSlice'\n\nexport default configureStore({\n  reducer: {\n    mainMenuState: mainMenuStateReducer,\n    finishState: finishStateReducer,\n    videoState: videoReducer,\n    workflowPostState: workflowPostReducer,\n    workflowPostAndProcessState: workflowPostAndProcessReducer,\n    abortState: abortReducer,\n  }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}