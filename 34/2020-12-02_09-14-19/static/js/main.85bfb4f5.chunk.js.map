{"version":3,"sources":["redux/mainMenuSlice.ts","main/MainMenu.tsx","util/client.js","util/utilityFunctions.ts","redux/videoSlice.ts","main/Video.tsx","img/placeholder_waveform.png","main/Timeline.tsx","main/CuttingActions.tsx","redux/workflowPostSlice.ts","redux/workflowPostAndProcessSlice.ts","main/WorkflowSelection.tsx","main/WorkflowConfiguration.tsx","main/MainContent.tsx","main/Body.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["mainMenuSlice","createSlice","name","initialState","value","reducers","setState","state","action","payload","actions","selectMainMenuState","mainMenuState","MainMenuButton","iconName","stateName","dispatch","useDispatch","activeState","useSelector","mainMenuButtonStyle","backgroundColor","borderRadius","fontSize","width","height","cursor","transitionDuration","transitionProperty","transform","display","flexDirection","justifyContent","alignItems","textAlign","gap","css","title","onClick","icon","size","MainMenu","style","borderRight","flexShrink","padding","faFilm","faListUl","faPhotoVideo","faQuestion","client","endpoint","a","body","customConfig","headers","encoded","btoa","unescape","encodeURIComponent","authHeaders","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","roundToDecimalPlace","num","decimalPlace","decimalFactor","Math","pow","round","Number","EPSILON","isPlaying","currentlyAt","segments","id","nanoid","start","end","deleted","activeSegmentIndex","selectedWorkflowIndex","videoURLs","videoCount","duration","presenters","workflows","status","error","fetchVideoInformation","createAsyncThunk","videoSlice","setIsPlaying","setCurrentlyAt","updateActiveSegment","setCurrentlyAtInSeconds","addSegment","push","cut","segmentA","segmentB","splice","markAsDeletedOrAlive","setSelectedWorkflowIndex","extraReducers","builder","addCase","pending","fulfilled","previews","reduce","o","uri","length","parseSegments","sort","n1","n2","displayOrder","rejected","findIndex","element","newSegments","forEach","selectIsPlaying","videoState","selectCurrentlyAt","selectCurrentlyAtInSeconds","selectSegments","selectActiveSegmentIndex","selectIsCurrentSegmentAlive","selectSelectedWorkflowIndex","selectVideoURL","selectVideoCount","selectDuration","selectDurationInSeconds","selectTitle","selectPresenters","selectWorkflows","VideoPlayer","url","isMuted","useState","ready","setReady","ref","useRef","useEffect","current","seekTo","playing","muted","onProgress","playedSeconds","progressInterval","onReady","onEnded","VideoControls","isSkipping","setIsSkipping","videoControlStyle","videoControlsRowStyle","playButtonStyle","skipToggleStyle","faEyeSlash","faToggleOn","faToggleOff","faPause","faPlay","Date","toISOString","substr","VideoHeader","titleStyle","join","Video","content","videoURLStatus","className","videoPlayers","i","key","videoAreaStyle","flex","borderBottom","videoPlayerAreaStyle","Scrubber","timelineWidth","x","y","controlledPosition","setControlledPosition","isGrabbed","setIsGrabbed","wasCurrentlyAtRef","updateXPos","scrubberStyle","position","zIndex","boxShadow","scrubberDragHandleStyle","scrubberDragHandleIconStyle","onStart","onStop","e","axis","bounds","disabled","faBars","SegmentsList","bgColor","index","segmentsStyle","paddingTop","map","segment","borderStyle","borderColor","borderWidth","boxSizing","Timeline","useResizeObserver","timelineStyle","alt","src","myImg","top","CuttingActionsButton","actionName","alignContent","MarkAsDeletedButton","isCurrentSegmentAlive","faTrash","faTrashRestore","CuttingActions","cuttingStyle","blockStyle","faCut","faStepBackward","faStepForward","postVideoInformation","argument","mediaPackageId","convertSegments","workflowPostSlice","selected","postVideoInformationWithWorkflow","worklows","workflowID","WorkflowButton","workflowIndex","workflowButtonStyle","SaveButton","workflowStatus","workflowPostState","faDotCircle","faSpinner","faCheck","faTimes","saveButtonStyle","color","SaveAndProcessButton","workflowPostAndProcessState","WorkflowSelection","postWorkflowStatus","postAndProcessWorkflowStatus","postError","postAndProcessError","workflowStyle","paddingRight","saveButtonAreaStyle","errorBoxStyle","fontWeight","workflow","WorkflowConfiguration","workflowConfigurationStyle","faTools","MainContent","startWorkflowStyle","defaultStyle","Body","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mainMenuStateReducer","videoReducer","workflowPostReducer","workflowPostAndProcessReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.85bfb4f5.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\n/**\n * Slice for the main menu state\n */\nexport const mainMenuSlice = createSlice({\n  name: 'mainMenuState',\n  initialState: {\n    value: \"Cutting\"\n  },\n  reducers: {\n    setState: (state, action) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = mainMenuSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectMainMenuState = (state: { mainMenuState: { value: any; }; }) => state.mainMenuState.value\n\nexport default mainMenuSlice.reducer\n","import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm, faListUl, faPhotoVideo, faQuestion, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  setState, selectMainMenuState\n} from '../redux/mainMenuSlice'\n\n/**\n * A container for selecting the functionality shown in the main part of the app\n */\nconst MainMenu: React.FC<{}> = () => {\n\n  const mainMenuStyle = {\n    backgroundColor: 'snow',\n    borderRight: '1px solid #BBB',\n    width: '100px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    flexShrink: 0,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  };\n\n  return (\n    <div style={mainMenuStyle} title=\"MainMenu\">\n      <MainMenuButton iconName={faFilm} stateName=\"Cutting\"/>\n      <MainMenuButton iconName={faListUl} stateName=\"Metadata\"/>\n      <MainMenuButton iconName={faPhotoVideo} stateName=\"Thumbnail\"/>\n      <MainMenuButton iconName={faQuestion} stateName=\"Start Workflow\"/>\n    </div>\n  );\n};\n\n/**\n * A button to set the state of the app\n * TODO: Complete Styling\n * @param param0\n */\nconst MainMenuButton: React.FC<{iconName: IconDefinition, stateName: string}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectMainMenuState)\n\n  const mainMenuButtonStyle = {\n    backgroundColor: 'snow',\n    borderRadius: '10px',\n    fontSize: 'medium',\n    width: '100%',\n    height: '100px',\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    //boxShadow: isActive ? 'inset 0 0 5px #000000' : '0',\n    ...(activeState === stateName) && {\n      backgroundColor: 'lightblue',\n    },\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    textAlign: 'center' as const,\n    gap: '10px',\n  };\n\n  return (\n    <div css={mainMenuButtonStyle} title={stateName}\n      onClick={() => {\n        dispatch(setState(stateName));\n      }}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\nexport default MainMenu;\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\n/**\n * Client I stole this form a react tutorial\n */\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const encoded = btoa(unescape(encodeURIComponent(\n    \"admin:opencast\"\n  )));\n  const authHeaders = { 'Authorization': `Basic ${encoded}` };\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n      ...authHeaders,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","export const roundToDecimalPlace = (num: number, decimalPlace: number) => {\n  let decimalFactor = Math.pow(10, decimalPlace)\n  return Math.round((num + Number.EPSILON) * decimalFactor) / decimalFactor\n}\n","import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\nimport { Segment }  from '../types'\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\nimport { WritableDraft } from 'immer/dist/internal';\n\nexport interface video {\n  isPlaying: boolean,\n  currentlyAt: number,   // Position in the video in milliseconds\n  segments: Segment[],\n  activeSegmentIndex: number,\n  selectedWorkflowIndex: number,\n\n  videoURLs: string[],\n  videoCount: number,\n  duration: number,   // Video duration in milliseconds\n  title: string,\n  presenters: string[],\n  workflows: string[],\n\n  status: string,\n  error: any,\n}\n\nconst initialState: video = {\n  isPlaying: false,\n  currentlyAt: 0,   // Position in the video in milliseconds\n  segments: [{id: nanoid(), start: 0, end: 1, deleted: false}],\n  activeSegmentIndex: 0,\n  selectedWorkflowIndex: 0,\n\n  videoURLs: [],\n  videoCount: 0,\n  duration: 0,\n  title: '',\n  presenters: [],\n  workflows: [],\n\n  status: 'idle',\n  error: null,\n}\n\nexport const fetchVideoInformation = createAsyncThunk('video/fetchVideoInformation', async () => {\n  const response = await client.get('https://legacy.opencast.org/admin-ng/tools/ID-dual-stream-demo/editor.json')\n  return response\n})\n\n/**\n * Slice for the state of the \"video\"\n * Treats the multitude of videos that may exist as one video\n * TODO: Find a way to init the segments array with a starting segment\n */\nexport const videoSlice = createSlice({\n  name: 'videoState',\n  initialState,\n  reducers: {\n    setIsPlaying: (state, action) => {\n      state.isPlaying = action.payload;\n    },\n    setCurrentlyAt: (state, action) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload, 3);\n\n      updateActiveSegment(state);\n    },\n    setCurrentlyAtInSeconds: (state, action) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload * 1000, 3);\n\n      updateActiveSegment(state);\n    },\n    addSegment: (state, action) => {\n      state.segments.push(action.payload)\n    },\n    cut: (state) => {\n      // If we're exactly between two segments, we can't split the current segment\n      if (state.segments[state.activeSegmentIndex].start === state.currentlyAt ||\n          state.segments[state.activeSegmentIndex].end === state.currentlyAt ) {\n        return state;\n      }\n\n      // Make two (new) segments out of it\n      let segmentA : Segment =  {id: nanoid(),\n        start: state.segments[state.activeSegmentIndex].start,\n        end: state.currentlyAt,\n        deleted: true}\n      let segmentB : Segment =  {id: nanoid(),\n        start: state.currentlyAt,\n        end: state.segments[state.activeSegmentIndex].end,\n        deleted: true}\n\n      // Add the new segments and remove the old one\n      state.segments.splice(state.activeSegmentIndex, 1, segmentA, segmentB);\n    },\n    markAsDeletedOrAlive: (state) => {\n      state.segments[state.activeSegmentIndex].deleted = !state.segments[state.activeSegmentIndex].deleted\n    },\n    setSelectedWorkflowIndex: (state, action) => {\n      state.selectedWorkflowIndex = action.payload\n    }\n  },\n  // For Async Requests\n  extraReducers: builder => {\n    builder.addCase(\n      fetchVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n        // eslint-disable-next-line no-sequences\n        state.videoURLs = action.payload.previews.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        state.videoCount = action.payload.previews.length\n        state.duration = action.payload.duration\n        state.title = action.payload.title\n        state.presenters = action.payload.presenters\n        state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n          if (n1.displayOrder > n2.displayOrder) { return 1; }\n          if (n1.displayOrder < n2.displayOrder) { return -1; }\n          return 0;\n        });\n    })\n    builder.addCase(\n      fetchVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\nconst updateActiveSegment = (state: WritableDraft<video>) => {\n  state.activeSegmentIndex = state.segments.findIndex(element =>\n    element.start <= state.currentlyAt && element.end >= state.currentlyAt)\n  // TODO: Proper error handling. Rewrite function?\n  if(state.activeSegmentIndex < 0) {\n    state.activeSegmentIndex = 0\n  }\n}\n\n// Helper Function for testing with current/old editor API\nconst parseSegments = (segments: any, duration: number) => {\n  let newSegments : Segment[] = []\n\n  if (segments.length === 0) {\n    newSegments.push({id: nanoid(), start: 0, end: duration, deleted: false})\n  }\n\n  segments.forEach((element: { start: any; end: any; deleted: any; }) => {\n    newSegments.push({id: nanoid(), start: element.start, end: element.end, deleted: element.deleted})\n  });\n  return newSegments\n}\n\nexport const { setIsPlaying, setCurrentlyAt, setCurrentlyAtInSeconds, addSegment, cut, markAsDeletedOrAlive,\n  setSelectedWorkflowIndex } = videoSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIsPlaying = (state: { videoState: { isPlaying: any; }; }) => state.videoState.isPlaying\nexport const selectCurrentlyAt = (state: { videoState: { currentlyAt: any; }; }) => state.videoState.currentlyAt\nexport const selectCurrentlyAtInSeconds = (state: { videoState: { currentlyAt: any; }; }) => state.videoState.currentlyAt / 1000\nexport const selectSegments = (state: { videoState: { segments: any } }) => state.videoState.segments\nexport const selectActiveSegmentIndex = (state: { videoState: { activeSegmentIndex: any; }; }) => state.videoState.activeSegmentIndex\nexport const selectIsCurrentSegmentAlive = (state: { videoState: { segments: { [x: number]: { deleted: boolean; }; }; activeSegmentIndex: number; }; }) => \n!state.videoState.segments[state.videoState.activeSegmentIndex].deleted\nexport const selectSelectedWorkflowIndex = (state: { videoState: { selectedWorkflowIndex: any; }; }) => state.videoState.selectedWorkflowIndex\n\nexport const selectVideoURL = (state: { videoState: { videoURLs: string[] } }) => state.videoState.videoURLs\nexport const selectVideoCount = (state: { videoState: { videoCount: number } }) => state.videoState.videoCount\nexport const selectDuration = (state: { videoState: { duration: number } }) => state.videoState.duration\nexport const selectDurationInSeconds = (state: { videoState: { duration: number } }) => state.videoState.duration / 1000\nexport const selectTitle = (state: { videoState: { title: string } }) => state.videoState.title\nexport const selectPresenters = (state: { videoState: { presenters: string[] } }) => state.videoState.presenters\nexport const selectWorkflows = (state: { videoState: { workflows: string[] } }) => state.videoState.workflows\n\nexport default videoSlice.reducer\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faToggleOn, faToggleOff, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectCurrentlyAtInSeconds, setIsPlaying, setCurrentlyAtInSeconds,\n  fetchVideoInformation, selectVideoURL, selectVideoCount, selectDurationInSeconds, selectTitle, selectPresenters\n} from '../redux/videoSlice'\n\nimport ReactPlayer from 'react-player'\n\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\n\n/**\n * Container for the videos and their controls\n * TODO: Complete fetching\n * TODO: Move fetching to a more central part of the app\n */\nconst Video: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const videoURLs = useSelector(selectVideoURL)\n  const videoCount = useSelector(selectVideoCount)\n  const videoURLStatus = useSelector((state: { videoState: { status: string } }) => state.videoState.status);\n  const error = useSelector((state: { videoState: { error: any } }) => state.videoState.error)\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (videoURLStatus === 'idle') {\n      dispatch(fetchVideoInformation())\n    }\n  }, [videoURLStatus, dispatch])\n\n  // Update based on current fetching status\n  let content\n  if (videoURLStatus === 'loading') {\n    content = <div className=\"loader\">Loading...</div>\n  } else if (videoURLStatus === 'success') {\n    content = \"\"//<div className=\"loader\">Success...</div>\n  } else if (videoURLStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n\n  // Initialize video players\n  const videoPlayers: JSX.Element[] = [];\n  for (let i = 0; i < videoCount; i++) {\n    // videoPlayers.push(<VideoPlayer key={i} url='https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4' />);\n    videoPlayers.push(<VideoPlayer key={i} url={videoURLs[i]} isMuted={i === 0}/>);\n  }\n\n  // Style\n  const videoAreaStyle = css({\n    backgroundColor: 'snow',\n    display: 'flex',\n    width: 'auto',\n    flex: '7',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '10px',\n    borderBottom: '1px solid #BBB',\n  });\n\n  const videoPlayerAreaStyle = css({\n    backgroundColor: 'black',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  });\n\n  return (\n    <div css={videoAreaStyle} title=\"Video Area\">\n      {content}\n      <VideoHeader />\n      <div css={videoPlayerAreaStyle} title=\"Video Player Area\">\n        {videoPlayers}\n      </div>\n      <VideoControls />\n    </div>\n  );\n};\n\n/**\n * A single video player\n * @param param0\n */\nconst VideoPlayer: React.FC<{url: string, isMuted: boolean}> = ({url, isMuted}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAtInSeconds)\n  const duration  = useSelector(selectDurationInSeconds)\n  const [ready, setReady] = useState(false);\n\n  // Init state variables\n  const ref = useRef<ReactPlayer>(null);\n\n  // Callback for when the video is playing\n  const onProgressCallback = (state: { played: number, playedSeconds: number, loaded: number, loadedSeconds:  number }) => {\n    // Only update redux if there was a substantial change\n    if (roundToDecimalPlace(currentlyAt, 3) !== roundToDecimalPlace(state.playedSeconds, 3)) {\n      dispatch(setCurrentlyAtInSeconds(state.playedSeconds))\n    }\n  }\n\n  // Callback for checking whether the video element is ready\n  const onReadyCallback = () => {\n    setReady(true);\n  }\n\n  const onEndedCallback = () => {\n    dispatch(setIsPlaying(false));\n    dispatch(setCurrentlyAtInSeconds(duration)); // It seems onEnded is called before the full duration is reached, so we set currentlyAt to the very end\n  }\n\n  useEffect(() => {\n    // Seek if the position in the video got changed externally\n    if(!isPlaying && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n    }\n  })\n\n  return (\n    <ReactPlayer url={url}\n      ref={ref}\n      width='100%'\n      height='auto'\n      playing={isPlaying}\n      muted={isMuted}\n      onProgress={onProgressCallback}\n      progressInterval={100}\n      onReady={onReadyCallback}\n      onEnded={onEndedCallback}\n    />\n  );\n\n  // return (\n  //   <div title=\"Video Player\">\n  //     <video width=\"320\" height=\"240\" controls ref={vidRef}>\n  //     <source src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4\" type=\"video/mp4\" />\n  //     Your browser does not support the video tag.\n  //     </video>\n  //   </div>\n  // );\n};\n\n/**\n * Contains controls for manipulating multiple video players at once\n * TODO: Add missing controls\n * TODO: Turn time display into a control\n */\nconst VideoControls: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n\n  const [isSkipping, setIsSkipping] = useState(false)\n\n  // Style\n  const videoControlStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n  })\n\n  const videoControlsRowStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n    gap: '50px',\n  })\n\n  const playButtonStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const skipToggleStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.05)',\n    },\n  })\n\n  return (\n    <div css={videoControlStyle} title=\"Video Controls\">\n      <div css={videoControlsRowStyle} title=\"Video Controls Top Row\">\n        <div style={{display: 'flex', gap: '10px'}}>\n          <FontAwesomeIcon icon={faEyeSlash} size=\"1x\" />\n          <FontAwesomeIcon css={skipToggleStyle} icon={isSkipping ? faToggleOn : faToggleOff} size=\"1x\"\n            onClick={() => setIsSkipping(!isSkipping)}\n          />\n        </div>\n        <FontAwesomeIcon css={playButtonStyle} icon={isPlaying ? faPause : faPlay} size=\"2x\"\n          onClick={() => dispatch(setIsPlaying(!isPlaying))}\n        />\n        <div css={{display: 'inline-block', width: '110px'}}>\n          {new Date((currentlyAt ? currentlyAt : 0)).toISOString().substr(11, 12)}\n        </div>\n      </div>\n      {/* <div css={videoControlsRowStyle} title=\"Video Controls Bottom Row\">\n\n\n      </div> */}\n    </div>\n  );\n}\n\n/**\n * Displays elements above the video, e.g. title\n */\nconst VideoHeader: React.FC<{}> = () => {\n  const title = useSelector(selectTitle)\n  const presenters = useSelector(selectPresenters)\n\n  const titleStyle = css({\n    fontSize: 'large'\n  })\n\n  return (\n    <div title=\"Video Area Header\">\n      <div css={titleStyle} title=\"Video Title\">{title}</div>\n      <div title=\"Video Presenters\">by {presenters.join(\", \")}</div>\n    </div>\n  );\n}\n\nexport default Video;\n","export default __webpack_public_path__ + \"static/media/placeholder_waveform.d23b087b.png\";","import React, { useState, useRef, useEffect } from 'react'\n\nimport Draggable from 'react-draggable';\n\nimport { css } from '@emotion/core'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment } from '../types'\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectSegments, selectActiveSegmentIndex, selectDuration,\n  setCurrentlyAt\n} from '../redux/videoSlice'\n\n// import { selectDuration, } from '../redux/videoURLSlice'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nimport useResizeObserver from \"use-resize-observer\";\n\nimport myImg from '../img/placeholder_waveform.png'\n\n/**\n * A container for visualizing the cutting of the video, as well as for controlling\n * the current position in the video\n * Its width corresponds to the duration of the video\n */\nconst Timeline: React.FC<{}> = () => {\n\n  const { ref, width = 1, } = useResizeObserver<HTMLDivElement>();\n\n  const timelineStyle = css({\n    position: 'relative' as 'relative',     // Need to set position for Draggable bounds to work\n    backgroundColor: 'snow',\n    height: '250px',\n    width: '100%',\n    //backgroundImage: `url({myImg})`,\n  });\n\n  return (\n  <div ref={ref} css={timelineStyle} title=\"Timeline\">\n    <Scrubber timelineWidth={width}/>\n    <div css={{height: '230px'}}>\n      <img alt='waveform2' src={myImg} style={{position: \"absolute\" as \"absolute\", height: '230px', width: '100%', top: '10px'}}></img>\n      <SegmentsList timelineWidth={width}/>\n    </div>\n  </div>\n  );\n};\n\n/**\n * Displays and defines the current position in the video\n * TODO: Fix position fail when starting and then quickly stopping the video\n *       Possibly because state.playedSceonds in Video is faulty for small values\n * TODO: Fix timeline width changes\n * @param param0\n */\nconst Scrubber: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n\n  // Init state variables\n  const [controlledPosition, setControlledPosition] = useState({x: 0,y: 0,});\n  const [isGrabbed, setIsGrabbed] = useState(false)\n  const wasCurrentlyAtRef = useRef(0)\n\n  // Reposition scrubber when the current x position was changed externally\n  useEffect(() => {\n    if(currentlyAt !== wasCurrentlyAtRef.current) {\n      updateXPos();\n      wasCurrentlyAtRef.current = currentlyAt;\n    }\n  })\n\n  // // Reposition scrubber when the timeline width changes\n  // useEffect(() => {\n  //   setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [timelineWidth])\n\n  // Callback for when the scrubber gets dragged by the user\n  // const onControlledDrag = (e: any, position: any) => {\n  //   const {x, y} = position;\n  //   dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n  // };\n\n  // Callback for when the position changes by something other than dragging\n  const updateXPos = () => {\n    const y = controlledPosition.y;\n    setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y});\n  };\n\n  const onStartDrag = () => {\n    setIsGrabbed(true)\n  }\n\n  const onStopDrag = (e: any, position: any) => {\n    const {x, y} = position;\n    setControlledPosition({x, y});\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n\n    setIsGrabbed(false)\n  }\n\n  const scrubberStyle = css({\n    backgroundColor: 'rgba(255, 0, 0, 1)',\n    height: '250px',\n    width: '1px',\n    position: 'absolute' as 'absolute',\n    zIndex: 2,\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  });\n\n  const scrubberDragHandleStyle = css({\n    backgroundColor: 'rgba(255, 255, 255, 1)',\n    borderRadius: '10px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: isGrabbed ? \"grabbing\" : \"grab\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const scrubberDragHandleIconStyle = css({\n    transform: 'scaleY(1.5) rotate(90deg)',\n    padding: '5px',\n  })\n\n  return (\n    <Draggable\n      //onDrag={onControlledDrag}\n      onStart={onStartDrag}\n      onStop={onStopDrag}\n      axis=\"x\"\n      bounds=\"parent\"\n      position={controlledPosition}\n      disabled={isPlaying}\n      >\n      <div css={scrubberStyle} title=\"Scrubber\">\n        <div css= {scrubberDragHandleStyle} title=\"dragHandle\">\n          <FontAwesomeIcon css={scrubberDragHandleIconStyle} icon={faBars} size=\"1x\" />\n        </div>\n      </div>\n    </Draggable>\n  );\n};\n\n/**\n * Container responsible for rendering the segments that are created when cuting\n * TODO: Complete styling\n */\nconst SegmentsList: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const segments = useSelector(selectSegments)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)\n\n  /**\n   * Returns a background color based on whether the segment is to be deleted\n   * and whether the segment is currently active\n   */\n  const bgColor = (deleted: boolean, index: boolean) => {\n    if (!deleted && !index) {\n      return 'rgba(0, 0, 255, 0.4)'\n    } else if (deleted && !index) {\n      return 'rgba(255, 0, 0, 0.4)'\n    } else if (!deleted && index) {\n      return 'rgba(0, 0, 200, 0.4)'\n    } else if (deleted && index) {\n      return 'rgba(200, 0, 0, 0.4)'\n    }\n  }\n\n  // Render the individual segments\n  const renderedSegments = () => {\n    return (\n      segments.map( (segment: Segment, index: number) => (\n        <div key={segment.id} title=\"Segment\" css={{\n          backgroundColor: bgColor(segment.deleted, activeSegmentIndex === index),//segment.state === \"alive\" ? 'rgba(0, 0, 255, 0.4)' : 'rgba(255, 0, 0, 0.4)',\n          borderRadius: '5px',\n          borderStyle: 'solid',\n          borderColor: 'white',\n          borderWidth: '1px',\n          boxSizing: 'border-box',\n          width: ((segment.end - segment.start) / duration) * 100 + '%',\n          height: '230px',\n          zIndex: 1,\n        }}>\n        </div>\n      ))\n    );\n  }\n\n  const segmentsStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    paddingTop: '10px',\n  })\n\n  return (\n    <div css={segmentsStyle} title=\"Segments\">\n      {renderedSegments()}\n    </div>\n  );\n};\n\nexport default Timeline;\n","import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition,\n  faCut,\n  faQuestion,\n  faStepBackward,\n  faStepForward,\n  faTrash,\n  faTrashRestore,\n  } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  cut, markAsDeletedOrAlive, selectIsCurrentSegmentAlive\n} from '../redux/videoSlice'\n\n/**\n * Defines the different actions a user can perform while in cutting mode\n */\nconst CuttingActions: React.FC<{}> = () => {\n\n  const cuttingStyle =  css({\n    backgroundColor: 'snow',\n    flex: '3',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-between',\n    padding: '00px',\n    gap: '30px',\n  })\n\n  // const cuttingActionsStyle = css({\n  //   backgroundColor: 'snow',\n  //   flex: '3',\n  //   display: 'flex',\n  //   flexDirection: 'row' as const,\n  //   flexWrap: 'wrap' as const,\n  //   justifyContent: 'space-around',\n  //   alignContent: 'top',\n  //   gap: '30px',\n  // });\n\n  const blockStyle = css({\n    backgroundColor: 'snow',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    gap: '30px',\n  })\n\n  return (\n    <div css={cuttingStyle}>\n      {/* <div css={cuttingActionsStyle} title=\"CuttingActions\"> */}\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faCut} actionName=\"Cut\" action={cut}/>\n          {/* <CuttingActionsButton iconName={faTrash} actionName=\"Mark as Deleted\" action={markAsDeletedOrAlive}/> */}\n          <MarkAsDeletedButton />\n          <CuttingActionsButton iconName={faStepBackward} actionName=\"Merge Left\" action={null}/>\n          <CuttingActionsButton iconName={faStepForward} actionName=\"Merge Right\" action={null}/>\n        </div>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Reset changes\" action={null}/>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Undo\" action={null}/>\n        </div>\n      {/* </div> */}\n    </div>\n  );\n};\n\n/**\n * A button representing a single action a user can take while cutting\n * TODO: Add functionality\n * TODO: Complete styling\n * @param param0\n */\nconst CuttingActionsButton: React.FC<{iconName: IconDefinition, actionName: string, action: any}> = ({iconName, actionName, action}) => {\n\n  const dispatch = useDispatch();\n\n  const cuttingActionButtonStyle = {\n    backgroundColor: 'snow',\n    borderRadius: '10px',\n    //flex: 1,\n    fontSize: 'medium',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: \"pointer\",\n    justifyContent: 'center',\n    alignContent: 'center',\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n    display: 'flex',\n    alignItems: 'center',\n    gap: '10px',\n    textAlign: 'center' as const,\n  };\n\n  return (\n    <div css={cuttingActionButtonStyle} title={actionName} onClick={() => action ? dispatch(action()) : \"\"}>\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{actionName}</span>\n    </div>\n  );\n};\n\nconst MarkAsDeletedButton : React.FC<{}> = () => {\n\n  const dispatch = useDispatch();\n  // const isCurrentSegmentActive = useSelector(\n  //   (state: { videoState: { segments: { [x: number]: { isAlive: boolean; }; }; activeSegmentIndex: number; }; }) => \n  //   state.videoState.segments[state.videoState.activeSegmentIndex].isAlive\n  // );\n  const isCurrentSegmentAlive = useSelector(selectIsCurrentSegmentAlive)\n\n  const cuttingActionButtonStyle = {\n    backgroundColor: 'snow',\n    borderRadius: '10px',\n    //flex: 1,\n    fontSize: 'medium',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: \"pointer\",\n    justifyContent: 'center',\n    alignContent: 'center',\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n    display: 'flex',\n    alignItems: 'center',\n    gap: '10px',\n    textAlign: 'center' as const,\n  };\n\n  return (\n    <div css={cuttingActionButtonStyle} title={isCurrentSegmentAlive ? \"Delete\" : \"Restore\"} \n      onClick={() => dispatch(markAsDeletedOrAlive())}>\n      <FontAwesomeIcon icon={isCurrentSegmentAlive ? faTrash : faTrashRestore} size=\"1x\" />\n      <div>{isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}</div>\n    </div>\n  );\n}\n\nexport default CuttingActions;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { Segment, PostEditArgument } from '../types'\n\nexport interface request {\n  status: string,\n  error: any,\n}\n\nconst initialState: request = {\n  status: 'idle',\n  error: null,\n}\n\nexport const postVideoInformation = createAsyncThunk('video/postVideoInformation', async (argument: PostEditArgument) => {\n  const response = await client.post(`http://localhost:8080/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments) }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostSlice = createSlice({\n  name: 'workflowPostState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\ninterface segmentAPI {\n  start: number,\n  end: number,\n  deleted: boolean,\n  selected: boolean,\n}\n\n// Convert a segment from how it is stored in redux into\n// a segment that can be send to Opencast\nconst convertSegments = (segments: Segment[]) => {\n  let newSegments: segmentAPI[] = []\n\n  segments.forEach(segment => {\n    newSegments.push({\n      start: segment.start,\n      end: segment.end,\n      deleted: segment.deleted,\n      selected: false,\n    })\n  });\n\n  return newSegments\n}\n\nexport default workflowPostSlice.reducer\n\n\n\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { Segment, PostAndProcessEditArgument } from '../types'\n\nexport interface request {\n  status: string,\n  error: any,\n}\n\nconst initialState: request = {\n  status: 'idle',\n  error: null,\n}\n\nexport const postVideoInformationWithWorkflow = createAsyncThunk('video/postVideoInformationWithWorkflow', async (argument: PostAndProcessEditArgument) => {\n  const response = await client.post(`http://localhost:8080/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), worklows: argument.workflowID }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes and starting a workflow\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostSlice = createSlice({\n  name: 'workflowPostAndProcessState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformationWithWorkflow.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\ninterface segmentAPI {\n  start: number,\n  end: number,\n  deleted: boolean,\n  selected: boolean,\n}\n\n// Convert a segment from how it is stored in redux into\n// a segment that can be send to Opencast\nconst convertSegments = (segments: Segment[]) => {\n  let newSegments: segmentAPI[] = []\n\n  segments.forEach(segment => {\n    newSegments.push({\n      start: segment.start,\n      end: segment.end,\n      deleted: segment.deleted,\n      selected: false,\n    })\n  });\n\n  return newSegments\n}\n\nexport default workflowPostSlice.reducer\n\n\n\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner, faDotCircle, faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectWorkflows, selectSelectedWorkflowIndex, setSelectedWorkflowIndex, selectSegments,\n} from '../redux/videoSlice'\nimport {\n  postVideoInformation\n} from '../redux/workflowPostSlice'\nimport {\n  postVideoInformationWithWorkflow\n} from '../redux/workflowPostAndProcessSlice'\n\n/**\n * Allows the user to select a workflow\n * Allows the user to save his current changes and start a workflow\n */\nconst WorkflowSelection : React.FC<{}> = () => {\n\n  // Initialite redux states\n  const workflows = useSelector(selectWorkflows)\n  // Monitor post request to display error messages if they fail\n  const postWorkflowStatus = useSelector((state: { workflowPostState: { status: string } }) => state.workflowPostState.status);\n  const postAndProcessWorkflowStatus = useSelector((state: { workflowPostAndProcessState: { status: string } }) => state.workflowPostAndProcessState.status);\n  const postError = useSelector((state: { workflowPostState: { error: any } }) => state.workflowPostState.error)\n  const postAndProcessError = useSelector((state: { workflowPostAndProcessState: { error: any } }) => state.workflowPostAndProcessState.error)\n\n  // Create workflow selection\n  const workflowButtons = () => {\n    return (\n      workflows.map( (workflow: any, index: number) => (\n        <WorkflowButton stateName={workflow.name} workflowIndex={index}/>\n      ))\n    );\n  }\n\n  const workflowStyle = css({\n    backgroundColor: 'snow',\n    borderRight: '1px solid #BBB',\n    width: '350px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'left',\n    padding: '20px',\n    paddingRight: '40px',\n    gap: '30px',\n  })\n\n  const saveButtonAreaStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    gap: '30px',\n  })\n\n  const errorBoxStyle = css({\n    ...(postWorkflowStatus !== 'failed' && postAndProcessWorkflowStatus !== 'failed') && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  return (\n    <div css={workflowStyle} title=\"Workflow Selection Area\">\n      <h2>Workflow Selection</h2>\n      {workflowButtons()}\n      <div css={saveButtonAreaStyle} title=\"Save Button Area\">\n        <SaveButton />\n        {workflows.length > 0 ? <SaveAndProcessButton /> : \"\"}\n      </div>\n      <div css={errorBoxStyle} title=\"Error Box\">\n        <span>An error has occured. Please wait a bit and try again. Details: </span><br />\n        {postError}<br />\n        {postAndProcessError}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Clicking this button sets the associated workflow as selected\n * @param param0\n */\nconst WorkflowButton: React.FC<{stateName: string, workflowIndex: number}> = ({stateName, workflowIndex}) => {\n\n  const dispatch = useDispatch();\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const workflowButtonStyle = css({\n    backgroundColor: 'snow',\n    borderRadius: '10px',\n    borderStyle: 'solid',\n    borderWidth: '1px',\n    borderColor: workflowIndex !== selectedWorkflowIndex ? 'black' : 'lightblue',\n    fontSize: 'medium',\n    padding: '16px',\n    cursor: \"pointer\",\n    justifyContent: 'center',\n    alignContent: 'center',\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n    gap: '10px',\n  });\n\n  return (\n    <div css={workflowButtonStyle} title={\"Workflow Button for \"+stateName}\n      onClick={() =>\n        dispatch(setSelectedWorkflowIndex(workflowIndex))\n      }>\n      <span>{stateName}</span>\n    </div>\n  );\n}\n\n/**\n * Button that sends a post request to save current changes\n * TODO: Create a wrapper for this and the other save button?\n */\nconst SaveButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const segments = useSelector(selectSegments)\n  const workflowStatus = useSelector((state: { workflowPostState: { status: string } }) => state.workflowPostState.status);\n\n  // Update based on current fetching status\n  let icon = faDotCircle\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n  } else if (workflowStatus === 'failed') {\n    icon = faTimes\n  }\n\n  const saveButtonStyle = css({\n    flex: 1,\n    backgroundColor: workflowStatus === 'failed' ? 'red' : 'green',\n    borderRadius: '10px',\n    fontSize: 'medium',\n    padding: '16px',\n    cursor: \"pointer\",\n    justifyContent: 'center',\n    alignContent: 'center',\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n    display: 'flex',\n    alignItems: 'center',\n    gap: '10px',\n    color: 'snow',\n  })\n\n  return (\n    <div css={saveButtonStyle} title={\"Save\"}\n      onClick={() =>\n        dispatch(postVideoInformation({\n          segments: segments,\n          mediaPackageId: \"9bf8aec2-10f5-4c64-bfde-2752fa3a394d\",\n        }))\n      }>\n      <FontAwesomeIcon  icon={icon} size=\"1x\"/>\n      <span>{\"Save\"}</span>\n    </div>\n  );\n}\n\n/**\n * Button that sends a post request to save current changes\n * and starts the selected workflow\n */\nconst SaveAndProcessButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const workflows = useSelector(selectWorkflows)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n  const segments = useSelector(selectSegments)\n  const workflowStatus = useSelector((state: { workflowPostAndProcessState: { status: string } }) => state.workflowPostAndProcessState.status);\n\n  // Update based on current fetching status\n  let icon = faDotCircle\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n  } else if (workflowStatus === 'failed') {\n    icon = faTimes\n  }\n\n  const saveButtonStyle = css({\n    flex: 1,\n    backgroundColor: workflowStatus === 'failed' ? 'red' : 'green',\n    borderRadius: '10px',\n    fontSize: 'medium',\n    padding: '16px',\n    cursor: \"pointer\",\n    justifyContent: 'center',\n    alignContent: 'center',\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n    display: 'flex',\n    alignItems: 'center',\n    gap: '10px',\n    color: 'snow',\n  })\n\n  return (\n    <div css={saveButtonStyle} title={\"Save and Process\"}\n      onClick={() =>\n        dispatch(postVideoInformationWithWorkflow({\n          segments: segments,\n          mediaPackageId: \"9bf8aec2-10f5-4c64-bfde-2752fa3a394d\",\n          workflowID: workflows[selectedWorkflowIndex],\n        }))\n      }>\n      <FontAwesomeIcon  icon={icon} size=\"1x\"/>\n      <span>{\"Save and Process\"}</span>\n    </div>\n  );\n}\n\nexport default WorkflowSelection;","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\n/**\n * Will eventually display settings based on the selected workflow index\n */\nconst WorkflowConfiguration : React.FC<{}> = () => {\n\n  const workflowConfigurationStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n    <div css={workflowConfigurationStyle} title=\"Workflow Configuration Area\">\n      <h2>Workflow Configuration</h2>\n      <FontAwesomeIcon icon={faTools} size=\"10x\" />\n      Under Construction\n    </div>\n  );\n\n}\n\nexport default WorkflowConfiguration;","import React from \"react\";\n\nimport Video from './Video';\nimport Timeline from './Timeline';\nimport CuttingActions from './CuttingActions';\nimport WorkflowSelection from \"./WorkflowSelection\";\nimport WorkflowConfiguration from \"./WorkflowConfiguration\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useSelector } from 'react-redux'\nimport {\n  selectMainMenuState,\n} from '../redux/mainMenuSlice'\n\n/**\n * A container for the main functionality\n * Shows different components depending on the state off the app\n * TODO: Add proper component switching\n */\nconst MainContent: React.FC<{}> = () => {\n\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  const cuttingStyle = css({\n    width: '100%',\n    display: mainMenuState !== \"Cutting\" ? 'none' :'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n  })\n\n  const startWorkflowStyle = css({\n    height: '100%',\n    display: mainMenuState !== \"Start Workflow\" ? 'none' : 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'left',\n    alignItems: 'left'\n  })\n\n  const defaultStyle = css({\n    display: (mainMenuState === \"Start Workflow\" || mainMenuState === \"Cutting\") ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n     <div title=\"MainMenuContext\">\n        <div css={cuttingStyle} title=\"Cutting Container\">\n            <Video />\n            <CuttingActions />\n            <Timeline />\n        </div>\n        <div css={startWorkflowStyle} title=\"Workflow Container\">\n            <WorkflowSelection />\n            <WorkflowConfiguration />\n          </div>\n          <div css={defaultStyle}>\n            <FontAwesomeIcon icon={faTools} size=\"10x\" />\n            Under Construction\n          </div>\n     </div>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\n\nimport MainMenu from './MainMenu';\nimport MainContent from './MainContent';\n\nconst Body: React.FC<{}> = () => {\n\n  const bodyStyle = {\n    display: 'flex',\n    flex: '1',\n    flexDirection: 'row' as const,\n    gap: '50px',\n  };\n\n  return (\n    <div css={bodyStyle} title=\"Body\">\n      <MainMenu />\n      <MainContent />\n    </div>\n  );\n};\n\nexport default Body;\n","import React from 'react';\nimport Body from './main/Body';\n\nfunction App() {\n  return (\n    <div css={{backgroundColor: \"snow\"}} className=\"App\">\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport mainMenuStateReducer from './mainMenuSlice'\nimport videoReducer from './videoSlice'\nimport workflowPostReducer from './workflowPostSlice'\nimport workflowPostAndProcessReducer from './workflowPostAndProcessSlice'\n\nexport default configureStore({\n  reducer: {\n    mainMenuState: mainMenuStateReducer,\n    videoState: videoReducer,\n    workflowPostState: workflowPostReducer,\n    workflowPostAndProcessState: workflowPostAndProcessReducer,\n  }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>    \n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}