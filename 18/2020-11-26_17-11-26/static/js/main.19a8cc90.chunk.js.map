{"version":3,"sources":["redux/mainMenuSlice.ts","main/MainMenu.tsx","util/client.js","util/utilityFunctions.ts","redux/videoSlice.ts","main/Video.tsx","img/placeholder_waveform.png","main/Timeline.tsx","main/CuttingActions.tsx","main/MainContent.tsx","main/Body.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["mainMenuSlice","createSlice","name","initialState","value","reducers","setState","state","action","payload","actions","selectMainMenuState","mainMenuState","MainMenuButton","iconName","stateName","dispatch","useDispatch","activeState","useSelector","mainMenuButtonStyle","backgroundColor","borderRadius","fontSize","width","height","cursor","transitionDuration","transitionProperty","transform","display","flexDirection","justifyContent","alignItems","textAlign","gap","css","title","onClick","icon","size","MainMenu","style","borderRight","padding","faFilm","faListUl","faPhotoVideo","faQuestion","client","endpoint","a","body","customConfig","headers","encoded","btoa","unescape","encodeURIComponent","authHeaders","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","roundToDecimalPlace","num","decimalPlace","decimalFactor","Math","pow","round","Number","EPSILON","isPlaying","currentlyAt","segments","id","nanoid","startTime","endTime","isAlive","activeSegmentIndex","videoURLs","videoCount","duration","presenters","status","error","fetchVideoURL","createAsyncThunk","videoSlice","setIsPlaying","setCurrentlyAt","updateActiveSegment","setCurrentlyAtInSeconds","addSegment","push","cut","segmentA","segmentB","splice","markAsDeletedOrAlive","extraReducers","builder","addCase","pending","fulfilled","previews","reduce","o","uri","length","parseSegments","rejected","findIndex","element","newSegments","forEach","start","end","selectIsPlaying","videoState","selectCurrentlyAt","selectCurrentlyAtInSeconds","selectSegments","selectActiveSegmentIndex","selectIsCurrentSegmentAlive","selectVideoURL","selectVideoCount","selectDuration","selectDurationInSeconds","selectTitle","selectPresenters","VideoPlayer","url","isMuted","useState","ready","setReady","ref","useRef","useEffect","current","seekTo","playerStyle","playing","muted","onProgress","playedSeconds","progressInterval","onReady","onEnded","VideoControls","isSkipping","setIsSkipping","faEyeSlash","faToggleOn","faToggleOff","faPause","faPlay","Date","toISOString","substr","VideoHeader","join","Video","content","videoURLStatus","className","videoPlayers","i","key","flex","borderBottom","Scrubber","timelineWidth","x","y","controlledPosition","setControlledPosition","isGrabbed","setIsGrabbed","wasCurrentlyAtRef","updateXPos","scrubberStyle","position","zIndex","boxShadow","scrubberDragHandleStyle","scrubberDragHandleIconStyle","onStart","onStop","e","axis","bounds","disabled","faBars","SegmentsList","bgColor","index","segmentsStyle","paddingTop","map","segment","borderStyle","borderColor","borderWidth","boxSizing","Timeline","useResizeObserver","timelineStyle","alt","src","myImg","top","CuttingActionsButton","actionName","alignContent","MarkAsDeletedButton","isCurrentSegmentActive","faTrash","faTrashRestore","CuttingActions","cuttingStyle","leftStyle","rightStyle","faCut","MainContent","mainContentStyle","paddingRight","faTools","renderSwitch","Body","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mainMenuStateReducer","videoReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.19a8cc90.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\n/**\n * Slice for the main menu state\n */\nexport const mainMenuSlice = createSlice({\n  name: 'mainMenuState',\n  initialState: {\n    value: \"Cutting\"\n  },\n  reducers: {\n    setState: (state, action) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = mainMenuSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectMainMenuState = (state: { mainMenuState: { value: any; }; }) => state.mainMenuState.value\n\nexport default mainMenuSlice.reducer\n\n","import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm, faListUl, faPhotoVideo, faQuestion, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  setState, selectMainMenuState\n} from '../redux/mainMenuSlice'\n\n/**\n * A container for selecting the functionality shown in the main part of the app\n */\nconst MainMenu: React.FC<{}> = () => {\n\n  const mainMenuStyle = {\n    backgroundColor: 'snow',\n    borderRight: '1px solid #BBB',\n    width: '100px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  };\n\n  return (\n    <div style={mainMenuStyle} title=\"MainMenu\">\n      <MainMenuButton iconName={faFilm} stateName=\"Cutting\"/>\n      <MainMenuButton iconName={faListUl} stateName=\"Metadata\"/>\n      <MainMenuButton iconName={faPhotoVideo} stateName=\"Thumbnail\"/>\n      <MainMenuButton iconName={faQuestion} stateName=\"Start Workflow\"/>\n    </div>\n  );\n};\n\n/**\n * A button to set the state of the app\n * TODO: Complete Styling\n * @param param0 \n */\nconst MainMenuButton: React.FC<{iconName: IconDefinition, stateName: string}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectMainMenuState)\n\n  const mainMenuButtonStyle = {\n    backgroundColor: 'snow',\n    borderRadius: '10px',\n    fontSize: 'medium',\n    width: '100%',\n    height: '100px',\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    //boxShadow: isActive ? 'inset 0 0 5px #000000' : '0',\n    ...(activeState === stateName) && {\n      backgroundColor: 'lightblue',\n    },\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    textAlign: 'center' as const,\n    gap: '10px',\n  };\n\n  return (\n    <div css={mainMenuButtonStyle} title={stateName}         \n      onClick={() => { \n        dispatch(setState(stateName)); \n      }}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\nexport default MainMenu;","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\n/**\n * Client I stole this form a react tutorial\n */\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const encoded = btoa(unescape(encodeURIComponent(\n    \"admin:opencast\"\n  )));\n  const authHeaders = { 'Authorization': `Basic ${encoded}` };\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n      ...authHeaders,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","export const roundToDecimalPlace = (num: number, decimalPlace: number) => {\n  let decimalFactor = Math.pow(10, decimalPlace)\n  return Math.round((num + Number.EPSILON) * decimalFactor) / decimalFactor\n}","import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\nimport { Segment }  from '../types'\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\nimport { WritableDraft } from 'immer/dist/internal';\n\nexport interface video {\n  isPlaying: boolean,\n  currentlyAt: number,   // Position in the video in milliseconds\n  segments: Segment[],\n  activeSegmentIndex: number, \n  \n  videoURLs: string[],\n  videoCount: number,\n  duration: number,   // Video duration in milliseconds\n  title: string,\n  presenters: string[],\n\n  status: string,\n  error: any,\n}\n\nconst initialState: video = {\n  isPlaying: false,\n  currentlyAt: 0,   // Position in the video in milliseconds\n  segments: [{id: nanoid(), startTime: 0, endTime: 1, isAlive: true}],\n  activeSegmentIndex: 0, \n  \n  videoURLs: [],\n  videoCount: 0,\n  duration: 0,\n  title: '',\n  presenters: [],\n\n  status: 'idle',\n  error: null,\n}\n\nexport const fetchVideoURL = createAsyncThunk('videoURL/fetchVideoURL', async () => {\n  const response = await client.get('https://legacy.opencast.org/admin-ng/tools/ID-dual-stream-demo/editor.json')\n  return response\n})\n\n/**\n * Slice for the state of the \"video\"\n * Treats the multitude of videos that may exist as one video\n * TODO: Find a way to init the segments array with a starting segment\n */\nexport const videoSlice = createSlice({\n  name: 'videoState',\n  initialState,\n  reducers: {\n    setIsPlaying: (state, action) => {\n      state.isPlaying = action.payload;\n    },\n    setCurrentlyAt: (state, action) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload, 3);\n\n      updateActiveSegment(state);\n    },\n    setCurrentlyAtInSeconds: (state, action) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload * 1000, 3);\n\n      updateActiveSegment(state);\n    },\n    addSegment: (state, action) => {\n      state.segments.push(action.payload)\n    },\n    cut: (state) => {\n      // If we're exactly between two segments, we can't split the current segment\n      if (state.segments[state.activeSegmentIndex].startTime === state.currentlyAt ||\n          state.segments[state.activeSegmentIndex].endTime === state.currentlyAt ) {\n        return state;\n      }\n\n      // Make two (new) segments out of it\n      let segmentA : Segment =  {id: nanoid(),\n        startTime: state.segments[state.activeSegmentIndex].startTime,\n        endTime: state.currentlyAt,\n        isAlive: false}\n      let segmentB : Segment =  {id: nanoid(),\n        startTime: state.currentlyAt,\n        endTime: state.segments[state.activeSegmentIndex].endTime,\n        isAlive: false}\n      \n      // Add the new segments and remove the old one\n      state.segments.splice(state.activeSegmentIndex, 1, segmentA, segmentB);     \n    },\n    markAsDeletedOrAlive: (state) => {\n      state.segments[state.activeSegmentIndex].isAlive = !state.segments[state.activeSegmentIndex].isAlive\n    }\n  },\n  // For Async Requests\n  extraReducers: builder => {\n    builder.addCase(\n      fetchVideoURL.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchVideoURL.fulfilled, (state, action) => {\n        state.status = 'success'\n        // eslint-disable-next-line no-sequences\n        state.videoURLs = action.payload.previews.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        state.videoCount = action.payload.previews.length\n        state.duration = action.payload.duration\n        state.title = action.payload.title\n        state.presenters = action.payload.presenters\n        state.segments = parseSegments(action.payload.segments, action.payload.duration)\n    })\n    builder.addCase(\n      fetchVideoURL.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\nconst updateActiveSegment = (state: WritableDraft<video>) => {\n  state.activeSegmentIndex = state.segments.findIndex(element => \n    element.startTime <= state.currentlyAt && element.endTime >= state.currentlyAt)\n  // TODO: Proper error handling. Rewrite function?\n  if(state.activeSegmentIndex < 0) {\n    state.activeSegmentIndex = 0\n  }\n}\n\n// Helper Function for testing with current/old editor API\nconst parseSegments = (segments: any, duration: number) => {\n  let newSegments : Segment[] = []\n\n  if (segments.length === 0) {\n    newSegments.push({id: nanoid(), startTime: 0, endTime: duration, isAlive: true})\n  }\n\n  segments.forEach((element: { start: any; end: any; }) => {\n    newSegments.push({id: nanoid(), startTime: element.start, endTime: element.end, isAlive: true})\n  });\n  return newSegments\n}\n\nexport const { setIsPlaying, setCurrentlyAt, setCurrentlyAtInSeconds, addSegment, cut, markAsDeletedOrAlive } = videoSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIsPlaying = (state: { videoState: { isPlaying: any; }; }) => state.videoState.isPlaying\nexport const selectCurrentlyAt = (state: { videoState: { currentlyAt: any; }; }) => state.videoState.currentlyAt\nexport const selectCurrentlyAtInSeconds = (state: { videoState: { currentlyAt: any; }; }) => state.videoState.currentlyAt / 1000\nexport const selectSegments = (state: { videoState: { segments: any } }) => state.videoState.segments\nexport const selectActiveSegmentIndex = (state: { videoState: { activeSegmentIndex: any; }; }) => state.videoState.activeSegmentIndex\nexport const selectIsCurrentSegmentAlive =     (state: { videoState: { segments: { [x: number]: { isAlive: boolean; }; }; activeSegmentIndex: number; }; }) => \nstate.videoState.segments[state.videoState.activeSegmentIndex].isAlive\n\nexport const selectVideoURL = (state: { videoState: { videoURLs: string[] } }) => state.videoState.videoURLs\nexport const selectVideoCount = (state: { videoState: { videoCount: number } }) => state.videoState.videoCount\nexport const selectDuration = (state: { videoState: { duration: number } }) => state.videoState.duration\nexport const selectDurationInSeconds = (state: { videoState: { duration: number } }) => state.videoState.duration / 1000\nexport const selectTitle = (state: { videoState: { title: string } }) => state.videoState.title\nexport const selectPresenters = (state: { videoState: { presenters: string[] } }) => state.videoState.presenters\n\nexport default videoSlice.reducer\n\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faToggleOn, faToggleOff, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectCurrentlyAtInSeconds, setIsPlaying, setCurrentlyAtInSeconds, \n  fetchVideoURL, selectVideoURL, selectVideoCount, selectDurationInSeconds, selectTitle, selectPresenters\n} from '../redux/videoSlice'\n// import { \n//   fetchVideoURL, selectVideoURL, selectVideoCount, selectDurationInSeconds, selectTitle, selectPresenters\n// } from '../redux/videoURLSlice'\n\nimport ReactPlayer from 'react-player'\n\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\n\n/**\n * Container for the videos and their controls\n * TODO: Complete fetching\n * TODO: Move fetching to a more central part of the app\n */\nconst Video: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const videoURLs = useSelector(selectVideoURL)\n  const videoCount = useSelector(selectVideoCount)\n  const videoURLStatus = useSelector((state: { videoState: { status: string } }) => state.videoState.status);\n  const error = useSelector((state: { videoState: { error: any } }) => state.videoState.error)\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (videoURLStatus === 'idle') {\n      dispatch(fetchVideoURL())\n    }\n  }, [videoURLStatus, dispatch])\n\n  // Update based on current fetching status\n  let content\n  if (videoURLStatus === 'loading') {\n    content = <div className=\"loader\">Loading...</div>\n  } else if (videoURLStatus === 'success') {\n    content = \"\"//<div className=\"loader\">Success...</div>\n  } else if (videoURLStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n  \n  // Initialize video players\n  const videoPlayers: JSX.Element[] = [];\n  for (let i = 0; i < videoCount; i++) {  \n    // videoPlayers.push(<VideoPlayer key={i} url='https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4' />);\n    videoPlayers.push(<VideoPlayer key={i} url={videoURLs[i]} isMuted={i === 0 ? true : false}/>);\n  }\n\n  // Style\n  const videoAreaStyle = {\n    backgroundColor: 'snow',\n    display: 'flex',\n    width: 'auto',\n    flex: '7',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '10px',\n    borderBottom: '1px solid #BBB',\n  };\n\n  const videoPlayerAreaStyle = {\n    backgroundColor: 'black',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  };\n\n  return (\n    <div css={videoAreaStyle} title=\"Video Area\">\n      {content}\n      <VideoHeader />\n      <div css={videoPlayerAreaStyle} title=\"Video Player Area\">\n        {videoPlayers}\n      </div>\n      <VideoControls />\n    </div>\n  );\n};\n\n/**\n * A single video player\n * @param param0 \n */\nconst VideoPlayer: React.FC<{url: string, isMuted: boolean}> = ({url, isMuted}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAtInSeconds)\n  const duration  = useSelector(selectDurationInSeconds)\n  const [ready, setReady] = useState(false);\n\n  // Init state variables\n  const ref = useRef<ReactPlayer>(null);\n\n  // Callback for when the video is playing\n  const onProgressCallback = (state: { played: number, playedSeconds: number, loaded: number, loadedSeconds:  number }) => {\n    // Only update redux if there was a substantial change\n    if (roundToDecimalPlace(currentlyAt, 3) !== roundToDecimalPlace(state.playedSeconds, 3)) {\n      dispatch(setCurrentlyAtInSeconds(state.playedSeconds))\n    }    \n  }\n\n  // Callback for checking whether the video element is ready\n  const onReadyCallback = () => {\n    setReady(true);\n  }\n\n  const onEndedCallback = () => {\n    dispatch(setIsPlaying(false));\n    dispatch(setCurrentlyAtInSeconds(duration)); // It seems onEnded is called before the full duration is reached, so we set currentlyAt to the very end\n  }\n\n  useEffect(() => {\n    // Seek if the position in the video got changed externally\n    if(!isPlaying && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n    }\n  })\n\n  const playerStyle = css({\n    minWidth: '320px',\n    minHeight: '240px',\n  })\n\n  return (\n    <ReactPlayer url={url}\n      ref={ref}\n      width='100%'\n      height='auto'\n      playing={isPlaying}\n      muted={isMuted}\n      css={playerStyle}\n      onProgress={onProgressCallback}\n      progressInterval={100}\n      onReady={onReadyCallback}\n      onEnded={onEndedCallback}\n    />\n  );\n\n  // return (\n  //   <div title=\"Video Player\">\n  //     <video width=\"320\" height=\"240\" controls ref={vidRef}>\n  //     <source src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4\" type=\"video/mp4\" />\n  //     Your browser does not support the video tag.\n  //     </video> \n  //   </div>\n  // );\n};\n\n/**\n * Contains controls for manipulating multiple video players at once\n * TODO: Add missing controls\n * TODO: Turn time display into a control\n */\nconst VideoControls: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n\n  const [isSkipping, setIsSkipping] = useState(false)\n\n  // Style\n  const videoControlStyle = {\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n  }\n\n  const videoControlsRowStyle = {\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n    gap: '50px',\n  };\n\n  const playButtonStyle = {\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  }\n\n  const skipToggleStyle = {\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.05)',\n    },\n  }\n\n  return (\n    <div css={videoControlStyle} title=\"Video Controls\">\n      <div css={videoControlsRowStyle} title=\"Video Controls Top Row\">\n        <div style={{display: 'flex', gap: '10px'}}>\n          <FontAwesomeIcon icon={faEyeSlash} size=\"1x\" />\n          <FontAwesomeIcon css={skipToggleStyle} icon={isSkipping ? faToggleOn : faToggleOff} size=\"1x\"\n            onClick={() => setIsSkipping(!isSkipping)}\n          />\n        </div>\n        <FontAwesomeIcon css={playButtonStyle} icon={isPlaying ? faPause : faPlay} size=\"2x\"\n          onClick={() => dispatch(setIsPlaying(!isPlaying))}\n        />\n        {new Date((currentlyAt ? currentlyAt : 0)).toISOString().substr(11, 12)}\n      </div>\n      {/* <div css={videoControlsRowStyle} title=\"Video Controls Bottom Row\">\n\n\n      </div> */}\n    </div>\n  );\n}\n\n/**\n * Displays elements above the video, e.g. title\n */\nconst VideoHeader: React.FC<{}> = () => {\n  const title = useSelector(selectTitle)\n  const presenters = useSelector(selectPresenters)\n\n  const titleStyle = {\n    fontSize: 'large'\n  }\n\n  return (\n    <div title=\"Video Area Header\">\n      <div css={titleStyle} title=\"Video Title\">{title}</div>\n      <div title=\"Video Presenters\">by {presenters.join(\", \")}</div>\n    </div>\n  );\n}\n\nexport default Video;","export default __webpack_public_path__ + \"static/media/placeholder_waveform.d23b087b.png\";","import React, { useState, useRef, useEffect } from 'react'\n\nimport Draggable from 'react-draggable';\n\nimport { css } from '@emotion/core'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment } from '../types'\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectSegments, selectActiveSegmentIndex, selectDuration,\n  setCurrentlyAt\n} from '../redux/videoSlice'\n\n// import { selectDuration, } from '../redux/videoURLSlice'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nimport useResizeObserver from \"use-resize-observer\";\n\nimport myImg from '../img/placeholder_waveform.png'\n\n/**\n * A container for visualizing the cutting of the video, as well as for controlling\n * the current position in the video\n * Its width corresponds to the duration of the video\n */\nconst Timeline: React.FC<{}> = () => {\n\n  const { ref, width = 1, } = useResizeObserver<HTMLDivElement>();\n\n  const timelineStyle = css({\n    position: 'relative' as 'relative',     // Need to set position for Draggable bounds to work\n    borderRadius: '10px',\n    backgroundColor: 'snow',\n    height: '250px',\n    width: '100%',\n    //backgroundImage: `url({myImg})`,\n  });\n  \n  return (\n  <div ref={ref} css={timelineStyle} title=\"Timeline\">\n    <Scrubber timelineWidth={width}/>\n    <div css={{height: '230px'}}>\n      <img alt='waveform2' src={myImg} style={{position: \"absolute\" as \"absolute\", height: '230px', width: '100%', top: '10px'}}></img>\n      <SegmentsList timelineWidth={width}/>\n    </div>\n  </div>\n  );\n};\n\n/**\n * Displays and defines the current position in the video\n * TODO: Fix position fail when starting and then quickly stopping the video\n *       Possibly because state.playedSceonds in Video is faulty for small values\n * TODO: Fix timeline width changes\n * @param param0 \n */\nconst Scrubber: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n\n  // Init state variables\n  const [controlledPosition, setControlledPosition] = useState({x: 0,y: 0,});\n  const [isGrabbed, setIsGrabbed] = useState(false) \n  const wasCurrentlyAtRef = useRef(0)\n\n  // Reposition scrubber when the current x position was changed externally\n  useEffect(() => {\n    if(currentlyAt !== wasCurrentlyAtRef.current) {\n      updateXPos();\n      wasCurrentlyAtRef.current = currentlyAt;\n    }\n  })\n\n  // // Reposition scrubber when the timeline width changes\n  // useEffect(() => {\n  //   setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [timelineWidth])\n\n  // Callback for when the scrubber gets dragged by the user\n  // const onControlledDrag = (e: any, position: any) => {\n  //   const {x, y} = position;\n  //   dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n  // };\n\n  // Callback for when the position changes by something other than dragging\n  const updateXPos = () => {\n    const y = controlledPosition.y;\n    setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y});\n  };\n\n  const onStartDrag = () => {\n    setIsGrabbed(true)\n  }\n\n  const onStopDrag = (e: any, position: any) => {\n    const {x, y} = position;\n    setControlledPosition({x, y});\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n\n    setIsGrabbed(false)\n  }\n\n  const scrubberStyle = css({\n    backgroundColor: 'rgba(255, 0, 0, 1)',\n    height: '250px',\n    width: '1px',\n    position: 'absolute' as 'absolute',\n    zIndex: 2,\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  }); \n\n  const scrubberDragHandleStyle = css({\n    backgroundColor: 'rgba(255, 255, 255, 1)',\n    borderRadius: '10px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: isGrabbed ? \"grabbing\" : \"grab\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const scrubberDragHandleIconStyle = css({\n    transform: 'scaleY(1.5) rotate(90deg)',\n    padding: '5px',\n  })\n\n  return (\n    <Draggable \n      //onDrag={onControlledDrag}\n      onStart={onStartDrag}\n      onStop={onStopDrag}\n      axis=\"x\"\n      bounds=\"parent\"\n      position={controlledPosition}\n      disabled={isPlaying}\n      >\n      <div css={scrubberStyle} title=\"Scrubber\">\n        <div css= {scrubberDragHandleStyle} title=\"dragHandle\">\n          <FontAwesomeIcon css={scrubberDragHandleIconStyle} icon={faBars} size=\"1x\" />\n        </div>\n      </div>\n    </Draggable>\n  );\n};\n\n/**\n * Container responsible for rendering the segments that are created when cuting\n * TODO: Complete styling\n */\nconst SegmentsList: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const segments = useSelector(selectSegments)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)\n\n  /**\n   * Returns a background color based on whether the segment is to be deleted\n   * and whether the segment is currently active\n   */ \n  const bgColor = (state: boolean, index: boolean) => {\n    if (state && !index) {\n      return 'rgba(0, 0, 255, 0.4)' \n    } else if (!state && !index) {\n      return 'rgba(255, 0, 0, 0.4)' \n    } else if (state && index) {\n      return 'rgba(0, 0, 200, 0.4)' \n    } else if (!state && index) {\n      return 'rgba(200, 0, 0, 0.4)'\n    }\n  }\n\n  // Render the individual segments\n  const renderedSegments = () => {\n    return (\n      segments.map( (segment: Segment, index: number) => (\n        <div key={segment.id} title=\"Segment\" css={{\n          backgroundColor: bgColor(segment.isAlive, activeSegmentIndex === index),//segment.state === \"alive\" ? 'rgba(0, 0, 255, 0.4)' : 'rgba(255, 0, 0, 0.4)',\n          borderRadius: '15px',\n          borderStyle: 'solid',\n          borderColor: segment.isAlive ? 'blue' : 'red',\n          borderWidth: '1px',\n          boxSizing: 'border-box',\n          width: ((segment.endTime - segment.startTime) / duration) * 100 + '%',\n          height: '230px',\n          zIndex: 1,\n        }}>\n        </div>\n        \n      ))\n    );\n  }\n\n  const segmentsStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    paddingTop: '10px',\n  })\n\n  return (\n    <div css={segmentsStyle} title=\"Segments\">\n      {renderedSegments()}\n    </div>\n  );\n};\n\nexport default Timeline;","import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCut, faQuestion, faTrash, faTrashRestore, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  cut, markAsDeletedOrAlive, selectIsCurrentSegmentAlive\n} from '../redux/videoSlice'\n\n/**\n * Defines the different actions a user can perform while in cutting mode\n */\nconst CuttingActions: React.FC<{}> = () => {\n\n  const cuttingStyle =  css({\n    backgroundColor: 'snow',\n    flex: '3',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-between',\n    padding: '00px',\n    gap: '30px',\n  })\n\n  // const cuttingActionsStyle = css({\n  //   backgroundColor: 'snow',\n  //   flex: '3',\n  //   display: 'flex',\n  //   flexDirection: 'row' as const,\n  //   flexWrap: 'wrap' as const,\n  //   justifyContent: 'space-around',\n  //   alignContent: 'top',\n  //   gap: '30px',\n  // });\n\n  const leftStyle = css({\n    backgroundColor: 'snow',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    gap: '30px',\n  })\n\n  const rightStyle = css({\n    backgroundColor: 'snow',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    gap: '30px',\n  })\n\n  return (\n    <div css={cuttingStyle}>\n      {/* <div css={cuttingActionsStyle} title=\"CuttingActions\"> */}\n        <div css={leftStyle}>\n          <CuttingActionsButton iconName={faCut} actionName=\"Cut\" action={cut}/>\n          {/* <CuttingActionsButton iconName={faTrash} actionName=\"Mark as Deleted\" action={markAsDeletedOrAlive}/> */}\n          <MarkAsDeletedButton />\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Concatenate Left\" action={null}/>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Concatenate Right\" action={null}/>\n        </div>\n        <div css={rightStyle}>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Reset changes\" action={null}/>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Undo\" action={null}/>\n        </div>\n      {/* </div> */}\n    </div>\n  );\n};\n\n/**\n * A button representing a single action a user can take while cutting\n * TODO: Add functionality\n * TODO: Complete styling\n * @param param0 \n */\nconst CuttingActionsButton: React.FC<{iconName: IconDefinition, actionName: string, action: any}> = ({iconName, actionName, action}) => {\n\n  const dispatch = useDispatch();\n\n  const cuttingActionButtonStyle = {\n    backgroundColor: 'snow',\n    borderRadius: '10px',\n    //flex: 1,\n    fontSize: 'medium',\n    width: '100px',\n    height: '100px',\n    //padding: '20px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: \"pointer\",\n    justifyContent: 'center',\n    alignContent: 'center',\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '10px',\n    textAlign: 'center' as const,\n  };\n\n  return (\n    <div css={cuttingActionButtonStyle} title={actionName} onClick={() => action ? dispatch(action()) : \"\"}>\n      <FontAwesomeIcon icon={iconName} size=\"2x\" />\n      <div>{actionName}</div>\n    </div>\n  );\n};\n\nconst MarkAsDeletedButton : React.FC<{}> = () => {\n\n  const dispatch = useDispatch();\n  // const isCurrentSegmentActive = useSelector(\n  //   (state: { videoState: { segments: { [x: number]: { isAlive: boolean; }; }; activeSegmentIndex: number; }; }) => \n  //   state.videoState.segments[state.videoState.activeSegmentIndex].isAlive\n  // );\n  const isCurrentSegmentActive = useSelector(selectIsCurrentSegmentAlive)\n\n  const cuttingActionButtonStyle = {\n    backgroundColor: 'snow',\n    borderRadius: '10px',\n    //flex: 1,\n    fontSize: 'medium',\n    width: '100px',\n    height: '100px',\n    //padding: '20px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: \"pointer\",\n    justifyContent: 'center',\n    alignContent: 'center',\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '10px',\n    textAlign: 'center' as const,\n  };\n\n  return (\n    <div css={cuttingActionButtonStyle} title={isCurrentSegmentActive ? \"Delete\" : \"Restore\"} \n      onClick={() => dispatch(markAsDeletedOrAlive())}>\n      <FontAwesomeIcon icon={isCurrentSegmentActive ? faTrash : faTrashRestore} size=\"2x\" />\n      <div>{isCurrentSegmentActive ? \"Delete\" : \"Restore\"}</div>\n    </div>\n  );\n}\n\nexport default CuttingActions;","import React from \"react\";\n\nimport Video from './Video';\nimport Timeline from './Timeline';\nimport CuttingActions from './CuttingActions';\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useSelector } from 'react-redux'\nimport {\n  selectMainMenuState,\n} from '../redux/mainMenuSlice'\n\n/**\n * A container for the main functionality\n * Holds different components depending on the state off the app\n * TODO: Add proper component switching\n */\nconst MainContent: React.FC<{}> = () => {\n\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  const mainContentStyle = css({\n    flex: '1',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingRight: '20px',\n    gap: '20px',\n  });\n\n\n  const renderSwitch = (state : string) => {\n    switch(state) {\n      case \"Cutting\":\n        return (\n          <>\n            <div css={{width: '100%', display: 'flex', flexDirection: 'column' as const, justifyContent: 'space-around', gap: \"20px\"}}>\n              <Video />\n              <CuttingActions />\n            </div>\n            <Timeline />\n          </>);\n      default:\n        return (\n          <>\n            <FontAwesomeIcon icon={faTools} size=\"10x\" />\n            Under Construction\n          </>);\n    }\n  }\n\n  return (\n    <div css={mainContentStyle} title=\"MainMenuContext\">\n        {renderSwitch(mainMenuState)}\n    </div>\n  );\n};\n\nexport default MainContent;","import React from \"react\";\n\nimport MainMenu from './MainMenu';\nimport MainContent from './MainContent';\n\nconst Body: React.FC<{}> = () => {\n\n  const bodyStyle = {\n    display: 'flex',\n    flex: '1',\n    flexDirection: 'row' as const,\n    gap: '75px',\n  };\n\n  return (\n    <div css={bodyStyle} title=\"Body\">\n      <MainMenu />\n      <MainContent />\n    </div>\n  );\n};\n\nexport default Body;","import React from 'react';\nimport Body from './main/Body';\n\nfunction App() {\n  return (\n    <div css={{backgroundColor: \"snow\"}} className=\"App\">\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport mainMenuStateReducer from './mainMenuSlice'\nimport videoReducer from './videoSlice'\n// import videoURLReducer from './videoURLSlice'\n\nexport default configureStore({\n  reducer: {\n    mainMenuState: mainMenuStateReducer,\n    videoState: videoReducer,\n    // videoURL: videoURLReducer,\n  }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>    \n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}