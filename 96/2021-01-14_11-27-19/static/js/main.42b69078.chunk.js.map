{"version":3,"sources":["types.ts","redux/mainMenuSlice.ts","config.ts","redux/finishSlice.ts","cssStyles.tsx","util/client.js","util/utilityFunctions.ts","redux/videoSlice.ts","main/MainMenu.tsx","main/Video.tsx","util/waveform.js","main/Timeline.tsx","main/CuttingActions.tsx","main/FinishMenu.tsx","redux/workflowPostSlice.ts","main/Save.tsx","redux/abortSlice.ts","main/Discard.tsx","main/WorkflowSelection.tsx","redux/workflowPostAndProcessSlice.ts","main/WorkflowConfiguration.tsx","main/Finish.tsx","main/MainContent.tsx","main/TheEnd.tsx","main/Body.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["MainMenuStateNames","mediaPackageId","initialState","value","cutting","mainMenuSlice","createSlice","name","reducers","setState","state","action","payload","actions","selectMainMenuState","mainMenuState","finishSlice","pageNumber","setPageNumber","selectFinishState","finishState","selectPageNumber","ocUrl","window","location","origin","showMetadata","showThumbnail","init","a","loadContextSettings","then","result","validate","assignResults","urlParams","URLSearchParams","search","rawUrlSettings","forEach","key","obj","segments","split","slice","segment","length","basepath","process","endsWith","settingsPath","REACT_APP_SETTINGS_PATH","base","startsWith","url","fetch","response","console","warn","status","debug","ok","error","statusText","headers","get","parseToml","text","SyntaxError","allowParse","src","sourceDescription","schema","path","validateValue","validateObj","validation","newValue","undefined","e","out","newPath","SCHEMA","types","v","Error","string","debugging","metadata","show","boolean","thumbnail","GlobalStyle","styles","globalStyle","basicButtonStyle","css","borderRadius","cursor","transitionDuration","transitionProperty","transform","display","justifyContent","alignItems","gap","textAlign","backOrContinueStyle","flexDirection","ariaLive","client","endpoint","body","customConfig","encoded","btoa","unescape","encodeURIComponent","authHeaders","config","method","JSON","stringify","data","parse","Promise","reject","message","post","roundToDecimalPlace","num","decimalPlace","decimalFactor","Math","pow","round","Number","EPSILON","isPlaying","isPlayPreview","currentlyAt","id","nanoid","start","end","deleted","tracks","activeSegmentIndex","selectedWorkflowIndex","previewTriggered","videoURLs","videoCount","duration","title","presenters","workflows","fetchVideoInformation","createAsyncThunk","argument","videoSlice","setIsPlaying","setIsPlayPreview","setPreviewTriggered","setCurrentlyAt","updateActiveSegment","skipDeletedSegments","setCurrentlyAtInSeconds","addSegment","push","cut","segmentA","segmentB","splice","markAsDeletedOrAlive","setSelectedWorkflowIndex","mergeLeft","mergeSegments","mergeRight","extraReducers","builder","addCase","pending","fulfilled","reduce","o","uri","parseSegments","sort","n1","n2","displayOrder","rejected","findIndex","element","newSegments","mergeSegmentIndex","min","max","endTime","index","selectIsPlaying","videoState","selectIsPlayPreview","selectPreviewTriggered","selectCurrentlyAt","selectCurrentlyAtInSeconds","selectSegments","selectActiveSegmentIndex","selectIsCurrentSegmentAlive","selectSelectedWorkflowIndex","selectVideoURL","selectVideoCount","selectDuration","selectDurationInSeconds","selectTitle","selectPresenters","selectTracks","selectWorkflows","MainMenuButton","iconName","stateName","dispatch","useDispatch","activeState","useSelector","onMenuItemClicked","finish","mainMenuButtonStyle","width","height","backgroundColor","role","tabIndex","onClick","onKeyDown","event","icon","size","MainMenu","mainMenuStyle","borderRight","flexShrink","padding","aria-label","faFilm","faListUl","faPhotoVideo","faSignOutAlt","VideoPlayer","isMuted","testTmp","ref","useRef","useState","ready","setReady","useEffect","current","seekTo","playing","muted","onProgress","playedSeconds","progressInterval","onReady","onEnded","pip","VideoControls","switchPlayPreview","switchIsPlaying","videoControlStyle","videoControlsRowStyle","playButtonStyle","playPreviewStyle","faToggleOn","faToggleOff","aria-checked","aria-hidden","faPause","faPlay","aria-pressed","Date","toISOString","substr","VideoHeader","presenter_header","titleStyle","titleStyleBold","join","Video","content","videoURLStatus","className","videoPlayers","i","videoAreaStyle","borderBottom","videoPlayerAreaStyle","Waveform","opts","this","audioContext","AudioContext","oCanvas","document","createElement","buffer","WIDTH","HEIGHT","channelData","waveformImage","audioBuffer","aveRMS","peakRMS","numberSamples","waveformType","drawWaveform","drawCanvasWaveform","setDimensions","samples","type","delegateToWorker","worker","media","generateWaveform","getAudioData","_completeFuncs","fn","svgPath","catch","log","Object","defineProperty","set","opt","svgLength","prototype","constructor","ocCtx","getContext","decodeAudioData","arraybuffer","resolve","res","rej","ArrayBuffer","Blob","reader","FileReader","onload","readAsArrayBuffer","audiobuffer","dropSamples","getChannelData","amp","fillStyle","fillRect","lineWidth","strokeStyle","sliceWidth","x","beginPath","moveTo","sample","y","lineTo","stroke","sqrt","aveDBs","toDataURL","requestedLength","divider","parseInt","filter","Worker","addEventListener","workerCommunication","bind","postMessage","setSVGpath","removeEventListener","terminate","len","createElementNS","setAttribute","oncomplete","Scrubber","timelineWidth","controlledPosition","setControlledPosition","isGrabbed","setIsGrabbed","wasCurrentlyAtRef","nodeRef","React","updateXPos","scrubberStyle","position","zIndex","boxShadow","scrubberDragHandleStyle","scrubberDragHandleIconStyle","arrowUpStyle","arrowDownStyle","onStart","onStop","axis","bounds","disabled","aria-grabbed","faBars","SegmentsList","segmentsStyle","paddingTop","map","background","active","borderStyle","borderColor","borderWidth","boxSizing","Waveforms","waveformDisplayTestStyle","images","setImages","waveformsProcessed","videoURL","_index","array","blob","xhr","XMLHttpRequest","open","responseType","File","image","numSamples","send","alt","faSpinner","spin","Timeline","useResizeObserver","timelineStyle","cuttingActionButtonStyle","CuttingActionsButton","actionName","tooltip","ariaLabelText","dispatchAction","MarkAsDeletedButton","isCurrentSegmentAlive","faTrash","faTrashRestore","CuttingActions","cuttingStyle","blockStyle","faCut","faStepBackward","faStepForward","faQuestion","FinishMenuButton","finishMenuButtonStyle","fontSize","FinishMenu","finishMenuStyle","faSave","faFileExport","faTimesCircle","postVideoInformation","convertSegments","workflowPostSlice","selected","selectStatus","workflowPostState","selectError","workflowPostAndProcessState","SaveButton","workflowStatus","faCheck","faExclamationCircle","save","saveButtonStyle","aria-live","aria-atomic","ariaSaveUpdate","Save","postWorkflowStatus","postError","saveStyle","errorBoxStyle","fontWeight","label","faChevronLeft","abortSlice","selectAbortState","abortState","DiscardButton","abort","setAbortState","Discard","cancelStyle","WorkflowButton","workflowIndex","selectWorkflowIndex","workflowButtonStyle","WorkflowSelection","workflowSelectionStyle","workflowSelectionSelectionStyle","workflow","faChevronRight","postVideoInformationWithWorkflow","workflowID","workflowPostAndProcessSlice","SaveAndProcessButton","saveAndProcess","WorkflowConfiguration","postAndProcessWorkflowStatus","postAndProcessError","workflowConfigurationStyle","faTools","PageButton","onPageChange","pageButtonStyle","Finish","pageZeroStyle","pageOneStyle","pageTwoStyle","MainContent","paddingRight","paddingLeft","finishStyle","defaultStyle","TheEnd","postAndProcessState","theEndStyle","faCheckCircle","Body","postAndProcessSelectStatus","bodyStyle","Fragment","App","ms","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mainMenuStateReducer","finishStateReducer","videoReducer","workflowPostReducer","workflowPostAndProcessReducer","abortReducer","initialize","race","setTimeout","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.42b69078.chunk.js","sourcesContent":["export interface Segment {\n  id: string,\n  start: number,\n  end: number,\n  deleted: boolean,\n}\n\nexport interface Track {\n  id: string,\n  uri: string,\n  flavor: any,\n  audioStream: any,\n  videoStream: any,\n}\n\nexport interface TimelineState {\n  segments: Segment[]\n  scrubberPos: number\n}\n\nexport interface RequestArgument {\n  mediaPackageId: string\n  ocUrl: string\n}\n\nexport interface PostEditArgument extends RequestArgument {\n  segments: Segment[]\n  tracks: Track[]\n}\n\nexport interface PostAndProcessEditArgument extends PostEditArgument{\n  workflowID: string[]\n}\n\nexport enum MainMenuStateNames {\n  cutting = \"Cutting\",\n  metadata = \"Metadata\",\n  thumbnail = \"Thumbnail\",\n  finish = \"Finish\",\n}\n\nexport interface httpRequestState {\n  status: 'idle' | 'loading' | 'success' | 'failed',\n  error: string | undefined\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { MainMenuStateNames} from '../types'\n\nexport interface mainMenu {\n  value: MainMenuStateNames,\n}\n\nconst initialState: mainMenu = {\n  value: MainMenuStateNames.cutting,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const mainMenuSlice = createSlice({\n  name: 'mainMenuState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<mainMenu[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = mainMenuSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectMainMenuState = (state: { mainMenuState: { value: mainMenu[\"value\"]; }; }) => state.mainMenuState.value\n\nexport default mainMenuSlice.reducer\n","/**\n * Loads config values from\n * - a settings file\n * - GET parameters\n * and exports them.\n * Code was largely adapted from https://github.com/elan-ev/opencast-studio/blob/master/src/settings.js (January 11th, 2021)\n */\nimport parseToml from '@iarna/toml/parse-string';\n\n/**\n * Parsed settings are exported through these variables\n */\nexport var mediaPackageId : string\nexport var ocUrl: string = window.location.origin\nexport var showMetadata: boolean = true\nexport var showThumbnail: boolean = true\n\n/**\n * Local constants\n */\nconst CONTEXT_SETTINGS_FILE = 'editor-settings.toml';\n\n// Sources that values can come from.\nconst SRC_SERVER = 'src-server';\nconst SRC_URL = 'src-url';\n\n/**\n * Entry point. Loads values from settings into the exported variables\n * Priorities are:\n * 1. GET Parameters\n * 2. Settings file\n * 3. Default values\n */\nexport const init = async () => {\n  // Get settings from config file\n  await loadContextSettings().then((result) => {\n\n    result = validate(result, false, SRC_SERVER, \"from server settings file\")\n\n    assignResults(result)\n  })\n\n  // Get settings from URL query.\n  var urlParams = new URLSearchParams(window.location.search);\n\n  let rawUrlSettings = {};\n  urlParams.forEach(function(value, key) {\n    // Create empty objects for full path (if the key contains '.') and set\n    // the value at the end.\n    let obj : {[k: string]: any} = rawUrlSettings;\n    const segments = key.split('.');\n    segments.slice(0, -1).forEach((segment) => {\n      if (!(segment in obj)) {\n        obj[segment] = {};\n      }\n      obj = obj[segment];\n    });\n    obj[segments[segments.length - 1]] = value;\n  });\n\n  const result = validate(rawUrlSettings, true, SRC_URL, 'given as URL GET parameter');\n\n  assignResults(result)\n\n};\n\n/**\n * Assigns parsed and validated results to their respective variables\n * @param result\n */\nconst assignResults = (result: Record<string, any> | null) => {\n  for (const key in result) {\n    if (result[\"mediaPackageId\"] != null) {\n        mediaPackageId = result[\"mediaPackageId\"]\n    }\n    if (key === \"debugging\" && (result[key][\"ocUrl\"] != null)) {\n      ocUrl = result[key][\"ocUrl\"]\n    }\n    if (key === \"metadata\" && (result[key][\"show\"] != null)) {\n      showMetadata = result[key][\"show\"]\n    }\n    if (key === \"thumbnail\" && (result[key][\"show\"] != null)) {\n      showThumbnail = result[key][\"show\"]\n    }\n  }\n}\n\n/**\n * Attempts to load toml settings file\n */\nconst loadContextSettings = async () => {\n\n  // Try to retrieve the context settings.\n  let basepath = process.env.PUBLIC_URL || '/';\n  if (!basepath.endsWith('/')) {\n    basepath += '/';\n  }\n\n  // Construct path to settings file. If the `REACT_APP_SETTINGS_PATH` is\n  // given and starts with '/', it is interpreted as absolute path from the\n  // server root.\n  const settingsPath = process.env.REACT_APP_SETTINGS_PATH || CONTEXT_SETTINGS_FILE;\n  const base = settingsPath.startsWith('/') ? '' : basepath;\n  const url = `${window.location.origin}${base}${settingsPath}`;\n  let response;\n  try {\n    response = await fetch(url);\n  } catch (e) {\n    console.warn(`Could not access '${settingsPath}' due to network error!`, e || \"\");\n    return null;\n  }\n\n  if (response.status === 404) {\n    // If the settings file was not found, we silently ignore the error. We\n    // expect many installation to provide this file.\n    console.debug(`'${settingsPath}' returned 404: ignoring`);\n    return null;\n  } else if (!response.ok) {\n    console.error(\n      `Fetching '${settingsPath}' failed: ${response.status} ${response.statusText}`\n    );\n    return null;\n  }\n\n  if (response.headers.get('Content-Type')?.startsWith('text/html')) {\n    console.warn(`'${settingsPath}' request has 'Content-Type: text/html' -> ignoring...`);\n    return null;\n  }\n\n  try {\n    return parseToml(await response.text());\n  } catch (e) {\n    console.error(`Could not parse '${settingsPath}' as TOML: `, e);\n    throw new SyntaxError(`Could not parse '${settingsPath}' as TOML: ${e}`);\n  }\n\n};\n\n/**\n * Validate the given `obj` with the global settings `SCHEMA`. If `allowParse`\n * is true, string values are attempted to parse into the expected type. `src`\n * must be one of `SRC_SERVER`, `SRC_URL` or `SRC_LOCAL_STORAGE`.\n * `srcDescription` is just a string for error messages specifying where `obj`\n * comes from.\n * */\nconst validate = (obj: Record<string, any> | null, allowParse: boolean, src: string, sourceDescription: string) => {\n  // Validates `obj` with `schema`. `path` is the current path used for error\n  // messages.\n  const validate = (schema: any, obj: Record<string, any> | null, path: string) => {\n    if (typeof schema === 'function') {\n      return validateValue(schema, obj, path);\n    } else {\n      return validateObj(schema, obj, path);\n    }\n  };\n\n  // Validate a settings value with a validation function. Returns the final\n  // value of the setting or `null` if it should be ignored.\n  const validateValue = (validation: (arg0: any, arg1: boolean, arg2: string) => any, value: Record<string, any> | null, path: string) => {\n    try {\n      const newValue = validation(value, allowParse, src);\n      return newValue === undefined ? value : newValue;\n    } catch (e) {\n      console.warn(\n        `Validation of setting '${path}' (${sourceDescription}) with value '${value}' failed: `\n          + `${e}. Ignoring.`\n      );\n      return null;\n    }\n  };\n\n  // Validate a settings object/namespace. `schema` and `obj` need to be\n  // objects.\n  const validateObj = (schema: any, obj: Record<string, any> | null, path: string) => {\n    // We iterate through all keys of the given settings object, checking if\n    // each key is valid and recursively validating the value of that key.\n    let out : {[k: string]: any} = {};\n    for (const key in obj) {\n      const newPath = path ? `${path}.${key}` : key;\n      if (key in schema) {\n        const value = validate(schema[key], obj[key], newPath);\n\n        // If `null` is returned, the validation failed and we ignore this\n        // value.\n        if (value !== null) {\n          out[key] = value;\n        }\n      } else {\n        console.warn(\n          `'${newPath}' (${sourceDescription}) is not a valid settings key. Ignoring.`\n        );\n      }\n    }\n\n    return out;\n  };\n\n  return validate(SCHEMA, obj, \"\");\n}\n\n\n// Validation functions for different types.\nconst types = {\n  'string': (v: any, allowParse: any) => {\n    if (typeof v !== 'string') {\n      throw new Error(\"is not a string, but should be\");\n    }\n  },\n  'boolean': (v: string, allowParse: any) => {\n    if (typeof v === 'boolean') {\n      return;\n    }\n\n    if (allowParse) {\n      if (v === 'true') {\n        return true;\n      }\n      if (v === 'false') {\n        return false;\n      }\n      throw new Error(\"can't be parsed as boolean\");\n    } else {\n      throw new Error(\"is not a boolean\");\n    }\n  },\n};\n\n// Defines all potential settings and their types.\n//\n// Each setting value has to be a validation function. Such a function takes two\n// arguments: the input value `v` and the boolean `allowParse` which specifies\n// whether the input might be parsed into the correct type (this is only `true`\n// for GET parameters). The validation should throw an error if the input value\n// is not valid for the setting. If the function returns `undefined`, the input\n// value is valid and used. If the validator returns a different value, the\n// input is valid, but is replaced by that new value. See the `types` object\n// above for some examples.\nconst SCHEMA = {\n  mediaPackageId: types.string,\n  debugging: {\n    ocUrl: types.string,\n  },\n  metadata: {\n    show : types.boolean,\n  },\n  thumbnail: {\n    show : types.boolean,\n  }\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface finish {\n  value: \"Save changes\" | \"Start processing\" | \"Discard changes\" | undefined,\n  pageNumber: number,\n}\n\nconst initialState: finish = {\n  value: \"Start processing\",\n  pageNumber: 0,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const finishSlice = createSlice({\n  name: 'finishState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<finish[\"value\"]>) => {\n      state.value = action.payload;\n    },\n    setPageNumber: (state, action) => {\n      state.pageNumber = action.payload;\n    }\n  }\n})\n\n// Export Actions\nexport const { setState, setPageNumber } = finishSlice.actions\n\n// Export Selectors\nexport const selectFinishState = (state: { finishState: { value: finish[\"value\"]; }; }) => state.finishState.value\nexport const selectPageNumber = (state: { finishState: { pageNumber: finish[\"pageNumber\"]; }; }) => state.finishState.pageNumber\n\nexport default finishSlice.reducer\n","/**\n * This file contains general css stylings\n */\nimport { css, Global } from '@emotion/core'\nimport React from \"react\";\n\n/**\n * An emotion component that inserts styles globally\n * Is removed when the styles change or when the Global component unmounts.\n */\nexport const GlobalStyle: React.FC = () => {\n  return (\n    <Global styles={globalStyle} />\n  );\n}\n\n/**\n * CSS for the global style component\n */\nexport const globalStyle = css({\n  body: {\n    backgroundColor: 'snow',\n    fontSize: 'medium',\n    // Makes the body span to the bottom of the page\n    minHeight: \"100vh\",\n  },\n});\n\n/**\n * CSS for buttons\n */\nexport const basicButtonStyle = css({\n  borderRadius: '10px',\n  cursor: \"pointer\",\n  // Animation\n  transitionDuration: \"0.3s\",\n  transitionProperty: \"transform\",\n  \"&:hover\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:focus\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:active\": {\n    transform: 'scale(0.9)',\n  },\n  // Flex position child elements\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  gap: '10px',\n  textAlign: 'center' as const,\n});\n\n/**\n * CSS for a container that holds back/forward buttons\n */\nexport const backOrContinueStyle = css(({\n  display: 'flex',\n  flexDirection: 'row' as const,\n  gap: '20px',\n}))\n\n/**\n * CSS for ariaLive regions that should not be visible\n */\nexport const ariaLive = css({\n  position: 'absolute',\n  left: '-99999px',\n  height: '1px',\n  width: '1px',\n  overflow: 'hidden',\n})","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\n/**\n * Client I stole this form a react tutorial\n */\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const encoded = btoa(unescape(encodeURIComponent(\n    \"admin:opencast\"\n  )));\n  const authHeaders = { 'Authorization': `Basic ${encoded}` };\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n      ...authHeaders,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  let text\n  try {\n    const response = await window.fetch(endpoint, config)\n    text = await response.text()\n    text.length ? data = JSON.parse(text) : data = ''\n    // data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","export const roundToDecimalPlace = (num: number, decimalPlace: number) => {\n  let decimalFactor = Math.pow(10, decimalPlace)\n  return Math.round((num + Number.EPSILON) * decimalFactor) / decimalFactor\n}\n\n\n// Returns a promise that resolves after `ms` milliseconds.\nexport const sleep = (ms: number) => new Promise((resolve, reject) => setTimeout(resolve, ms));","import { createSlice, nanoid, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\nimport { Segment, httpRequestState, Track, RequestArgument }  from '../types'\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\nimport { WritableDraft } from 'immer/dist/internal';\n\nexport interface video {\n  isPlaying: boolean,             // Are videos currently playing?\n  isPlayPreview: boolean,         // Should deleted segments be skipped?\n  previewTriggered: boolean,      // Basically acts as a callback for the video players. TODO: Figure out how to do callbacks\n  currentlyAt: number,            // Position in the video in milliseconds\n  segments: Segment[],\n  tracks: Track[],\n  activeSegmentIndex: number,     // Index of the segment that is currenlty hovered\n  selectedWorkflowIndex: number,  // Index of the currently selected workflow\n\n  videoURLs: string[],  // Links to each video\n  videoCount: number,   // Total number of videos\n  duration: number,     // Video duration in milliseconds\n  title: string,\n  presenters: string[],\n  workflows: string[],\n}\n\nconst initialState: video & httpRequestState = {\n  isPlaying: false,\n  isPlayPreview: true,\n  currentlyAt: 0,   // Position in the video in milliseconds\n  segments: [{id: nanoid(), start: 0, end: 1, deleted: false}],\n  tracks: [],\n  activeSegmentIndex: 0,\n  selectedWorkflowIndex: 0,\n  previewTriggered: false,\n\n  videoURLs: [],\n  videoCount: 0,\n  duration: 0,\n  title: '',\n  presenters: [],\n  workflows: [],\n\n  status: 'idle',\n  error: undefined,\n}\n\nexport const fetchVideoInformation = createAsyncThunk('video/fetchVideoInformation', async (argument: RequestArgument) => {\n  // const response = await client.get('https://legacy.opencast.org/admin-ng/tools/ID-dual-stream-demo/editor.json')\n  const response = await client.get(`${argument.ocUrl}/editor/${argument.mediaPackageId}/edit.json`)\n  return response\n})\n\n/**\n * Slice for the state of the \"video\"\n * Treats the multitude of videos that may exist as one video\n * TODO: Find a way to init the segments array with a starting segment\n */\nexport const videoSlice = createSlice({\n  name: 'videoState',\n  initialState,\n  reducers: {\n    setIsPlaying: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlaying = action.payload;\n    },\n    setIsPlayPreview: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlayPreview = action.payload;\n    },\n    setPreviewTriggered: (state, action) => {\n      state.previewTriggered = action.payload\n    },\n    setCurrentlyAt: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload, 0);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    setCurrentlyAtInSeconds: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload * 1000, 0);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    addSegment: (state, action: PayloadAction<video[\"segments\"][0]>) => {\n      state.segments.push(action.payload)\n    },\n    cut: (state) => {\n      // If we're exactly between two segments, we can't split the current segment\n      if (state.segments[state.activeSegmentIndex].start === state.currentlyAt ||\n          state.segments[state.activeSegmentIndex].end === state.currentlyAt ) {\n        return state;\n      }\n\n      // Make two (new) segments out of it\n      let segmentA : Segment =  {id: nanoid(),\n        start: state.segments[state.activeSegmentIndex].start,\n        end: state.currentlyAt,\n        deleted: state.segments[state.activeSegmentIndex].deleted}\n      let segmentB : Segment =  {id: nanoid(),\n        start: state.currentlyAt,\n        end: state.segments[state.activeSegmentIndex].end,\n        deleted: state.segments[state.activeSegmentIndex].deleted}\n\n      // Add the new segments and remove the old one\n      state.segments.splice(state.activeSegmentIndex, 1, segmentA, segmentB);\n    },\n    markAsDeletedOrAlive: (state) => {\n      state.segments[state.activeSegmentIndex].deleted = !state.segments[state.activeSegmentIndex].deleted\n    },\n    setSelectedWorkflowIndex: (state, action: PayloadAction<video[\"selectedWorkflowIndex\"]>) => {\n      state.selectedWorkflowIndex = action.payload\n    },\n    mergeLeft: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex - 1)\n    },\n    mergeRight: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex + 1)\n    },\n  },\n  // For Async Requests\n  extraReducers: builder => {\n    builder.addCase(\n      fetchVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n\n        // // Old API\n        // // eslint-disable-next-line no-sequences\n        // state.videoURLs = action.payload.previews.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        // state.videoCount = action.payload.previews.length\n        // state.duration = action.payload.duration\n        // state.title = action.payload.title\n        // state.presenters = action.payload.presenters\n        // state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        // state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n        //   if (n1.displayOrder > n2.displayOrder) { return 1; }\n        //   if (n1.displayOrder < n2.displayOrder) { return -1; }\n        //   return 0;\n        // });\n\n        // New API\n        // eslint-disable-next-line no-sequences\n        state.videoURLs = action.payload.tracks.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        state.videoCount = action.payload.tracks.length\n        state.duration = action.payload.duration\n        state.title = action.payload.title\n        state.presenters = []\n        state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        state.tracks = action.payload.tracks\n        state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n          if (n1.displayOrder > n2.displayOrder) { return 1; }\n          if (n1.displayOrder < n2.displayOrder) { return -1; }\n          return 0;\n        });\n    })\n    builder.addCase(\n      fetchVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\n/**\n * Helper function to update the activeSegmentIndex\n * @param state\n */\nconst updateActiveSegment = (state: WritableDraft<video>) => {\n  state.activeSegmentIndex = state.segments.findIndex(element =>\n    element.start <= state.currentlyAt && element.end >= state.currentlyAt)\n  // TODO: Proper error handling. Rewrite function?\n  if(state.activeSegmentIndex < 0) {\n    state.activeSegmentIndex = 0\n  }\n}\n\n/**\n * Helper Function for testing with current/old editor API\n */\nconst parseSegments = (segments: any, duration: number) => {\n  let newSegments : Segment[] = []\n\n  if (segments.length === 0) {\n    newSegments.push({id: nanoid(), start: 0, end: duration, deleted: false})\n  }\n\n  segments.forEach((element: { start: any; end: any; deleted: any; }) => {\n    newSegments.push({id: nanoid(), start: element.start, end: element.end, deleted: element.deleted})\n  });\n  return newSegments\n}\n\n/**\n * Helper function for merging two segments\n */\nconst mergeSegments = (state: WritableDraft<video>, activeSegmentIndex: number, mergeSegmentIndex: number) => {\n  // Check if mergeSegmentIndex is valid\n  if (mergeSegmentIndex < 0 || mergeSegmentIndex > state.segments.length - 1) {\n    return\n  }\n\n  // Increase activeSegment length\n  state.segments[activeSegmentIndex].start = Math.min(\n    state.segments[activeSegmentIndex].start, state.segments[mergeSegmentIndex].start)\n  state.segments[activeSegmentIndex].end = Math.max(\n    state.segments[activeSegmentIndex].end, state.segments[mergeSegmentIndex].end)\n\n  // Remove the other segment\n  state.segments.splice(mergeSegmentIndex, 1);\n\n  // Update active segment\n  updateActiveSegment(state)\n}\n\nconst skipDeletedSegments = (state: WritableDraft<video>) => {\n  if(state.isPlaying && state.segments[state.activeSegmentIndex].deleted && state.isPlayPreview) {\n      let endTime = state.segments[state.activeSegmentIndex].end\n      let index = state.activeSegmentIndex\n      while (index < state.segments.length && state.segments[index].deleted) {\n        endTime = state.segments[index].end\n        index++\n      }\n      state.currentlyAt = endTime\n      state.previewTriggered = true\n    }\n}\n\nexport const { setIsPlaying, setIsPlayPreview, setCurrentlyAt, setCurrentlyAtInSeconds, addSegment, cut, markAsDeletedOrAlive,\n  setSelectedWorkflowIndex, mergeLeft, mergeRight, setPreviewTriggered } = videoSlice.actions\n\n// Export selectors\n// Selectors mainly pertaining to the video state\nexport const selectIsPlaying = (state: { videoState: { isPlaying: video[\"isPlaying\"] }; }) =>\n  state.videoState.isPlaying\nexport const selectIsPlayPreview = (state: { videoState: { isPlayPreview: video[\"isPlayPreview\"] }; }) =>\n  state.videoState.isPlayPreview\nexport const selectPreviewTriggered = (state: { videoState: { previewTriggered: video[\"previewTriggered\"] } }) =>\n  state.videoState.previewTriggered\nexport const selectCurrentlyAt = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt\nexport const selectCurrentlyAtInSeconds = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt / 1000\nexport const selectSegments = (state: { videoState: { segments: video[\"segments\"] } }) =>\n  state.videoState.segments\nexport const selectActiveSegmentIndex = (state: { videoState: { activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  state.videoState.activeSegmentIndex\nexport const selectIsCurrentSegmentAlive = (state: { videoState:\n  { segments: { [x: number]: { deleted: boolean; }; }; activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  !state.videoState.segments[state.videoState.activeSegmentIndex].deleted\nexport const selectSelectedWorkflowIndex = (state: { videoState:\n  { selectedWorkflowIndex: video[\"selectedWorkflowIndex\"]; }; }) =>\n  state.videoState.selectedWorkflowIndex\n\n// Selectors mainly pertaining to the information fetched from Opencast\nexport const selectVideoURL = (state: { videoState: { videoURLs: video[\"videoURLs\"] } }) => state.videoState.videoURLs\nexport const selectVideoCount = (state: { videoState: { videoCount: video[\"videoCount\"] } }) => state.videoState.videoCount\nexport const selectDuration = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration\nexport const selectDurationInSeconds = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration / 1000\nexport const selectTitle = (state: { videoState: { title: video[\"title\"] } }) => state.videoState.title\nexport const selectPresenters = (state: { videoState: { presenters: video[\"presenters\"] } }) => state.videoState.presenters\nexport const selectTracks = (state: { videoState: { tracks: video[\"tracks\"] } }) =>\n  state.videoState.tracks\nexport const selectWorkflows = (state: { videoState: { workflows: video[\"workflows\"] } }) => state.videoState.workflows\n\nexport default videoSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm, faListUl, faPhotoVideo, faSignOutAlt, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setState, selectMainMenuState, mainMenu } from '../redux/mainMenuSlice'\nimport { setPageNumber } from '../redux/finishSlice'\n\nimport { MainMenuStateNames } from '../types'\nimport { showMetadata, showThumbnail } from '../config'\nimport { basicButtonStyle } from '../cssStyles'\nimport { setIsPlaying } from \"../redux/videoSlice\";\n\n/**\n * A container for selecting the functionality shown in the main part of the app\n */\nconst MainMenu: React.FC<{}> = () => {\n\n  const mainMenuStyle = css({\n    borderRight: '1px solid #BBB',\n    width: '100px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    flexShrink: 0,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  });\n\n  return (\n    <nav css={mainMenuStyle} title=\"Main Menu\" role=\"navigation\" aria-label=\"Main Navigation\">\n      <MainMenuButton iconName={faFilm} stateName={MainMenuStateNames.cutting}/>\n      {showMetadata && <MainMenuButton iconName={faListUl} stateName={MainMenuStateNames.metadata}/>}\n      {showThumbnail && <MainMenuButton iconName={faPhotoVideo} stateName={MainMenuStateNames.thumbnail}/>}\n      <MainMenuButton iconName={faSignOutAlt} stateName={MainMenuStateNames.finish}/>\n    </nav>\n  );\n};\n\n/**\n * A button to set the state of the app\n * @param param0\n */\nconst MainMenuButton: React.FC<{iconName: IconDefinition, stateName: mainMenu[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectMainMenuState)\n\n  const onMenuItemClicked = () => {\n    dispatch(setState(stateName));\n    // Reset multi-page content to their first page\n    if (stateName === MainMenuStateNames.finish) {\n      dispatch(setPageNumber(0))\n    }\n    // Halt ongoing events\n    dispatch(setIsPlaying(false))\n  }\n\n  const mainMenuButtonStyle = css({\n    width: '100%',\n    height: '100px',\n    ...(activeState === stateName) && {\n      backgroundColor: '#DDD',\n    },\n    flexDirection: 'column' as const,\n  });\n\n  return (\n    <li css={[basicButtonStyle, mainMenuButtonStyle]}\n      role=\"menuitem\" tabIndex={0}\n      onClick={ onMenuItemClicked }\n      onKeyDown={(event: React.KeyboardEvent<HTMLLIElement>) => { if (event.key === \"Enter\") {\n        onMenuItemClicked()\n      }}}\n      >\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </li>\n  );\n};\n\nexport default MainMenu;\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { httpRequestState } from '../types'\nimport { mediaPackageId, ocUrl } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faToggleOn, faToggleOff} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectCurrentlyAtInSeconds, setIsPlaying, setCurrentlyAtInSeconds,\n  fetchVideoInformation, selectVideoURL, selectVideoCount, selectDurationInSeconds, selectTitle, selectPresenters,\n  setPreviewTriggered, selectPreviewTriggered, selectIsPlayPreview, setIsPlayPreview\n} from '../redux/videoSlice'\n\nimport ReactPlayer from 'react-player'\n\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\n\n/**\n * Container for the videos and their controls\n * TODO: Complete fetching\n * TODO: Move fetching to a more central part of the app\n */\nconst Video: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const videoURLs = useSelector(selectVideoURL)\n  const videoCount = useSelector(selectVideoCount)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n  const error = useSelector((state: { videoState: { error: httpRequestState[\"error\"] } }) => state.videoState.error)\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (videoURLStatus === 'idle') {\n      dispatch(fetchVideoInformation({mediaPackageId: mediaPackageId, ocUrl: ocUrl}))\n    }\n  }, [videoURLStatus, dispatch])\n\n  // Update based on current fetching status\n  let content\n  if (videoURLStatus === 'loading') {\n    content = <div className=\"loader\">Loading...</div>\n  } else if (videoURLStatus === 'success') {\n    content = \"\"//<div className=\"loader\">Success...</div>\n  } else if (videoURLStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n\n  // Initialize video players\n  const videoPlayers: JSX.Element[] = [];\n  for (let i = 0; i < videoCount; i++) {\n    // videoPlayers.push(<VideoPlayer key={i} url='https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4' />);\n    videoPlayers.push(<VideoPlayer key={i} url={videoURLs[i]} isMuted={i !== 0}/>);\n  }\n\n  // Style\n  const videoAreaStyle = css({\n    display: 'flex',\n    width: 'auto',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '0px',\n    borderBottom: '1px solid #BBB',\n  });\n\n  const videoPlayerAreaStyle = css({\n    backgroundColor: 'black',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  });\n\n  return (\n    <div css={videoAreaStyle} title=\"Video Area\">\n      {content}\n      <VideoHeader />\n      <div css={videoPlayerAreaStyle} title=\"Video Player Area\">\n        {videoPlayers}\n      </div>\n      <VideoControls />\n    </div>\n  );\n};\n\n/**\n * A single video player\n * @param param0\n */\nconst VideoPlayer: React.FC<{url: string, isMuted: boolean}> = ({url, isMuted}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAtInSeconds)\n  const duration  = useSelector(selectDurationInSeconds)\n  const testTmp = useSelector(selectPreviewTriggered)\n\n  // Init state variables\n  const ref = useRef<ReactPlayer>(null);\n  const [ready, setReady] = useState(false);\n\n  // Callback for when the video is playing\n  const onProgressCallback = (state: { played: number, playedSeconds: number, loaded: number, loadedSeconds:  number }) => {\n    // Only update redux if there was a substantial change\n    if (roundToDecimalPlace(currentlyAt, 3) !== roundToDecimalPlace(state.playedSeconds, 3)) {\n      dispatch(setCurrentlyAtInSeconds(state.playedSeconds))\n    }\n  }\n\n  // Callback for checking whether the video element is ready\n  const onReadyCallback = () => {\n    setReady(true);\n  }\n\n  const onEndedCallback = () => {\n    dispatch(setIsPlaying(false));\n    dispatch(setCurrentlyAtInSeconds(duration)); // It seems onEnded is called before the full duration is reached, so we set currentlyAt to the very end\n  }\n\n  useEffect(() => {\n    // Seek if the position in the video got changed externally\n    if(!isPlaying && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n    }\n    if(testTmp && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n      dispatch(setPreviewTriggered(false))\n    }\n  })\n\n  return (\n    <ReactPlayer url={url}\n      ref={ref}\n      width='100%'\n      height='auto'\n      playing={isPlaying}\n      muted={isMuted}\n      onProgress={onProgressCallback}\n      progressInterval={100}\n      onReady={onReadyCallback}\n      onEnded={onEndedCallback}\n      pip={false}\n      tabIndex={-1}\n    />\n  );\n\n  // return (\n  //   <div title=\"Video Player\">\n  //     <video width=\"320\" height=\"240\" controls ref={vidRef}>\n  //     <source src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4\" type=\"video/mp4\" />\n  //     Your browser does not support the video tag.\n  //     </video>\n  //   </div>\n  // );\n};\n\n/**\n * Contains controls for manipulating multiple video players at once\n * TODO: Add missing controls\n * TODO: Turn time display into a control\n */\nconst VideoControls: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const isPlayPreview = useSelector(selectIsPlayPreview)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n\n  // Change preview mode from \"on\" to \"off\" and vice versa\n  const switchPlayPreview = () => {\n    dispatch(setIsPlayPreview(!isPlayPreview))\n  }\n\n  // Change play mode from \"on\" to \"off\" and vice versa\n  const switchIsPlaying = () => {\n    dispatch(setIsPlaying(!isPlaying))\n  }\n\n  // Style\n  const videoControlStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n  })\n\n  const videoControlsRowStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n    gap: '50px',\n  })\n\n  const playButtonStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const playPreviewStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.05)',\n    },\n  })\n\n  return (\n    <div css={videoControlStyle} title=\"Video Controls\">\n      <div css={videoControlsRowStyle} title=\"Video Controls Top Row\">\n        <div css={{display: 'flex', gap: '10px', justifyContent: 'center', alignItems: 'center'}}\n          title={\"Skips deleted segments when playing the video. Currently \" + (isPlayPreview ? \"on\" : \"off\")}>\n          <div css={{display: 'inline-block', flexWrap: 'nowrap'}}>\n            Preview Mode\n          </div>\n          <FontAwesomeIcon css={playPreviewStyle} icon={isPlayPreview ? faToggleOn : faToggleOff} size=\"1x\"\n            role=\"switch\" aria-checked={isPlayPreview} tabIndex={0} aria-hidden={false}\n            aria-label=\"Enable or disable preview mode.\"\n            onClick={ switchPlayPreview }\n            onKeyDown={(event: React.KeyboardEvent<SVGSVGElement>) => { if (event.key === \" \") {\n              switchPlayPreview()\n            }}}\n          />\n        </div>\n        <FontAwesomeIcon css={playButtonStyle} icon={isPlaying ? faPause : faPlay} size=\"2x\"\n          title=\"Play Button\"\n          role=\"button\" aria-pressed={isPlaying} tabIndex={0} aria-hidden={false}\n          aria-label=\"Play Button\"\n          onClick={ switchIsPlaying }\n          onKeyDown={(event: React.KeyboardEvent<SVGSVGElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n            switchIsPlaying()\n          }}}\n        />\n        <time css={{display: 'inline-block', width: '110px'}}\n          tabIndex={0} role=\"timer\">\n          {new Date((currentlyAt ? currentlyAt : 0)).toISOString().substr(11, 12)}\n        </time>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Displays elements above the video, e.g. title\n */\nconst VideoHeader: React.FC<{}> = () => {\n  const title = useSelector(selectTitle)\n  const presenters = useSelector(selectPresenters)\n\n  const titleStyle = css({\n    display: 'inline-block',\n    padding: '15px',\n    overflow: 'hidden',\n    whiteSpace: \"nowrap\",\n    textOverflow: 'ellipsis',\n    maxWidth: '500px',\n  })\n\n  const titleStyleBold = css({\n    fontWeight: 'bold',\n    fontSize: '24px',\n    verticalAlign: '-2.5px',\n  })\n\n  let presenter_header;\n  if (presenters && presenters.length) {\n      presenter_header = <div css={titleStyle} title=\"Video Presenters\">by {presenters.join(\", \")}</div>\n  }\n  return (\n    <div title=\"Video Area Header\" css={{fontSize: '16px'}}>\n      <div css={[titleStyle, titleStyleBold]} title=\"Video Title\">{title}</div>\n      {presenter_header}\n    </div>\n  );\n}\n\nexport default Video;\n","/**\n * Big thanks to Duncan \"slampunk\" Smith for writing this code and allowing it\n * to be used for this application.\n * duncan83@gmail.com\n */\n\nexport function Waveform(opts) {\n  this.audioContext = new AudioContext();\n  this.oCanvas = document.createElement('canvas');\n  this.buffer = {};\n  this.WIDTH = 0;\n  this.HEIGHT = 0;\n  this.channelData = [];\n  this.waveformImage = '';\n  this.audioBuffer = null;\n\n  this.aveRMS = 0;\n  this.peakRMS = 0;\n\n  this.numberSamples = 100000;\n  this.waveformType = 'img';\n  this.drawWaveform = this.drawCanvasWaveform;\n\n  if (opts.width && opts.height) {\n    this.setDimensions(opts.width, opts.height);\n  }\n  if (opts.samples) {\n    this.numberSamples = opts.samples;\n  }\n  if (opts.type && opts.type === 'svg') {\n    this.waveformType = 'svg';\n    this.drawWaveform = this.delegateToWorker;\n    this.worker = null;\n  }\n  if (opts.media) {\n    this.generateWaveform(opts.media)\n      .then(() => {\n        this.getAudioData();\n        this.drawWaveform();\n        if (this.waveformType !== 'svg') {\n          _completeFuncs.forEach(fn => {\n            fn(this.waveformImage || this.svgPath, this.waveformType);\n          });\n        }\n      })\n      .catch(e => console.log(e));\n  }\n\n  var _completeFuncs = [];\n  Object.defineProperty(this, 'oncomplete', {\n    get: function() {\n      return _completeFuncs;\n    },\n    set: function(fn, opt) {\n      if (typeof fn == 'function') {\n        if (this.waveformImage || this.svgPath) {\n          fn(this.waveformImage || this.svgPath, this.svgLength);\n          return;\n        }\n\n        _completeFuncs.push(fn);\n      }\n    }\n  });\n}\n\nWaveform.prototype = {\n  constructor: Waveform,\n  setDimensions: function(width, height) {\n    this.oCanvas.width = width;\n    this.WIDTH = width;\n    this.oCanvas.height = height;\n    this.HEIGHT = height;\n    this.ocCtx = this.oCanvas.getContext('2d');\n  },\n  decodeAudioData: function(arraybuffer) {\n    return new Promise((resolve, reject) => {\n      new Promise((res, rej) => {\n        if (arraybuffer instanceof ArrayBuffer) {\n          res(arraybuffer);\n        }\n        else if (arraybuffer instanceof Blob) {\n          let reader = new FileReader();\n          reader.onload = function() {\n            res(reader.result);\n          }\n          reader.readAsArrayBuffer(arraybuffer);\n        }\n      })\n      .then(buffer => {\n        this.audioContext.decodeAudioData(buffer)\n          .then(audiobuffer => {\n            this.buffer = audiobuffer;\n            resolve();\n          })\n          .catch(e => {\n            reject(e);\n          })\n      })\n      .catch(e => {\n        reject(e);\n      })\n    })\n  },\n  getAudioData: function(buffer) {\n    buffer = buffer || this.buffer;\n    this.channelData = this.dropSamples(buffer.getChannelData(0), this.numberSamples);\n  },\n  drawCanvasWaveform: function(amp) {\n    amp = amp || 1;\n    this.ocCtx.fillStyle = '#FFFFFF00'; //'#b7d8f9';\n    this.ocCtx.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n    this.ocCtx.lineWidth = 1;\n    this.ocCtx.strokeStyle = 'black'; //'#38597a';\n    let sliceWidth = this.WIDTH * 1.0 / this.channelData.length;\n    let x = 0;\n\n    this.ocCtx.beginPath();\n    this.ocCtx.moveTo(x, this.channelData[0] * this.HEIGHT / 128.0 / 2);\n\n    this.channelData.forEach(sample => {\n      let v = sample * amp;\n      let y = this.HEIGHT * (1 + v) / 2;\n      this.ocCtx.lineTo(x, y);\n      this.aveRMS += sample * sample;\n      this.peakRMS = Math.max(sample * sample, this.peakRMS);\n      x += sliceWidth;\n    });\n    this.ocCtx.lineTo(this.WIDTH, this.HEIGHT/2);\n    this.ocCtx.stroke();\n    this.aveRMS = Math.sqrt(this.aveRMS / this.channelData.length);\n    this.aveDBs = 20 * Math.log(this.aveRMS) / Math.log(10);\n    this.waveformImage = this.oCanvas.toDataURL();\n  },\n  dropSamples: function(data, requestedLength) {\n    let divider = Math.max(parseInt(data.length / requestedLength), 1);\n    return data.filter((sample, i) => i % divider === 0);\n  },\n  generateWaveform: function(arraybuffer) {\n    return this.decodeAudioData(arraybuffer);\n  },\n  delegateToWorker: function() {\n    if (!this.worker) {\n      this.worker = new Worker('../util/svgworker.js');\n      this.worker.addEventListener('message', this.workerCommunication.bind(this), false);\n      this.worker.postMessage(this.channelData);\n    }\n  },\n  workerCommunication: function(e) {\n    switch(e.data.type) {\n      case 'path':\n        this.setSVGpath(e.data.path, e.data.length);\n        this.worker.removeEventListener('message', this.workerCommunication.bind(this), false);\n        this.worker.terminate();\n        this.worker = null;\n        break;\n      default:\n        break;\n    }\n  },\n  setSVGpath: function(path, len) {\n    this.svgPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    this.svgLength = len;\n\n    this.svgPath.setAttribute('d', path);\n    this.svgPath.setAttribute('vector-effect', 'non-scaling-stroke');\n    this.svgPath.setAttribute('stroke-width', '0.5px');\n\n    this.oncomplete.forEach(fn => fn(this.svgPath, this.svgLength));\n  }\n};\n","import React, { useState, useRef, useEffect } from 'react'\n\nimport Draggable from 'react-draggable';\n\nimport { css } from '@emotion/core'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment, httpRequestState } from '../types'\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectSegments, selectActiveSegmentIndex, selectDuration,\n  selectVideoURL, setCurrentlyAt\n} from '../redux/videoSlice'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\n\nimport useResizeObserver from \"use-resize-observer\";\n\nimport { Waveform } from '../util/waveform'\n\n/**\n * A container for visualizing the cutting of the video, as well as for controlling\n * the current position in the video\n * Its width corresponds to the duration of the video\n */\nconst Timeline: React.FC<{}> = () => {\n\n  const { ref, width = 1, } = useResizeObserver<HTMLDivElement>();\n\n  const timelineStyle = css({\n    position: 'relative' as 'relative',     // Need to set position for Draggable bounds to work\n    height: '250px',\n    width: '100%',\n    //backgroundImage: `url({myImg})`,\n  });\n\n  return (\n  <div ref={ref} css={timelineStyle} title=\"Timeline\">\n    <Scrubber timelineWidth={width}/>\n    <div css={{height: '230px'}}>\n      <Waveforms />\n      <SegmentsList timelineWidth={width}/>\n    </div>\n  </div>\n  );\n};\n\n/**\n * Displays and defines the current position in the video\n * TODO: Fix position fail when starting and then quickly stopping the video\n *       Possibly because state.playedSceonds in Video is faulty for small values\n * TODO: Fix timeline width changes\n * @param param0\n */\nconst Scrubber: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n\n  // Init state variables\n  const [controlledPosition, setControlledPosition] = useState({x: 0,y: 0,});\n  const [isGrabbed, setIsGrabbed] = useState(false)\n  const wasCurrentlyAtRef = useRef(0)\n  const nodeRef = React.useRef(null); // For supressing \"ReactDOM.findDOMNode() is deprecated\" warning\n\n  // Reposition scrubber when the current x position was changed externally\n  useEffect(() => {\n    if(currentlyAt !== wasCurrentlyAtRef.current) {\n      updateXPos();\n      wasCurrentlyAtRef.current = currentlyAt;\n    }\n  })\n\n  // Reposition scrubber when the timeline width changes\n  useEffect(() => {\n    if(currentlyAt && duration) {\n      setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timelineWidth])\n\n  // Callback for when the scrubber gets dragged by the user\n  // const onControlledDrag = (e: any, position: any) => {\n  //   const {x, y} = position;\n  //   dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n  // };\n\n  // Callback for when the position changes by something other than dragging\n  const updateXPos = () => {\n    const y = controlledPosition.y;\n    setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y});\n  };\n\n  const onStartDrag = () => {\n    setIsGrabbed(true)\n  }\n\n  const onStopDrag = (e: any, position: any) => {\n    const {x, y} = position;\n    setControlledPosition({x, y});\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n\n    setIsGrabbed(false)\n  }\n\n  const scrubberStyle = css({\n    backgroundColor: 'black',\n    height: '250px',\n    width: '1px',\n    position: 'absolute' as 'absolute',\n    zIndex: 2,\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  });\n\n  const scrubberDragHandleStyle = css({\n    backgroundColor: 'rgba(255, 255, 255, 1)',\n    borderRadius: '10px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: isGrabbed ? \"grabbing\" : \"grab\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const scrubberDragHandleIconStyle = css({\n    transform: 'scaleY(1.5) rotate(90deg)',\n    padding: '5px',\n  })\n\n  const arrowUpStyle = css({\n    width: 0,\n    height: 0,\n    borderLeft: '7px solid transparent',\n    borderRight: '7px solid transparent',\n    borderBottom: '7px solid black',\n  })\n\n  const arrowDownStyle = css({\n    width: 0,\n    height: 0,\n    borderLeft: '7px solid transparent',\n    borderRight: '7px solid transparent',\n    borderTop: '7px solid black',\n  })\n\n  return (\n    <Draggable\n      //onDrag={onControlledDrag}\n      onStart={onStartDrag}\n      onStop={onStopDrag}\n      axis=\"x\"\n      bounds=\"parent\"\n      position={controlledPosition}\n      disabled={isPlaying}\n      nodeRef={nodeRef}\n      >\n      <div ref={nodeRef} css={scrubberStyle} title=\"Scrubber\">\n        <div css={arrowDownStyle}></div>\n        <div css= {scrubberDragHandleStyle} title=\"dragHandle\" aria-grabbed={isGrabbed}>\n          <FontAwesomeIcon css={scrubberDragHandleIconStyle} icon={faBars} size=\"1x\" />\n        </div>\n        <div css={arrowUpStyle}></div>\n      </div>\n    </Draggable>\n  );\n};\n\n/**\n * Container responsible for rendering the segments that are created when cuting\n * TODO: Complete styling\n */\nconst SegmentsList: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const segments = useSelector(selectSegments)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)\n\n  /**\n   * Returns a background color based on whether the segment is to be deleted\n   * and whether the segment is currently active\n   */\n  const bgColor = (deleted: boolean, active: boolean) => {\n    if (!deleted && !active) {\n      return 'rgba(0, 0, 255, 0.4)'\n    } else if (deleted && !active) {\n      return `repeating-linear-gradient(\n                -45deg,\n                rgba(255, 45, 45, 0.4),\n                rgba(255, 45, 45, 0.4) 10px,\n                rgba(255, 0, 0, 0.4) 10px,\n                rgba(255, 0, 0, 0.4) 20px);`\n    } else if (!deleted && active) {\n      return 'rgba(0, 0, 200, 0.4)'\n    } else if (deleted && active) {\n      return `repeating-linear-gradient(\n                -45deg,\n                rgba(200, 45, 45, 0.4),\n                rgba(200, 45, 45, 0.4) 10px,\n                rgba(200, 0, 0, 0.4) 10px,\n                rgba(200, 0, 0, 0.4) 20px);`\n    }\n  }\n\n  // Render the individual segments\n  const renderedSegments = () => {\n    return (\n      segments.map( (segment: Segment, index: number) => (\n        <div key={segment.id} title=\"Segment\" css={{\n          background: bgColor(segment.deleted, activeSegmentIndex === index),\n          borderRadius: '5px',\n          borderStyle: activeSegmentIndex === index ? 'dashed' : 'solid',\n          borderColor: 'white',\n          borderWidth: '1px',\n          boxSizing: 'border-box',\n          width: ((segment.end - segment.start) / duration) * 100 + '%',\n          height: '230px',\n          zIndex: 1,\n        }}>\n        </div>\n      ))\n    );\n  }\n\n  const segmentsStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    paddingTop: '10px',\n  })\n\n  return (\n    <div css={segmentsStyle} title=\"Segments\">\n      {renderedSegments()}\n    </div>\n  );\n};\n\n/**\n * Generates waveform images and displays them\n */\nconst Waveforms: React.FC<{}> = () => {\n\n  const videoURLs = useSelector(selectVideoURL)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n\n  const waveformDisplayTestStyle = css({\n    display: 'flex',\n    flexDirection: 'column',\n    position: \"absolute\" as \"absolute\",\n    justifyContent: 'center',\n    width: '100%',\n    height: '230px',\n    paddingTop: '10px',\n  });\n\n  // Update based on current fetching status\n  const [images, setImages] = useState<string[]>([])\n\n  // When the URLs to the videos are fetched, generate waveforms\n  useEffect( () => {\n    if (videoURLStatus === 'success') {\n      const images: string[] = []    // Store local paths to image files\n      let waveformsProcessed : number = 0  // Counter for checking if all workers are done\n\n      // Only display the waveform of the first video we get\n      const onlyOneURL = [videoURLs[0]]\n\n      onlyOneURL.forEach((videoURL, _index, array) => {\n        // Set up blob request\n        var blob = null\n        var xhr = new XMLHttpRequest()\n        xhr.open(\"GET\", videoURL)\n        xhr.responseType = \"blob\"\n        xhr.onload = function()\n        {\n          blob = xhr.response\n          var file = new File([blob], blob)\n\n          // Start waveform worker with blob\n          const waveformWorker : any = new Waveform({type: 'img', width: '2000', height: '230', samples: 100000, media: file});\n          // When done, save path to generated waveform img\n          waveformWorker.oncomplete = function(image: any, numSamples: any) {\n            images.push(image)\n            waveformsProcessed++\n            // If all images are generated, rerender\n            if (waveformsProcessed === array.length) {\n              setImages(images)\n            }\n          }\n        }\n        xhr.send()\n      })\n    }\n  }, [videoURLStatus, videoURLs]);\n\n\n  const renderImages = () => {\n    if (images) {\n      return (\n        images.map((image, index) =>\n          <img key={index} alt='Waveform' src={image ? image : \"\"} css={{minHeight: 0}}></img>\n        )\n      );\n    } else {\n      return (\n        <FontAwesomeIcon icon={faSpinner} spin size=\"3x\"/>\n      );\n    }\n  }\n\n  return (\n  <div css={waveformDisplayTestStyle} title=\"WaveformDisplayTest\">\n    {renderImages()}\n  </div>\n  );\n}\n\nexport default Timeline;\n","import React from \"react\";\n\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition,\n  faCut,\n  faQuestion,\n  faStepBackward,\n  faStepForward,\n  faTrash,\n  faTrashRestore,\n  } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  cut, markAsDeletedOrAlive, selectIsCurrentSegmentAlive, mergeLeft, mergeRight\n} from '../redux/videoSlice'\n\n/**\n * Defines the different actions a user can perform while in cutting mode\n */\nconst CuttingActions: React.FC<{}> = () => {\n\n  const cuttingStyle =  css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-between',\n    gap: '30px',\n  })\n\n  const blockStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    gap: '30px',\n  })\n\n  return (\n    <div css={cuttingStyle}>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faCut} actionName=\"Cut\" action={cut}\n            tooltip=\"Splits the segment at the current scrubber position\"\n            ariaLabelText=\"Cut. Splits the segment at the current scrubber position\"\n          />\n          <MarkAsDeletedButton />\n          <CuttingActionsButton iconName={faStepBackward} actionName=\"Merge Left\" action={mergeLeft}\n            tooltip=\"Combines the currently active segment with the segment to its left\"\n            ariaLabelText=\"Merge Left. Combines the currently active segment with the segment to its left\"\n          />\n          <CuttingActionsButton iconName={faStepForward} actionName=\"Merge Right\" action={mergeRight}\n            tooltip=\"Combines the currently active segment with the segment to its right\"\n            ariaLabelText=\"Merge Right. Combines the currently active segment with the segment to its right\"\n          />\n        </div>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Reset changes\" action={null}\n            tooltip=\"Not implemented\"\n            ariaLabelText=\"Reset changes. Not implemented\"\n          />\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Undo\" action={null}\n            tooltip=\"Not implemented\"\n            ariaLabelText=\"Undo. Not implemented\"\n          />\n        </div>\n    </div>\n  );\n};\n\n/**\n * CSS for cutting buttons\n */\nconst cuttingActionButtonStyle = {\n  padding: '16px',\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n};\n\ninterface cuttingActionsButtonInterface {\n  iconName: IconDefinition,\n  actionName: string,\n  action: any,\n  tooltip: string,\n  ariaLabelText: string,\n}\n\n/**\n * A button representing a single action a user can take while cutting\n * TODO: Add functionality\n * TODO: Complete styling\n * @param param0\n */\nconst CuttingActionsButton: React.FC<cuttingActionsButtonInterface> = ({iconName, actionName, action, tooltip, ariaLabelText}) => {\n\n  const dispatch = useDispatch();\n\n  const dispatchAction = () => {\n    if (action) {\n      dispatch(action())\n    }\n  }\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]}\n      title={tooltip}\n      role=\"button\" tabIndex={0} aria-label={ariaLabelText}\n      onClick={ dispatchAction }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        dispatchAction()\n      }}}\n      >\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{actionName}</span>\n    </div>\n  );\n};\n\n/**\n * Button that changes its function based on context\n */\nconst MarkAsDeletedButton : React.FC<{}> = () => {\n\n  const dispatch = useDispatch();\n  const isCurrentSegmentAlive = useSelector(selectIsCurrentSegmentAlive)\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]}\n      title=\"Marks the segment at the current scrubber position as deleted or alive\"\n      role=\"button\" tabIndex={0}\n      aria-label={\"Delete and Restore. Marks the segment at the current scrubber position as deleted or alive\"}\n      onClick={() => dispatch(markAsDeletedOrAlive())}>\n      <FontAwesomeIcon icon={isCurrentSegmentAlive ? faTrash : faTrashRestore} size=\"1x\" />\n      <div>{isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}</div>\n    </div>\n  );\n}\n\nexport default CuttingActions;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSave, faFileExport, faTimesCircle, IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch } from 'react-redux';\nimport { setState, setPageNumber, finish } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst FinishMenu : React.FC<{}> = () => {\n\n  const finishMenuStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-around',\n    gap: '30px',\n  })\n\n  return (\n    <div css={finishMenuStyle} title=\"Finish Menu\">\n        <FinishMenuButton iconName={faSave} stateName=\"Save changes\"/>\n        <FinishMenuButton iconName={faFileExport} stateName=\"Start processing\"/>\n        <FinishMenuButton iconName={faTimesCircle} stateName=\"Discard changes\"/>\n    </div>\n  );\n}\n\n/**\n * Buttons for the finish menu\n */\nconst FinishMenuButton: React.FC<{iconName: IconDefinition, stateName: finish[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n\n  const finish = () => {\n    dispatch(setState(stateName));\n    dispatch(setPageNumber(1))\n  }\n\n  const finishMenuButtonStyle = css({\n    width: '250px',\n    height: '220px',\n    flexDirection: 'column' as const,\n    fontSize: \"x-large\",\n    gap: '30px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  });\n\n  return (\n    <div css={[basicButtonStyle, finishMenuButtonStyle]}\n    role=\"button\" tabIndex={0}\n      onClick={ finish }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        finish()\n      }}}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\n\n\nexport default FinishMenu;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { Segment, PostEditArgument, httpRequestState } from '../types'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformation = createAsyncThunk('video/postVideoInformation', async (argument: PostEditArgument) => {\n  const response = await client.post(`${argument.ocUrl}/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostSlice = createSlice({\n  name: 'workflowPostState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\ninterface segmentAPI {\n  start: number,\n  end: number,\n  deleted: boolean,\n  selected: boolean,\n}\n\n// Convert a segment from how it is stored in redux into\n// a segment that can be send to Opencast\nexport const convertSegments = (segments: Segment[]) => {\n  let newSegments: segmentAPI[] = []\n\n  segments.forEach(segment => {\n    newSegments.push({\n      start: segment.start,\n      end: segment.end,\n      deleted: segment.deleted,\n      selected: false,\n    })\n  });\n\n  return newSegments\n}\n\nexport const selectStatus = (state: { workflowPostState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\nexport default workflowPostSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle, ariaLive } from '../cssStyles'\nimport { mediaPackageId, ocUrl } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSpinner, faCheck, faExclamationCircle, faChevronLeft, faSave,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { selectSegments, selectTracks } from '../redux/videoSlice'\nimport { postVideoInformation, selectStatus, selectError } from '../redux/workflowPostSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Shown if the user wishes to save.\n * Informs the user about saving and displays a save button\n */\nconst Save : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const postWorkflowStatus = useSelector(selectStatus);\n  const postError = useSelector(selectError)\n\n  const saveStyle = css({\n    height: '100%',\n    display: finishState !== \"Save changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '30px',\n  })\n\n  const errorBoxStyle = css({\n    ...(postWorkflowStatus !== 'failed') && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  return (\n    <div css={saveStyle} title=\"Save Area\">\n      <span>\n        Save the changes you made, but the video will not be cut yet. <br />\n        To make Opencast cut the video, please select \"Process\". <br />\n        Doth thou truly wish tah save?\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"No, take me back\" iconName={faChevronLeft}/>\n        <SaveButton />\n      </div>\n      <div css={errorBoxStyle} title=\"Error Box\" role=\"alert\">\n        <span>An error has occured. Please wait a bit and try again. Details: </span><br />\n        {postError}<br />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sends a post request to save current changes\n */\nconst SaveButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n\n  // Update based on current fetching status\n  let icon = faSave\n  let spin = false\n  let tooltip = \"Save Button\"\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n    spin = true\n    tooltip = \"Attempting to save\"\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n    spin = false\n    tooltip = \"Saved successfully\"\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n    spin = false\n    tooltip = \"Save failed\"\n  }\n\n  const ariaSaveUpdate = () => {\n    if(workflowStatus === 'success') {\n      return \"Saved successfully\"\n    }\n  }\n\n  const save = () => {\n    dispatch(postVideoInformation({\n      segments: segments,\n      tracks: tracks,\n      mediaPackageId: mediaPackageId,\n      ocUrl: ocUrl,\n    }))\n  }\n\n  const saveButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={tooltip}\n      role=\"button\" tabIndex={0}\n      onClick={ save }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        save()\n      }}}>\n      <FontAwesomeIcon icon={icon} spin={spin} size=\"1x\"/>\n      <span>{\"Yes, Save changes\"}</span>\n      <div css={ariaLive} aria-live=\"polite\" aria-atomic=\"true\">{ariaSaveUpdate()}</div>\n    </div>\n  );\n}\n\n\nexport default Save;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface abort {\n  value: boolean,\n}\n\nconst initialState: abort = {\n  value: false,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const abortSlice = createSlice({\n  name: 'abortState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<abort[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = abortSlice.actions\n\n// Export Selectors\nexport const selectAbortState = (state: { abortState: { value: abort[\"value\"] }; }) => state.abortState.value\n\nexport default abortSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle} from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faChevronLeft, faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { setState as setAbortState } from '../redux/abortSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Shown if the user wishes to abort.\n * Informs the user about aborting and displays abort button.\n */\nconst Discard : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const cancelStyle = css({\n    display: finishState !== \"Discard changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '30px',\n  })\n\n  return (\n    <div css={cancelStyle} title=\"Abort Area\">\n      <span>\n        Discard all the changes you made? They will be lost forever! <br />\n        Doth thou truly wish tah abort?\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"No, take me back\" iconName={faChevronLeft} />\n        <DiscardButton />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sets the app into an aborted state\n */\nconst DiscardButton : React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const abort = () => {\n    dispatch(setAbortState(true))\n  }\n\n  const saveButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Discard changes button\"}\n      role=\"button\" tabIndex={0}\n      onClick={ abort }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        abort()\n      }}}>\n      <FontAwesomeIcon  icon={faTimesCircle} size=\"1x\"/>\n      <span>{\"Yes, discard changes\"}</span>\n    </div>\n  );\n}\n\nexport default Discard;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle } from '../cssStyles'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, setSelectedWorkflowIndex } from '../redux/videoSlice'\nimport { selectFinishState, selectPageNumber } from '../redux/finishSlice'\n\nimport { PageButton } from './Finish'\nimport { faChevronLeft, faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\n\n/**\n * Allows the user to select a workflow\n */\nconst WorkflowSelection : React.FC<{}> = () => {\n\n  // Initialite redux states\n  const workflows = useSelector(selectWorkflows)\n  const finishState = useSelector(selectFinishState)\n  const pageNumber = useSelector(selectPageNumber)\n\n  // Create workflow selection\n  const workflowButtons = () => {\n    return (\n      workflows.map( (workflow: any, index: number) => (\n        <WorkflowButton key={index} stateName={workflow.name} workflowIndex={index}/>\n      ))\n    );\n  }\n\n  const workflowSelectionStyle = css({\n    display: (finishState === \"Start processing\" && pageNumber === 1) ? 'flex' : 'none',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '50px',\n  })\n\n  const workflowSelectionSelectionStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'left',\n    gap: '20px',\n  })\n\n  return (\n    <div css={workflowSelectionStyle}>\n      <h2>Select a workflow</h2>\n      <div css={workflowSelectionSelectionStyle} title=\"Workflow Selection Area\">\n        {workflowButtons()}\n      </div>\n      <div>And this is where I would put a workflow description.... if I had one!</div>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"Take me back\" iconName={faChevronLeft}/>\n        <PageButton pageNumber={2} label=\"Continue\" iconName={faChevronRight}/>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Clicking this button sets the associated workflow as selected\n * @param param0\n */\nconst WorkflowButton: React.FC<{stateName: string, workflowIndex: number}> = ({stateName, workflowIndex}) => {\n\n  const dispatch = useDispatch();\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const selectWorkflowIndex = () => {\n    dispatch(setSelectedWorkflowIndex(workflowIndex))\n  }\n\n  const workflowButtonStyle = css({\n    backgroundColor: workflowIndex !== selectedWorkflowIndex ? 'snow' : '#DDD',\n    padding: '16px',\n  });\n\n  return (\n    <div css={[basicButtonStyle,workflowButtonStyle]} title={\"Click to select this workflow\"}\n      role=\"button\" tabIndex={0}\n      aria-label={\"Press to select the workflow: \" + stateName}\n      onClick={ selectWorkflowIndex }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        selectWorkflowIndex()\n      }}}>\n      <span>{stateName}</span>\n    </div>\n  );\n}\n\nexport default WorkflowSelection;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { PostAndProcessEditArgument, httpRequestState } from '../types'\n\nimport { convertSegments } from './workflowPostSlice'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformationWithWorkflow = createAsyncThunk('video/postVideoInformationWithWorkflow', async (argument: PostAndProcessEditArgument) => {\n  const response = await client.post(`${argument.ocUrl}/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks, workflows: argument.workflowID }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes and starting a workflow\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostAndProcessSlice = createSlice({\n  name: 'workflowPostAndProcessState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformationWithWorkflow.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\nexport const selectStatus = (state: { workflowPostAndProcessState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostAndProcessState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\n\nexport default workflowPostAndProcessSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle } from '../cssStyles'\nimport { mediaPackageId, ocUrl } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\nimport { faSpinner, faCheck, faExclamationCircle, faChevronLeft, faFileExport } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, selectSegments, selectTracks, } from '../redux/videoSlice'\nimport { postVideoInformationWithWorkflow, selectStatus, selectError } from '../redux/workflowPostAndProcessSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Will eventually display settings based on the selected workflow index\n */\nconst WorkflowConfiguration : React.FC<{}> = () => {\n\n  const postAndProcessWorkflowStatus = useSelector(selectStatus);\n  const postAndProcessError = useSelector(selectError)\n\n  const workflowConfigurationStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  })\n\n  const errorBoxStyle = css({\n    ...(postAndProcessWorkflowStatus !== 'failed') && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  return (\n    <div css={workflowConfigurationStyle} title=\"Workflow Configuration Area\">\n      <h2>Workflow Configuration</h2>\n      <FontAwesomeIcon icon={faTools} size=\"10x\" />\n      Placeholder\n      <div>Satisfied with your configuration?</div>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={1} label=\"No, take me back\" iconName={faChevronLeft}/>\n        <SaveAndProcessButton />\n      </div>\n      <div css={errorBoxStyle} title=\"Error Box\" role=\"alert\">\n        <span>An error has occured. Please wait a bit and try again. Details: </span><br />\n        {postAndProcessError}\n      </div>\n    </div>\n  );\n\n}\n\n/**\n * Button that sends a post request to save current changes\n * and starts the selected workflow\n */\nconst SaveAndProcessButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const workflows = useSelector(selectWorkflows)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n\n  const saveAndProcess = () => {\n    dispatch(postVideoInformationWithWorkflow({\n      segments: segments,\n      tracks: tracks,\n      mediaPackageId: mediaPackageId,\n      ocUrl: ocUrl,\n      workflowID: [workflows[selectedWorkflowIndex]],\n    }))\n  }\n\n  // Update based on current fetching status\n  let icon = faFileExport\n  let spin = false\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n    spin = true\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n    spin = false\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n    spin = false\n  }\n\n  const saveButtonStyle = css({\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Start processing button\"}\n      role=\"button\" tabIndex={0}\n      onClick={ saveAndProcess }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        saveAndProcess()\n      }}}>\n      <FontAwesomeIcon  icon={icon} spin={spin} size=\"1x\"/>\n      <span>{\"Yes, start processing\"}</span>\n    </div>\n  );\n}\n\nexport default WorkflowConfiguration;\n","import React from \"react\";\n\nimport FinishMenu from \"./FinishMenu\";\nimport Save from \"./Save\"\nimport Discard from \"./Discard\"\nimport WorkflowSelection from \"./WorkflowSelection\";\nimport WorkflowConfiguration from \"./WorkflowConfiguration\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPageNumber, setPageNumber } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst Finish : React.FC<{}> = () => {\n\n  const pageNumber = useSelector(selectPageNumber)\n\n  const pageZeroStyle = css({\n    display: pageNumber !== 0 ? 'none' :'block',\n  })\n\n  const pageOneStyle = css({\n    display: pageNumber !== 1 ? 'none' :'block',\n  })\n\n  const pageTwoStyle = css({\n    display: pageNumber !== 2 ? 'none' :'block',\n  })\n\n  return (\n    <div  title=\"Finish\">\n      <div css={pageZeroStyle} >\n        <FinishMenu />\n      </div>\n      <div css={pageOneStyle} >\n        <Save />\n        <WorkflowSelection />\n        <Discard />\n      </div>\n      <div css={pageTwoStyle} >\n        <WorkflowConfiguration />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Takes you to a different page\n */\nexport const PageButton : React.FC<{pageNumber: number, label: string, iconName: IconDefinition}> = ({pageNumber, label, iconName}) => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const onPageChange = () => {\n    dispatch(setPageNumber(pageNumber))\n  }\n\n  const pageButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, pageButtonStyle]}\n      role=\"button\" tabIndex={0}\n      onClick={ onPageChange }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        onPageChange()\n      }}}>\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{label}</span>\n    </div>\n  );\n}\n\n\nexport default Finish;\n","import React from \"react\";\n\nimport Video from './Video';\nimport Timeline from './Timeline';\nimport CuttingActions from './CuttingActions';\nimport Finish from \"./Finish\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useSelector } from 'react-redux'\nimport { selectMainMenuState } from '../redux/mainMenuSlice'\n\nimport { MainMenuStateNames } from '../types'\n\n/**\n * A container for the main functionality\n * Shows different components depending on the state off the app\n */\nconst MainContent: React.FC<{}> = () => {\n\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  const cuttingStyle = css({\n    display: mainMenuState !== MainMenuStateNames.cutting ? 'none' :'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    paddingLeft: '20px',\n  })\n\n  const finishStyle = css({\n    display: mainMenuState !== MainMenuStateNames.finish ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    height: '100%',\n  })\n\n  const defaultStyle = css({\n    display: (mainMenuState === MainMenuStateNames.cutting || mainMenuState === MainMenuStateNames.finish )\n              ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n     <main title=\"MainMenuContext\" css={{width: '100%'}} role=\"main\">\n      <div css={cuttingStyle} title=\"Cutting Container\">\n          <Video />\n          <CuttingActions />\n          <Timeline />\n      </div>\n      <div css={finishStyle} title=\"Finish Container\">\n        <Finish />\n      </div>\n      <div css={defaultStyle}>\n        <FontAwesomeIcon icon={faTools} size=\"10x\" />\n        Placeholder\n      </div>\n     </main>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faTimesCircle, faQuestion, } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector } from 'react-redux';\nimport { selectDuration } from '../redux/videoSlice'\nimport { selectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\n/**\n * This page is to be displayed when the user is \"done\" with the editor\n * and should not be able to perfom any actions anymore\n * TODO: Improve state management somehow to avoid the possibility of an error case\n * TODO: Improve text\n * TODO: Add a button that closes the editor window/frame?\n */\nconst TheEnd : React.FC<{}> = () => {\n\n  // Init redux variables\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(selectStatus)\n  const duration = useSelector(selectDuration)\n\n  const icon = () => {\n    if (abortState) {\n      return faTimesCircle\n    } else if (postAndProcessState === \"success\") {\n      return faCheckCircle\n    } else {\n      return faQuestion\n    }\n  }\n\n  const text = () => {\n    if (abortState) {\n      return \"You really did it. All your changes are now lost forever. You can now continue doing whatever you want.\"\n    } else if (postAndProcessState === \"success\") {\n      return `Changes successfully saved to Opencast. Processing your changes may take up to\n              ${new Date((duration * 2)).toISOString().substr(11, 8)} hours.\n              You can now close the editor.`\n    } else {\n      return \"Now this is awkward. Something has gone very wrong.\"\n    }\n  }\n\n  const theEndStyle = css({\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n    <div css={theEndStyle} title=\"The last area\">\n      <FontAwesomeIcon icon={icon()} size=\"10x\" />\n      <text>{text()}</text>\n    </div>\n  );\n}\n\nexport default TheEnd","import React from \"react\";\n\nimport MainMenu from './MainMenu';\nimport MainContent from './MainContent';\nimport TheEnd from './TheEnd';\n\nimport { useSelector } from 'react-redux';\nimport { selectStatus as postAndProcessSelectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\nconst Body: React.FC<{}> = () => {\n\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(postAndProcessSelectStatus)\n\n  // If we're in a special state, display a special page\n  // Otherwise display the normal page\n  const main = () => {\n    if(abortState || postAndProcessState === \"success\") {\n      return (\n        <TheEnd />\n      );\n    } else {\n      return (\n        <div css={bodyStyle} title=\"Body\">\n          <MainMenu />\n          <MainContent />\n        </div>\n      );\n    }\n  }\n\n  const bodyStyle = {\n    display: 'flex',\n    flexDirection: 'row' as const,\n    height: '100%',\n  };\n\n  return (\n    <React.Fragment>\n      {main()}\n    </React.Fragment>\n  );\n};\n\nexport default Body;\n","import React from 'react';\nimport Body from './main/Body';\nimport { GlobalStyle } from './cssStyles'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport mainMenuStateReducer from './mainMenuSlice'\nimport finishStateReducer from './finishSlice'\nimport videoReducer from './videoSlice'\nimport workflowPostReducer from './workflowPostSlice'\nimport workflowPostAndProcessReducer from './workflowPostAndProcessSlice'\nimport abortReducer from './abortSlice'\n\nexport default configureStore({\n  reducer: {\n    mainMenuState: mainMenuStateReducer,\n    finishState: finishStateReducer,\n    videoState: videoReducer,\n    workflowPostState: workflowPostReducer,\n    workflowPostAndProcessState: workflowPostAndProcessReducer,\n    abortState: abortReducer,\n  }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nimport { init } from './config'\nimport { sleep } from './util/utilityFunctions'\n\n\n// Load config here\n// Load the rest of the application and try to fetch the settings file from the\n// server.\nconst initialize = Promise.race([\n  init(),\n  sleep(300),\n]);\n\nconst render = (body: JSX.Element) => {\n  ReactDOM.render(body, document.getElementById('root'));\n};\n\ninitialize.then(\n\n  () => {\n    ReactDOM.render(\n      <React.StrictMode>\n          <Provider store={store}>\n            <App />\n          </Provider>\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  },\n\n  // This error case is vey unlikely to occur.\n  e => render(<p>\n    {`Fatal error while loading app: ${e.message}`}\n    <br />\n    This might be caused by a incorrect configuration by the system administrator.\n  </p>),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}