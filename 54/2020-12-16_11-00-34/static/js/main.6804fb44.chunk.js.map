{"version":3,"sources":["types.ts","redux/mainMenuSlice.ts","redux/finishSlice.ts","cssStyles.tsx","main/MainMenu.tsx","config.ts","util/client.js","util/utilityFunctions.ts","redux/videoSlice.ts","main/Video.tsx","img/placeholder_waveform.png","main/Timeline.tsx","main/CuttingActions.tsx","main/FinishMenu.tsx","redux/workflowPostSlice.ts","main/Save.tsx","redux/abortSlice.ts","main/Discard.tsx","main/WorkflowSelection.tsx","redux/workflowPostAndProcessSlice.ts","main/WorkflowConfiguration.tsx","main/Finish.tsx","main/MainContent.tsx","main/TheEnd.tsx","main/Body.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["MainMenuStateNames","initialState","value","cutting","mainMenuSlice","createSlice","name","reducers","setState","state","action","payload","actions","selectMainMenuState","mainMenuState","finishSlice","pageNumber","setPageNumber","selectFinishState","finishState","selectPageNumber","GlobalStyle","styles","globalStyle","basicButtonStyle","css","borderRadius","cursor","transitionDuration","transitionProperty","transform","display","justifyContent","alignItems","gap","textAlign","backOrContinueStyle","flexDirection","MainMenuButton","iconName","stateName","dispatch","useDispatch","activeState","useSelector","mainMenuButtonStyle","width","height","backgroundColor","title","onClick","finish","icon","size","MainMenu","style","borderRight","flexShrink","padding","faFilm","faListUl","metadata","faPhotoVideo","thumbnail","faSignOutAlt","mediaPackageId","client","endpoint","a","body","customConfig","headers","encoded","btoa","unescape","encodeURIComponent","authHeaders","config","method","JSON","stringify","window","fetch","response","text","data","length","parse","ok","Error","statusText","Promise","reject","message","get","post","roundToDecimalPlace","num","decimalPlace","decimalFactor","Math","pow","round","Number","EPSILON","isPlaying","isPlayPreview","currentlyAt","segments","id","nanoid","start","end","deleted","tracks","activeSegmentIndex","selectedWorkflowIndex","previewTriggered","videoURLs","videoCount","duration","presenters","workflows","status","error","undefined","fetchVideoInformation","createAsyncThunk","argument","videoSlice","setIsPlaying","setIsPlayPreview","setPreviewTriggered","setCurrentlyAt","updateActiveSegment","skipDeletedSegments","setCurrentlyAtInSeconds","addSegment","push","cut","segmentA","segmentB","splice","markAsDeletedOrAlive","setSelectedWorkflowIndex","mergeLeft","mergeSegments","mergeRight","extraReducers","builder","addCase","pending","fulfilled","reduce","o","uri","parseSegments","sort","n1","n2","displayOrder","rejected","findIndex","element","newSegments","forEach","mergeSegmentIndex","min","max","endTime","index","selectIsPlaying","videoState","selectIsPlayPreview","selectPreviewTriggered","selectCurrentlyAt","selectCurrentlyAtInSeconds","selectSegments","selectActiveSegmentIndex","selectIsCurrentSegmentAlive","selectSelectedWorkflowIndex","selectVideoURL","selectVideoCount","selectDuration","selectDurationInSeconds","selectTitle","selectPresenters","selectTracks","selectWorkflows","VideoPlayer","url","isMuted","testTmp","ref","useRef","useState","ready","setReady","useEffect","current","seekTo","playing","muted","onProgress","playedSeconds","progressInterval","onReady","onEnded","VideoControls","videoControlStyle","videoControlsRowStyle","playButtonStyle","playPreviewStyle","faEyeSlash","faEye","faToggleOn","faToggleOff","faPause","faPlay","Date","toISOString","substr","VideoHeader","titleStyle","join","Video","content","videoURLStatus","className","videoPlayers","i","key","videoAreaStyle","borderBottom","videoPlayerAreaStyle","Scrubber","timelineWidth","x","y","controlledPosition","setControlledPosition","isGrabbed","setIsGrabbed","wasCurrentlyAtRef","nodeRef","React","updateXPos","scrubberStyle","position","zIndex","boxShadow","scrubberDragHandleStyle","scrubberDragHandleIconStyle","onStart","onStop","e","axis","bounds","disabled","faBars","SegmentsList","bgColor","segmentsStyle","paddingTop","map","segment","borderStyle","borderColor","borderWidth","boxSizing","Timeline","useResizeObserver","timelineStyle","alt","src","myImg","top","cuttingActionButtonStyle","CuttingActionsButton","actionName","MarkAsDeletedButton","isCurrentSegmentAlive","faTrash","faTrashRestore","CuttingActions","cuttingStyle","blockStyle","faCut","faStepBackward","faStepForward","faQuestion","FinishMenuButton","finishMenuButtonStyle","fontSize","FinishMenu","finishMenuStyle","faSave","faFileExport","faTimesCircle","postVideoInformation","convertSegments","workflowPostSlice","selected","selectStatus","workflowPostState","selectError","workflowPostAndProcessState","SaveButton","workflowStatus","spin","faSpinner","faCheck","faExclamationCircle","saveButtonStyle","Save","postWorkflowStatus","postError","saveStyle","errorBoxStyle","fontWeight","label","faChevronLeft","abortSlice","selectAbortState","abortState","DiscardButton","setAbortState","Discard","cancelStyle","WorkflowButton","workflowIndex","workflowButtonStyle","WorkflowSelection","workflowSelectionStyle","workflowSelectionSelectionStyle","workflow","faChevronRight","postVideoInformationWithWorkflow","workflowID","workflowPostAndProcessSlice","SaveAndProcessButton","WorkflowConfiguration","postAndProcessWorkflowStatus","postAndProcessError","workflowConfigurationStyle","faTools","PageButton","pageButtonStyle","Finish","pageZeroStyle","pageOneStyle","pageTwoStyle","MainContent","paddingRight","paddingLeft","finishStyle","defaultStyle","TheEnd","postAndProcessState","theEndStyle","faCheckCircle","Body","postAndProcessSelectStatus","bodyStyle","Fragment","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mainMenuStateReducer","finishStateReducer","videoReducer","workflowPostReducer","workflowPostAndProcessReducer","abortReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.6804fb44.chunk.js","sourcesContent":["export interface Segment {\n  id: string,\n  start: number,\n  end: number,\n  deleted: boolean,\n}\n\nexport interface Track {\n  id: string,\n  uri: string,\n  flavor: any,\n  audioStream: any,\n  videoStream: any,\n}\n\nexport interface TimelineState {\n  segments: Segment[]\n  scrubberPos: number\n}\n\nexport interface RequestArgument {\n  mediaPackageId: string\n}\n\nexport interface PostEditArgument extends RequestArgument {\n  segments: Segment[]\n  tracks: Track[]\n}\n\nexport interface PostAndProcessEditArgument extends PostEditArgument{\n  workflowID: string\n}\n\nexport enum MainMenuStateNames {\n  cutting = \"Cutting\",\n  metadata = \"Metadata\",\n  thumbnail = \"Thumbnail\",\n  finish = \"Finish\",\n}\n\nexport interface httpRequestState {\n  status: 'idle' | 'loading' | 'success' | 'failed',\n  error: string | undefined\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { MainMenuStateNames} from '../types'\n\nexport interface mainMenu {\n  value: MainMenuStateNames,\n}\n\nconst initialState: mainMenu = {\n  value: MainMenuStateNames.cutting,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const mainMenuSlice = createSlice({\n  name: 'mainMenuState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<mainMenu[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = mainMenuSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectMainMenuState = (state: { mainMenuState: { value: mainMenu[\"value\"]; }; }) => state.mainMenuState.value\n\nexport default mainMenuSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface finish {\n  value: \"Save changes\" | \"Start processing\" | \"Discard changes\" | undefined,\n  pageNumber: number,\n}\n\nconst initialState: finish = {\n  value: \"Start processing\",\n  pageNumber: 0,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const finishSlice = createSlice({\n  name: 'finishState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<finish[\"value\"]>) => {\n      state.value = action.payload;\n    },\n    setPageNumber: (state, action) => {\n      state.pageNumber = action.payload;\n    }\n  }\n})\n\n// Export Actions\nexport const { setState, setPageNumber } = finishSlice.actions\n\n// Export Selectors\nexport const selectFinishState = (state: { finishState: { value: finish[\"value\"]; }; }) => state.finishState.value\nexport const selectPageNumber = (state: { finishState: { pageNumber: finish[\"pageNumber\"]; }; }) => state.finishState.pageNumber\n\nexport default finishSlice.reducer\n","/**\n * This file contains general css stylings\n */\nimport { css, Global } from '@emotion/core'\nimport React from \"react\";\n\n/**\n * An emotion component that inserts styles globally\n * Is removed when the styles change or when the Global component unmounts.\n */\nexport const GlobalStyle: React.FC = () => {\n  return (\n    <Global styles={globalStyle} />\n  );\n}\n\n/**\n * CSS for the global style component\n */\nexport const globalStyle = css({\n  body: {\n    backgroundColor: 'snow',\n    fontSize: 'medium',\n    // Makes the body span to the bottom of the page\n    minHeight: \"100vh\",\n  },\n});\n\n/**\n * CSS for buttons\n */\nexport const basicButtonStyle = css({\n  borderRadius: '10px',\n  cursor: \"pointer\",\n  // Animation\n  transitionDuration: \"0.3s\",\n  transitionProperty: \"transform\",\n  \"&:hover\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:active\": {\n    transform: 'scale(0.9)',\n  },\n  // Flex position child elements\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  gap: '10px',\n  textAlign: 'center' as const,\n});\n\n/**\n * CSS for a container that holds back/forward buttons\n */\nexport const backOrContinueStyle = css(({\n  display: 'flex',\n  flexDirection: 'row' as const,\n  gap: '20px',\n}))","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm, faListUl, faPhotoVideo, faSignOutAlt, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setState, selectMainMenuState, mainMenu } from '../redux/mainMenuSlice'\nimport { setPageNumber } from '../redux/finishSlice'\n\nimport { MainMenuStateNames } from '../types'\nimport { basicButtonStyle } from '../cssStyles'\n\n/**\n * A container for selecting the functionality shown in the main part of the app\n */\nconst MainMenu: React.FC<{}> = () => {\n\n  const mainMenuStyle = {\n    borderRight: '1px solid #BBB',\n    width: '100px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    flexShrink: 0,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  };\n\n  return (\n    <div style={mainMenuStyle} title=\"MainMenu\">\n      <MainMenuButton iconName={faFilm} stateName={MainMenuStateNames.cutting}/>\n      <MainMenuButton iconName={faListUl} stateName={MainMenuStateNames.metadata}/>\n      <MainMenuButton iconName={faPhotoVideo} stateName={MainMenuStateNames.thumbnail}/>\n      <MainMenuButton iconName={faSignOutAlt} stateName={MainMenuStateNames.finish}/>\n    </div>\n  );\n};\n\n/**\n * A button to set the state of the app\n * @param param0\n */\nconst MainMenuButton: React.FC<{iconName: IconDefinition, stateName: mainMenu[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectMainMenuState)\n\n  const mainMenuButtonStyle = css({\n    width: '100%',\n    height: '100px',\n    ...(activeState === stateName) && {\n      backgroundColor: '#DDD',\n    },\n    flexDirection: 'column' as const,\n  });\n\n  return (\n    <div css={[basicButtonStyle, mainMenuButtonStyle]} title={stateName}\n      onClick={() => {\n        dispatch(setState(stateName));\n        if (stateName === MainMenuStateNames.finish) {\n          dispatch(setPageNumber(0))\n        }\n      }}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\nexport default MainMenu;\n","/**\n * A place for global config values\n */\n\n/**\n * Hardcoded id of the mediapackge the editor will work on\n */\nexport const mediaPackageId : string = \"f0e7d016-e23e-41bc-98d1-b42d65399676\"","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\n/**\n * Client I stole this form a react tutorial\n */\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const encoded = btoa(unescape(encodeURIComponent(\n    \"admin:opencast\"\n  )));\n  const authHeaders = { 'Authorization': `Basic ${encoded}` };\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n      ...authHeaders,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  let text\n  try {\n    const response = await window.fetch(endpoint, config)\n    text = await response.text()\n    text.length ? data = JSON.parse(text) : data = ''\n    // data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","export const roundToDecimalPlace = (num: number, decimalPlace: number) => {\n  let decimalFactor = Math.pow(10, decimalPlace)\n  return Math.round((num + Number.EPSILON) * decimalFactor) / decimalFactor\n}\n","import { createSlice, nanoid, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\nimport { Segment, httpRequestState, Track, RequestArgument }  from '../types'\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\nimport { WritableDraft } from 'immer/dist/internal';\n\nexport interface video {\n  isPlaying: boolean,             // Are videos currently playing?\n  isPlayPreview: boolean,         // Should deleted segments be skipped?\n  previewTriggered: boolean,      // Basically acts as a callback for the video players. TODO: Figure out how to do callbacks\n  currentlyAt: number,            // Position in the video in milliseconds\n  segments: Segment[],\n  tracks: Track[],\n  activeSegmentIndex: number,     // Index of the segment that is currenlty hovered\n  selectedWorkflowIndex: number,  // Index of the currently selected workflow\n\n  videoURLs: string[],  // Links to each video\n  videoCount: number,   // Total number of videos\n  duration: number,     // Video duration in milliseconds\n  title: string,\n  presenters: string[],\n  workflows: string[],\n}\n\nconst initialState: video & httpRequestState = {\n  isPlaying: false,\n  isPlayPreview: false,\n  currentlyAt: 0,   // Position in the video in milliseconds\n  segments: [{id: nanoid(), start: 0, end: 1, deleted: false}],\n  tracks: [],\n  activeSegmentIndex: 0,\n  selectedWorkflowIndex: 0,\n  previewTriggered: false,\n\n  videoURLs: [],\n  videoCount: 0,\n  duration: 0,\n  title: '',\n  presenters: [],\n  workflows: [],\n\n  status: 'idle',\n  error: undefined,\n}\n\nexport const fetchVideoInformation = createAsyncThunk('video/fetchVideoInformation', async (argument: RequestArgument) => {\n  // const response = await client.get('https://legacy.opencast.org/admin-ng/tools/ID-dual-stream-demo/editor.json')\n  const response = await client.get(`https://pyca.opencast.org/editor/${argument.mediaPackageId}/edit.json`)\n  return response\n})\n\n/**\n * Slice for the state of the \"video\"\n * Treats the multitude of videos that may exist as one video\n * TODO: Find a way to init the segments array with a starting segment\n */\nexport const videoSlice = createSlice({\n  name: 'videoState',\n  initialState,\n  reducers: {\n    setIsPlaying: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlaying = action.payload;\n    },\n    setIsPlayPreview: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlayPreview = action.payload;\n    },\n    setPreviewTriggered: (state, action) => {\n      state.previewTriggered = action.payload\n    },\n    setCurrentlyAt: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload, 3);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    setCurrentlyAtInSeconds: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload * 1000, 3);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    addSegment: (state, action: PayloadAction<video[\"segments\"][0]>) => {\n      state.segments.push(action.payload)\n    },\n    cut: (state) => {\n      // If we're exactly between two segments, we can't split the current segment\n      if (state.segments[state.activeSegmentIndex].start === state.currentlyAt ||\n          state.segments[state.activeSegmentIndex].end === state.currentlyAt ) {\n        return state;\n      }\n\n      // Make two (new) segments out of it\n      let segmentA : Segment =  {id: nanoid(),\n        start: state.segments[state.activeSegmentIndex].start,\n        end: state.currentlyAt,\n        deleted: true}\n      let segmentB : Segment =  {id: nanoid(),\n        start: state.currentlyAt,\n        end: state.segments[state.activeSegmentIndex].end,\n        deleted: true}\n\n      // Add the new segments and remove the old one\n      state.segments.splice(state.activeSegmentIndex, 1, segmentA, segmentB);\n    },\n    markAsDeletedOrAlive: (state) => {\n      state.segments[state.activeSegmentIndex].deleted = !state.segments[state.activeSegmentIndex].deleted\n    },\n    setSelectedWorkflowIndex: (state, action: PayloadAction<video[\"selectedWorkflowIndex\"]>) => {\n      state.selectedWorkflowIndex = action.payload\n    },\n    mergeLeft: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex - 1)\n    },\n    mergeRight: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex + 1)\n    },\n  },\n  // For Async Requests\n  extraReducers: builder => {\n    builder.addCase(\n      fetchVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n\n        // // Old API\n        // // eslint-disable-next-line no-sequences\n        // state.videoURLs = action.payload.previews.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        // state.videoCount = action.payload.previews.length\n        // state.duration = action.payload.duration\n        // state.title = action.payload.title\n        // state.presenters = action.payload.presenters\n        // state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        // state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n        //   if (n1.displayOrder > n2.displayOrder) { return 1; }\n        //   if (n1.displayOrder < n2.displayOrder) { return -1; }\n        //   return 0;\n        // });\n\n        // New API\n        // eslint-disable-next-line no-sequences\n        state.videoURLs = action.payload.tracks.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        state.videoCount = action.payload.tracks.length\n        state.duration = action.payload.duration\n        state.title = action.payload.title\n        state.presenters = []\n        state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        state.tracks = action.payload.tracks\n        state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n          if (n1.displayOrder > n2.displayOrder) { return 1; }\n          if (n1.displayOrder < n2.displayOrder) { return -1; }\n          return 0;\n        });\n    })\n    builder.addCase(\n      fetchVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\n/**\n * Helper function to update the activeSegmentIndex\n * @param state\n */\nconst updateActiveSegment = (state: WritableDraft<video>) => {\n  state.activeSegmentIndex = state.segments.findIndex(element =>\n    element.start <= state.currentlyAt && element.end >= state.currentlyAt)\n  // TODO: Proper error handling. Rewrite function?\n  if(state.activeSegmentIndex < 0) {\n    state.activeSegmentIndex = 0\n  }\n}\n\n/**\n * Helper Function for testing with current/old editor API\n */\nconst parseSegments = (segments: any, duration: number) => {\n  let newSegments : Segment[] = []\n\n  if (segments.length === 0) {\n    newSegments.push({id: nanoid(), start: 0, end: duration, deleted: false})\n  }\n\n  segments.forEach((element: { start: any; end: any; deleted: any; }) => {\n    newSegments.push({id: nanoid(), start: element.start, end: element.end, deleted: element.deleted})\n  });\n  return newSegments\n}\n\n/**\n * Helper function for merging two segments\n */\nconst mergeSegments = (state: WritableDraft<video>, activeSegmentIndex: number, mergeSegmentIndex: number) => {\n  // Check if mergeSegmentIndex is valid\n  if (mergeSegmentIndex < 0 || mergeSegmentIndex > state.segments.length - 1) {\n    return\n  }\n\n  // Increase activeSegment length\n  state.segments[activeSegmentIndex].start = Math.min(\n    state.segments[activeSegmentIndex].start, state.segments[mergeSegmentIndex].start)\n  state.segments[activeSegmentIndex].end = Math.max(\n    state.segments[activeSegmentIndex].end, state.segments[mergeSegmentIndex].end)\n\n  // Remove the other segment\n  state.segments.splice(mergeSegmentIndex, 1);\n\n  // Update active segment\n  updateActiveSegment(state)\n}\n\nconst skipDeletedSegments = (state: WritableDraft<video>) => {\n  if(state.isPlaying && state.segments[state.activeSegmentIndex].deleted && state.isPlayPreview) {\n      let endTime = state.segments[state.activeSegmentIndex].end\n      let index = state.activeSegmentIndex\n      while (index < state.segments.length && state.segments[index].deleted) {\n        endTime = state.segments[index].end\n        index++\n      }\n      state.currentlyAt = endTime\n      state.previewTriggered = true\n    }\n}\n\nexport const { setIsPlaying, setIsPlayPreview, setCurrentlyAt, setCurrentlyAtInSeconds, addSegment, cut, markAsDeletedOrAlive,\n  setSelectedWorkflowIndex, mergeLeft, mergeRight, setPreviewTriggered } = videoSlice.actions\n\n// Export selectors\n// Selectors mainly pertaining to the video state\nexport const selectIsPlaying = (state: { videoState: { isPlaying: video[\"isPlaying\"] }; }) =>\n  state.videoState.isPlaying\nexport const selectIsPlayPreview = (state: { videoState: { isPlayPreview: video[\"isPlayPreview\"] }; }) =>\n  state.videoState.isPlayPreview\nexport const selectPreviewTriggered = (state: { videoState: { previewTriggered: video[\"previewTriggered\"] } }) =>\n  state.videoState.previewTriggered\nexport const selectCurrentlyAt = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt\nexport const selectCurrentlyAtInSeconds = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt / 1000\nexport const selectSegments = (state: { videoState: { segments: video[\"segments\"] } }) =>\n  state.videoState.segments\nexport const selectActiveSegmentIndex = (state: { videoState: { activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  state.videoState.activeSegmentIndex\nexport const selectIsCurrentSegmentAlive = (state: { videoState:\n  { segments: { [x: number]: { deleted: boolean; }; }; activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  !state.videoState.segments[state.videoState.activeSegmentIndex].deleted\nexport const selectSelectedWorkflowIndex = (state: { videoState:\n  { selectedWorkflowIndex: video[\"selectedWorkflowIndex\"]; }; }) =>\n  state.videoState.selectedWorkflowIndex\n\n// Selectors mainly pertaining to the information fetched from Opencast\nexport const selectVideoURL = (state: { videoState: { videoURLs: video[\"videoURLs\"] } }) => state.videoState.videoURLs\nexport const selectVideoCount = (state: { videoState: { videoCount: video[\"videoCount\"] } }) => state.videoState.videoCount\nexport const selectDuration = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration\nexport const selectDurationInSeconds = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration / 1000\nexport const selectTitle = (state: { videoState: { title: video[\"title\"] } }) => state.videoState.title\nexport const selectPresenters = (state: { videoState: { presenters: video[\"presenters\"] } }) => state.videoState.presenters\nexport const selectTracks = (state: { videoState: { tracks: video[\"tracks\"] } }) =>\n  state.videoState.tracks\nexport const selectWorkflows = (state: { videoState: { workflows: video[\"workflows\"] } }) => state.videoState.workflows\n\nexport default videoSlice.reducer\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { httpRequestState } from '../types'\nimport { mediaPackageId } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faToggleOn, faToggleOff, faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectCurrentlyAtInSeconds, setIsPlaying, setCurrentlyAtInSeconds,\n  fetchVideoInformation, selectVideoURL, selectVideoCount, selectDurationInSeconds, selectTitle, selectPresenters,\n  setPreviewTriggered, selectPreviewTriggered, selectIsPlayPreview, setIsPlayPreview\n} from '../redux/videoSlice'\n\nimport ReactPlayer from 'react-player'\n\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\n\n/**\n * Container for the videos and their controls\n * TODO: Complete fetching\n * TODO: Move fetching to a more central part of the app\n */\nconst Video: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const videoURLs = useSelector(selectVideoURL)\n  const videoCount = useSelector(selectVideoCount)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n  const error = useSelector((state: { videoState: { error: httpRequestState[\"error\"] } }) => state.videoState.error)\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (videoURLStatus === 'idle') {\n      dispatch(fetchVideoInformation({mediaPackageId: mediaPackageId}))\n    }\n  }, [videoURLStatus, dispatch])\n\n  // Update based on current fetching status\n  let content\n  if (videoURLStatus === 'loading') {\n    content = <div className=\"loader\">Loading...</div>\n  } else if (videoURLStatus === 'success') {\n    content = \"\"//<div className=\"loader\">Success...</div>\n  } else if (videoURLStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n\n  // Initialize video players\n  const videoPlayers: JSX.Element[] = [];\n  for (let i = 0; i < videoCount; i++) {\n    // videoPlayers.push(<VideoPlayer key={i} url='https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4' />);\n    videoPlayers.push(<VideoPlayer key={i} url={videoURLs[i]} isMuted={i === 0}/>);\n  }\n\n  // Style\n  const videoAreaStyle = css({\n    display: 'flex',\n    width: 'auto',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '10px',\n    borderBottom: '1px solid #BBB',\n  });\n\n  const videoPlayerAreaStyle = css({\n    backgroundColor: 'black',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  });\n\n  return (\n    <div css={videoAreaStyle} title=\"Video Area\">\n      {content}\n      <VideoHeader />\n      <div css={videoPlayerAreaStyle} title=\"Video Player Area\">\n        {videoPlayers}\n      </div>\n      <VideoControls />\n    </div>\n  );\n};\n\n/**\n * A single video player\n * @param param0\n */\nconst VideoPlayer: React.FC<{url: string, isMuted: boolean}> = ({url, isMuted}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAtInSeconds)\n  const duration  = useSelector(selectDurationInSeconds)\n  const testTmp = useSelector(selectPreviewTriggered)\n\n  // Init state variables\n  const ref = useRef<ReactPlayer>(null);\n  const [ready, setReady] = useState(false);\n\n  // Callback for when the video is playing\n  const onProgressCallback = (state: { played: number, playedSeconds: number, loaded: number, loadedSeconds:  number }) => {\n    // Only update redux if there was a substantial change\n    if (roundToDecimalPlace(currentlyAt, 3) !== roundToDecimalPlace(state.playedSeconds, 3)) {\n      dispatch(setCurrentlyAtInSeconds(state.playedSeconds))\n    }\n  }\n\n  // Callback for checking whether the video element is ready\n  const onReadyCallback = () => {\n    setReady(true);\n  }\n\n  const onEndedCallback = () => {\n    dispatch(setIsPlaying(false));\n    dispatch(setCurrentlyAtInSeconds(duration)); // It seems onEnded is called before the full duration is reached, so we set currentlyAt to the very end\n  }\n\n  useEffect(() => {\n    // Seek if the position in the video got changed externally\n    if(!isPlaying && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n    }\n    if(testTmp && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n      dispatch(setPreviewTriggered(false))\n    }\n  })\n\n  return (\n    <ReactPlayer url={url}\n      ref={ref}\n      width='100%'\n      height='auto'\n      playing={isPlaying}\n      muted={isMuted}\n      onProgress={onProgressCallback}\n      progressInterval={100}\n      onReady={onReadyCallback}\n      onEnded={onEndedCallback}\n    />\n  );\n\n  // return (\n  //   <div title=\"Video Player\">\n  //     <video width=\"320\" height=\"240\" controls ref={vidRef}>\n  //     <source src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4\" type=\"video/mp4\" />\n  //     Your browser does not support the video tag.\n  //     </video>\n  //   </div>\n  // );\n};\n\n/**\n * Contains controls for manipulating multiple video players at once\n * TODO: Add missing controls\n * TODO: Turn time display into a control\n */\nconst VideoControls: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const isPlayPreview = useSelector(selectIsPlayPreview)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n\n  // Style\n  const videoControlStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n  })\n\n  const videoControlsRowStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n    gap: '50px',\n  })\n\n  const playButtonStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const playPreviewStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.05)',\n    },\n  })\n\n  return (\n    <div css={videoControlStyle} title=\"Video Controls\">\n      <div css={videoControlsRowStyle} title=\"Video Controls Top Row\">\n        <div style={{display: 'flex', gap: '10px', width: '50px', justifyContent: 'center'}}>\n          <FontAwesomeIcon icon={isPlayPreview ? faEyeSlash : faEye} size=\"1x\" title=\"Play Preview Icon\"/>\n          <FontAwesomeIcon css={playPreviewStyle} icon={isPlayPreview ? faToggleOn : faToggleOff} size=\"1x\"\n            title={\"Play Preview Switch: \" + isPlayPreview}\n            onClick={() => dispatch(setIsPlayPreview(!isPlayPreview))}\n          />\n        </div>\n        <FontAwesomeIcon css={playButtonStyle} icon={isPlaying ? faPause : faPlay} size=\"2x\"\n          title=\"Play Button\"\n          onClick={() => dispatch(setIsPlaying(!isPlaying))}\n        />\n        <div css={{display: 'inline-block', width: '110px'}}>\n          {new Date((currentlyAt ? currentlyAt : 0)).toISOString().substr(11, 12)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Displays elements above the video, e.g. title\n */\nconst VideoHeader: React.FC<{}> = () => {\n  const title = useSelector(selectTitle)\n  const presenters = useSelector(selectPresenters)\n\n  const titleStyle = css({\n    fontSize: 'large'\n  })\n\n  return (\n    <div title=\"Video Area Header\">\n      <div css={titleStyle} title=\"Video Title\">{title}</div>\n      <div title=\"Video Presenters\">by {presenters.join(\", \")}</div>\n    </div>\n  );\n}\n\nexport default Video;\n","export default __webpack_public_path__ + \"static/media/placeholder_waveform.d23b087b.png\";","import React, { useState, useRef, useEffect } from 'react'\n\nimport Draggable from 'react-draggable';\n\nimport { css } from '@emotion/core'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment } from '../types'\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectSegments, selectActiveSegmentIndex, selectDuration,\n  setCurrentlyAt\n} from '../redux/videoSlice'\n\n// import { selectDuration, } from '../redux/videoURLSlice'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nimport useResizeObserver from \"use-resize-observer\";\n\nimport myImg from '../img/placeholder_waveform.png'\n\n/**\n * A container for visualizing the cutting of the video, as well as for controlling\n * the current position in the video\n * Its width corresponds to the duration of the video\n */\nconst Timeline: React.FC<{}> = () => {\n\n  const { ref, width = 1, } = useResizeObserver<HTMLDivElement>();\n\n  const timelineStyle = css({\n    position: 'relative' as 'relative',     // Need to set position for Draggable bounds to work\n    height: '250px',\n    width: '100%',\n    //backgroundImage: `url({myImg})`,\n  });\n\n  return (\n  <div ref={ref} css={timelineStyle} title=\"Timeline\">\n    <Scrubber timelineWidth={width}/>\n    <div css={{height: '230px'}}>\n      <img alt='waveform2' src={myImg} style={{position: \"absolute\" as \"absolute\", height: '230px', width: '100%', top: '10px'}}></img>\n      <SegmentsList timelineWidth={width}/>\n    </div>\n  </div>\n  );\n};\n\n/**\n * Displays and defines the current position in the video\n * TODO: Fix position fail when starting and then quickly stopping the video\n *       Possibly because state.playedSceonds in Video is faulty for small values\n * TODO: Fix timeline width changes\n * @param param0\n */\nconst Scrubber: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n\n  // Init state variables\n  const [controlledPosition, setControlledPosition] = useState({x: 0,y: 0,});\n  const [isGrabbed, setIsGrabbed] = useState(false)\n  const wasCurrentlyAtRef = useRef(0)\n  const nodeRef = React.useRef(null); // For supressing \"ReactDOM.findDOMNode() is deprecated\" warning\n\n  // Reposition scrubber when the current x position was changed externally\n  useEffect(() => {\n    if(currentlyAt !== wasCurrentlyAtRef.current) {\n      updateXPos();\n      wasCurrentlyAtRef.current = currentlyAt;\n    }\n  })\n\n  // Reposition scrubber when the timeline width changes\n  useEffect(() => {\n    if(currentlyAt && duration) {\n      setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timelineWidth])\n\n  // Callback for when the scrubber gets dragged by the user\n  // const onControlledDrag = (e: any, position: any) => {\n  //   const {x, y} = position;\n  //   dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n  // };\n\n  // Callback for when the position changes by something other than dragging\n  const updateXPos = () => {\n    const y = controlledPosition.y;\n    setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y});\n  };\n\n  const onStartDrag = () => {\n    setIsGrabbed(true)\n  }\n\n  const onStopDrag = (e: any, position: any) => {\n    const {x, y} = position;\n    setControlledPosition({x, y});\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n\n    setIsGrabbed(false)\n  }\n\n  const scrubberStyle = css({\n    backgroundColor: 'rgba(255, 0, 0, 1)',\n    height: '250px',\n    width: '1px',\n    position: 'absolute' as 'absolute',\n    zIndex: 2,\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  });\n\n  const scrubberDragHandleStyle = css({\n    backgroundColor: 'rgba(255, 255, 255, 1)',\n    borderRadius: '10px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: isGrabbed ? \"grabbing\" : \"grab\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const scrubberDragHandleIconStyle = css({\n    transform: 'scaleY(1.5) rotate(90deg)',\n    padding: '5px',\n  })\n\n  return (\n    <Draggable\n      //onDrag={onControlledDrag}\n      onStart={onStartDrag}\n      onStop={onStopDrag}\n      axis=\"x\"\n      bounds=\"parent\"\n      position={controlledPosition}\n      disabled={isPlaying}\n      nodeRef={nodeRef}\n      >\n      <div css={scrubberStyle} title=\"Scrubber\">\n        <div css= {scrubberDragHandleStyle} title=\"dragHandle\">\n          <FontAwesomeIcon css={scrubberDragHandleIconStyle} icon={faBars} size=\"1x\" />\n        </div>\n      </div>\n    </Draggable>\n  );\n};\n\n/**\n * Container responsible for rendering the segments that are created when cuting\n * TODO: Complete styling\n */\nconst SegmentsList: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const segments = useSelector(selectSegments)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)\n\n  /**\n   * Returns a background color based on whether the segment is to be deleted\n   * and whether the segment is currently active\n   */\n  const bgColor = (deleted: boolean, index: boolean) => {\n    if (!deleted && !index) {\n      return 'rgba(0, 0, 255, 0.4)'\n    } else if (deleted && !index) {\n      return 'rgba(255, 0, 0, 0.4)'\n    } else if (!deleted && index) {\n      return 'rgba(0, 0, 200, 0.4)'\n    } else if (deleted && index) {\n      return 'rgba(200, 0, 0, 0.4)'\n    }\n  }\n\n  // Render the individual segments\n  const renderedSegments = () => {\n    return (\n      segments.map( (segment: Segment, index: number) => (\n        <div key={segment.id} title=\"Segment\" css={{\n          backgroundColor: bgColor(segment.deleted, activeSegmentIndex === index),//segment.state === \"alive\" ? 'rgba(0, 0, 255, 0.4)' : 'rgba(255, 0, 0, 0.4)',\n          borderRadius: '5px',\n          borderStyle: 'solid',\n          borderColor: 'white',\n          borderWidth: '1px',\n          boxSizing: 'border-box',\n          width: ((segment.end - segment.start) / duration) * 100 + '%',\n          height: '230px',\n          zIndex: 1,\n        }}>\n        </div>\n      ))\n    );\n  }\n\n  const segmentsStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    paddingTop: '10px',\n  })\n\n  return (\n    <div css={segmentsStyle} title=\"Segments\">\n      {renderedSegments()}\n    </div>\n  );\n};\n\nexport default Timeline;\n","import React from \"react\";\n\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition,\n  faCut,\n  faQuestion,\n  faStepBackward,\n  faStepForward,\n  faTrash,\n  faTrashRestore,\n  } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  cut, markAsDeletedOrAlive, selectIsCurrentSegmentAlive, mergeLeft, mergeRight\n} from '../redux/videoSlice'\n\n/**\n * Defines the different actions a user can perform while in cutting mode\n */\nconst CuttingActions: React.FC<{}> = () => {\n\n  const cuttingStyle =  css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-between',\n    gap: '30px',\n  })\n\n  const blockStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    gap: '30px',\n  })\n\n  return (\n    <div css={cuttingStyle}>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faCut} actionName=\"Cut\" action={cut}/>\n          <MarkAsDeletedButton />\n          <CuttingActionsButton iconName={faStepBackward} actionName=\"Merge Left\" action={mergeLeft}/>\n          <CuttingActionsButton iconName={faStepForward} actionName=\"Merge Right\" action={mergeRight}/>\n        </div>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Reset changes\" action={null}/>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Undo\" action={null}/>\n        </div>\n    </div>\n  );\n};\n\n/**\n * CSS for cutting buttons\n */\nconst cuttingActionButtonStyle = {\n  padding: '16px',\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n};\n\n/**\n * A button representing a single action a user can take while cutting\n * TODO: Add functionality\n * TODO: Complete styling\n * @param param0\n */\nconst CuttingActionsButton: React.FC<{iconName: IconDefinition, actionName: string, action: any}> = ({iconName, actionName, action}) => {\n\n  const dispatch = useDispatch();\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]} title={actionName}\n      onClick={() => action ? dispatch(action()) : \"\"}>\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{actionName}</span>\n    </div>\n  );\n};\n\n/**\n * Button that changes its function based on context\n */\nconst MarkAsDeletedButton : React.FC<{}> = () => {\n\n  const dispatch = useDispatch();\n  const isCurrentSegmentAlive = useSelector(selectIsCurrentSegmentAlive)\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]} title={isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}\n      onClick={() => dispatch(markAsDeletedOrAlive())}>\n      <FontAwesomeIcon icon={isCurrentSegmentAlive ? faTrash : faTrashRestore} size=\"1x\" />\n      <div>{isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}</div>\n    </div>\n  );\n}\n\nexport default CuttingActions;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSave, faFileExport, faTimesCircle, IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch } from 'react-redux';\nimport { setState, setPageNumber, finish } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst FinishMenu : React.FC<{}> = () => {\n\n  const finishMenuStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-around',\n    gap: '30px',\n  })\n\n  return (\n    <div css={finishMenuStyle} title=\"Finish Menu\">\n        <FinishMenuButton iconName={faSave} stateName=\"Save changes\"/>\n        <FinishMenuButton iconName={faFileExport} stateName=\"Start processing\"/>\n        <FinishMenuButton iconName={faTimesCircle} stateName=\"Discard changes\"/>\n    </div>\n  );\n}\n\n/**\n * Buttons for the finish menu\n */\nconst FinishMenuButton: React.FC<{iconName: IconDefinition, stateName: finish[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n\n  const finishMenuButtonStyle = css({\n    width: '250px',\n    height: '220px',\n    flexDirection: 'column' as const,\n    fontSize: \"x-large\",\n    gap: '30px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  });\n\n  return (\n    <div css={[basicButtonStyle, finishMenuButtonStyle]} title={stateName}\n      onClick={() => {\n        dispatch(setState(stateName));\n        dispatch(setPageNumber(1))\n      }}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\n\n\nexport default FinishMenu;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { Segment, PostEditArgument, httpRequestState } from '../types'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformation = createAsyncThunk('video/postVideoInformation', async (argument: PostEditArgument) => {\n  const response = await client.post(`https://pyca.opencast.org/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostSlice = createSlice({\n  name: 'workflowPostState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\ninterface segmentAPI {\n  start: number,\n  end: number,\n  deleted: boolean,\n  selected: boolean,\n}\n\n// Convert a segment from how it is stored in redux into\n// a segment that can be send to Opencast\nexport const convertSegments = (segments: Segment[]) => {\n  let newSegments: segmentAPI[] = []\n\n  segments.forEach(segment => {\n    newSegments.push({\n      start: segment.start,\n      end: segment.end,\n      deleted: segment.deleted,\n      selected: false,\n    })\n  });\n\n  return newSegments\n}\n\nexport const selectStatus = (state: { workflowPostState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\nexport default workflowPostSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle } from '../cssStyles'\nimport { mediaPackageId } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSpinner, faCheck, faExclamationCircle, faChevronLeft, faSave,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { selectSegments, selectTracks } from '../redux/videoSlice'\nimport { postVideoInformation, selectStatus, selectError } from '../redux/workflowPostSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Shown if the user wishes to save.\n * Informs the user about saving and displays a save button\n */\nconst Save : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const postWorkflowStatus = useSelector(selectStatus);\n  const postError = useSelector(selectError)\n\n  const saveStyle = css({\n    height: '100%',\n    display: finishState !== \"Save changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '30px',\n  })\n\n  const errorBoxStyle = css({\n    ...(postWorkflowStatus !== 'failed') && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  return (\n    <div css={saveStyle} title=\"Save Area\">\n      <span>\n        Save the changes you made, but the video will not be cut yet. <br />\n        To make Opencast cut the video, please select \"Process\". <br />\n        Doth thou truly wish tah save?\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"No, take me back\" iconName={faChevronLeft}/>\n        <SaveButton />\n      </div>\n      <div css={errorBoxStyle} title=\"Error Box\">\n        <span>An error has occured. Please wait a bit and try again. Details: </span><br />\n        {postError}<br />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sends a post request to save current changes\n */\nconst SaveButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n\n  // Update based on current fetching status\n  let icon = faSave\n  let spin = false\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n    spin = true\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n    spin = false\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n    spin = false\n  }\n\n  const saveButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Save Button\"}\n      onClick={() =>\n        dispatch(postVideoInformation({\n          segments: segments,\n          tracks: tracks,\n          mediaPackageId: mediaPackageId,\n        }))\n      }>\n      <FontAwesomeIcon icon={icon} spin={spin} size=\"1x\"/>\n      <span>{\"Yes, Save changes\"}</span>\n    </div>\n  );\n}\n\n\nexport default Save;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface abort {\n  value: boolean,\n}\n\nconst initialState: abort = {\n  value: false,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const abortSlice = createSlice({\n  name: 'abortState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<abort[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = abortSlice.actions\n\n// Export Selectors\nexport const selectAbortState = (state: { abortState: { value: abort[\"value\"] }; }) => state.abortState.value\n\nexport default abortSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle} from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faChevronLeft, faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { setState as setAbortState } from '../redux/abortSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Shown if the user wishes to abort.\n * Informs the user about aborting and displays abort button.\n */\nconst Discard : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const cancelStyle = css({\n    display: finishState !== \"Discard changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '30px',\n  })\n\n  return (\n    <div css={cancelStyle} title=\"Abort Area\">\n      <span>\n        Discard all the changes you made? They will be lost forever! <br />\n        Doth thou truly wish tah abort?\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"No, take me back\" iconName={faChevronLeft} />\n        <DiscardButton />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sets the app into an aborted state\n */\nconst DiscardButton : React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const saveButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Discard changes button\"}\n      onClick={() =>\n        dispatch(setAbortState(true))\n      }>\n      <FontAwesomeIcon  icon={faTimesCircle} size=\"1x\"/>\n      <span>{\"Yes, discard changes\"}</span>\n    </div>\n  );\n}\n\nexport default Discard;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle } from '../cssStyles'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, setSelectedWorkflowIndex } from '../redux/videoSlice'\nimport { selectFinishState, selectPageNumber } from '../redux/finishSlice'\n\nimport { PageButton } from './Finish'\nimport { faChevronLeft, faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\n\n/**\n * Allows the user to select a workflow\n */\nconst WorkflowSelection : React.FC<{}> = () => {\n\n  // Initialite redux states\n  const workflows = useSelector(selectWorkflows)\n  const finishState = useSelector(selectFinishState)\n  const pageNumber = useSelector(selectPageNumber)\n\n  // Create workflow selection\n  const workflowButtons = () => {\n    return (\n      workflows.map( (workflow: any, index: number) => (\n        <WorkflowButton key={index} stateName={workflow.name} workflowIndex={index}/>\n      ))\n    );\n  }\n\n  const workflowSelectionStyle = css({\n    display: (finishState === \"Start processing\" && pageNumber === 1) ? 'flex' : 'none',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '50px',\n  })\n\n  const workflowSelectionSelectionStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'left',\n    gap: '20px',\n  })\n\n  return (\n    <div css={workflowSelectionStyle}>\n      <h2>Select a workflow</h2>\n      <div css={workflowSelectionSelectionStyle} title=\"Workflow Selection Area\">\n        {workflowButtons()}\n      </div>\n      <div>And this is where I would put a workflow description.... if I had one!</div>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"Take me back\" iconName={faChevronLeft}/>\n        <PageButton pageNumber={2} label=\"Continue\" iconName={faChevronRight}/>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Clicking this button sets the associated workflow as selected\n * @param param0\n */\nconst WorkflowButton: React.FC<{stateName: string, workflowIndex: number}> = ({stateName, workflowIndex}) => {\n\n  const dispatch = useDispatch();\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const workflowButtonStyle = css({\n    backgroundColor: workflowIndex !== selectedWorkflowIndex ? 'snow' : '#DDD',\n    padding: '16px',\n  });\n\n  return (\n    <div css={[basicButtonStyle,workflowButtonStyle]} title={\"Workflow Button for \"+stateName}\n      onClick={() =>\n        dispatch(setSelectedWorkflowIndex(workflowIndex))\n      }>\n      <span>{stateName}</span>\n    </div>\n  );\n}\n\nexport default WorkflowSelection;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { PostAndProcessEditArgument, httpRequestState } from '../types'\n\nimport { convertSegments } from './workflowPostSlice'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformationWithWorkflow = createAsyncThunk('video/postVideoInformationWithWorkflow', async (argument: PostAndProcessEditArgument) => {\n  const response = await client.post(`https://pyca.opencast.org/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks, workflows: argument.workflowID }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes and starting a workflow\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostAndProcessSlice = createSlice({\n  name: 'workflowPostAndProcessState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformationWithWorkflow.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\nexport const selectStatus = (state: { workflowPostAndProcessState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostAndProcessState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\n\nexport default workflowPostAndProcessSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle } from '../cssStyles'\nimport { mediaPackageId } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\nimport { faSpinner, faCheck, faExclamationCircle, faChevronLeft, faFileExport } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, selectSegments, selectTracks, } from '../redux/videoSlice'\nimport { postVideoInformationWithWorkflow, selectStatus, selectError } from '../redux/workflowPostAndProcessSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Will eventually display settings based on the selected workflow index\n */\nconst WorkflowConfiguration : React.FC<{}> = () => {\n\n  const postAndProcessWorkflowStatus = useSelector(selectStatus);\n  const postAndProcessError = useSelector(selectError)\n\n  const workflowConfigurationStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  })\n\n  const errorBoxStyle = css({\n    ...(postAndProcessWorkflowStatus !== 'failed') && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  return (\n    <div css={workflowConfigurationStyle} title=\"Workflow Configuration Area\">\n      <h2>Workflow Configuration</h2>\n      <FontAwesomeIcon icon={faTools} size=\"10x\" />\n      Placeholder\n      <div>Satisfied with your configuration?</div>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={1} label=\"No, take me back\" iconName={faChevronLeft}/>\n        <SaveAndProcessButton />\n      </div>\n      <div css={errorBoxStyle} title=\"Error Box\">\n        <span>An error has occured. Please wait a bit and try again. Details: </span><br />\n        {postAndProcessError}\n      </div>\n    </div>\n  );\n\n}\n\n/**\n * Button that sends a post request to save current changes\n * and starts the selected workflow\n */\nconst SaveAndProcessButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const workflows = useSelector(selectWorkflows)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n\n  // Update based on current fetching status\n  let icon = faFileExport\n  let spin = false\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n    spin = true\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n    spin = false\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n    spin = false\n  }\n\n  const saveButtonStyle = css({\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Start processing button\"}\n      onClick={() =>\n        dispatch(postVideoInformationWithWorkflow({\n          segments: segments,\n          tracks: tracks,\n          mediaPackageId: mediaPackageId,\n          workflowID: workflows[selectedWorkflowIndex],\n        }))\n      }>\n      <FontAwesomeIcon  icon={icon} spin={spin} size=\"1x\"/>\n      <span>{\"Yes, start processing\"}</span>\n    </div>\n  );\n}\n\nexport default WorkflowConfiguration;\n","import React from \"react\";\n\nimport FinishMenu from \"./FinishMenu\";\nimport Save from \"./Save\"\nimport Discard from \"./Discard\"\nimport WorkflowSelection from \"./WorkflowSelection\";\nimport WorkflowConfiguration from \"./WorkflowConfiguration\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPageNumber, setPageNumber } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst Finish : React.FC<{}> = () => {\n\n  const pageNumber = useSelector(selectPageNumber)\n\n  const pageZeroStyle = css({\n    display: pageNumber !== 0 ? 'none' :'block',\n  })\n\n  const pageOneStyle = css({\n    display: pageNumber !== 1 ? 'none' :'block',\n  })\n\n  const pageTwoStyle = css({\n    display: pageNumber !== 2 ? 'none' :'block',\n  })\n\n  return (\n    <div  title=\"Finish\">\n      <div css={pageZeroStyle} >\n        <FinishMenu />\n      </div>\n      <div css={pageOneStyle} >\n        <Save />\n        <WorkflowSelection />\n        <Discard />\n      </div>\n      <div css={pageTwoStyle} >\n        <WorkflowConfiguration />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Takes you to a different page\n */\nexport const PageButton : React.FC<{pageNumber: number, label: string, iconName: IconDefinition}> = ({pageNumber, label, iconName}) => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const pageButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, pageButtonStyle]} title={label}\n      onClick={() =>\n        dispatch(setPageNumber(pageNumber))\n      }>\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{label}</span>\n    </div>\n  );\n}\n\n\nexport default Finish;\n","import React from \"react\";\n\nimport Video from './Video';\nimport Timeline from './Timeline';\nimport CuttingActions from './CuttingActions';\nimport Finish from \"./Finish\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useSelector } from 'react-redux'\nimport { selectMainMenuState } from '../redux/mainMenuSlice'\n\nimport { MainMenuStateNames } from '../types'\n\n/**\n * A container for the main functionality\n * Shows different components depending on the state off the app\n */\nconst MainContent: React.FC<{}> = () => {\n\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  const cuttingStyle = css({\n    display: mainMenuState !== MainMenuStateNames.cutting ? 'none' :'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    paddingLeft: '20px',\n  })\n\n  const finishStyle = css({\n    display: mainMenuState !== MainMenuStateNames.finish ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    height: '100%',\n  })\n\n  const defaultStyle = css({\n    display: (mainMenuState === MainMenuStateNames.cutting || mainMenuState === MainMenuStateNames.finish )\n              ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n     <div title=\"MainMenuContext\" css={{width: '100%'}}>\n      <div css={cuttingStyle} title=\"Cutting Container\">\n          <Video />\n          <CuttingActions />\n          <Timeline />\n      </div>\n      <div css={finishStyle} title=\"Finish Container\">\n        <Finish />\n      </div>\n      <div css={defaultStyle}>\n        <FontAwesomeIcon icon={faTools} size=\"10x\" />\n        Placeholder\n      </div>\n     </div>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faTimesCircle, faQuestion, } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector } from 'react-redux';\nimport { selectDuration } from '../redux/videoSlice'\nimport { selectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\n/**\n * This page is to be displayed when the user is \"done\" with the editor\n * and should not be able to perfom any actions anymore\n * TODO: Improve state management somehow to avoid the possibility of an error case\n * TODO: Improve text\n * TODO: Add a button that closes the editor window/frame?\n */\nconst TheEnd : React.FC<{}> = () => {\n\n  // Init redux variables\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(selectStatus)\n  const duration = useSelector(selectDuration)\n\n  const icon = () => {\n    if (abortState) {\n      return faTimesCircle\n    } else if (postAndProcessState === \"success\") {\n      return faCheckCircle\n    } else {\n      return faQuestion\n    }\n  }\n\n  const text = () => {\n    if (abortState) {\n      return \"You really did it. All your changes are now lost forever. You can now continue doing whatever you want.\"\n    } else if (postAndProcessState === \"success\") {\n      return `Changes successfully saved to Opencast. Processing your changes may take up to\n              ${new Date((duration * 2)).toISOString().substr(11, 8)} hours.\n              You can now close the editor.`\n    } else {\n      return \"Now this is awkward. Something has gone very wrong.\"\n    }\n  }\n\n  const theEndStyle = css({\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n    <div css={theEndStyle} title=\"The last area\">\n      <FontAwesomeIcon icon={icon()} size=\"10x\" />\n      {text()}\n    </div>\n  );\n}\n\nexport default TheEnd","import React from \"react\";\n\nimport MainMenu from './MainMenu';\nimport MainContent from './MainContent';\nimport TheEnd from './TheEnd';\n\nimport { useSelector } from 'react-redux';\nimport { selectStatus as postAndProcessSelectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\nconst Body: React.FC<{}> = () => {\n\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(postAndProcessSelectStatus)\n\n  // If we're in a special state, display a special page\n  // Otherwise display the normal page\n  const main = () => {\n    if(abortState || postAndProcessState === \"success\") {\n      return (\n        <TheEnd />\n      );\n    } else {\n      return (\n        <div css={bodyStyle} title=\"Body\">\n          <MainMenu />\n          <MainContent />\n        </div>\n      );\n    }\n  }\n\n  const bodyStyle = {\n    display: 'flex',\n    flexDirection: 'row' as const,\n    height: '100%',\n  };\n\n  return (\n    <React.Fragment>\n      {main()}\n    </React.Fragment>\n  );\n};\n\nexport default Body;\n","import React from 'react';\nimport Body from './main/Body';\nimport { GlobalStyle } from './cssStyles'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport mainMenuStateReducer from './mainMenuSlice'\nimport finishStateReducer from './finishSlice'\nimport videoReducer from './videoSlice'\nimport workflowPostReducer from './workflowPostSlice'\nimport workflowPostAndProcessReducer from './workflowPostAndProcessSlice'\nimport abortReducer from './abortSlice'\n\nexport default configureStore({\n  reducer: {\n    mainMenuState: mainMenuStateReducer,\n    finishState: finishStateReducer,\n    videoState: videoReducer,\n    workflowPostState: workflowPostReducer,\n    workflowPostAndProcessState: workflowPostAndProcessReducer,\n    abortState: abortReducer,\n  }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}