{"version":3,"sources":["types.ts","redux/mainMenuSlice.ts","cssStyles.tsx","main/MainMenu.tsx","util/client.js","util/utilityFunctions.ts","redux/videoSlice.ts","main/Video.tsx","img/placeholder_waveform.png","main/Timeline.tsx","main/CuttingActions.tsx","redux/finishSlice.ts","main/FinishMenu.tsx","main/WorkflowSelection.tsx","redux/workflowPostSlice.ts","redux/workflowPostAndProcessSlice.ts","main/WorkflowConfiguration.tsx","redux/abortSlice.ts","main/FinishContent.tsx","main/MainContent.tsx","main/TheEnd.tsx","main/Body.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["MainMenuStateNames","initialState","value","cutting","mainMenuSlice","createSlice","name","reducers","setState","state","action","payload","actions","selectMainMenuState","mainMenuState","GlobalStyle","styles","globalStyle","basicButtonStyle","css","borderRadius","cursor","transitionDuration","transitionProperty","transform","display","justifyContent","alignItems","gap","textAlign","MainMenuButton","iconName","stateName","dispatch","useDispatch","activeState","useSelector","mainMenuButtonStyle","width","height","backgroundColor","flexDirection","title","onClick","icon","size","MainMenu","style","borderRight","flexShrink","padding","faFilm","faListUl","metadata","faPhotoVideo","thumbnail","faSignOutAlt","finish","client","endpoint","a","body","customConfig","headers","encoded","btoa","unescape","encodeURIComponent","authHeaders","config","method","JSON","stringify","window","fetch","response","text","data","length","parse","ok","Error","statusText","Promise","reject","message","get","post","roundToDecimalPlace","num","decimalPlace","decimalFactor","Math","pow","round","Number","EPSILON","isPlaying","isPlayPreview","currentlyAt","segments","id","nanoid","start","end","deleted","activeSegmentIndex","selectedWorkflowIndex","previewTriggered","videoURLs","videoCount","duration","presenters","workflows","status","error","undefined","fetchVideoInformation","createAsyncThunk","videoSlice","setIsPlaying","setIsPlayPreview","setPreviewTriggered","setCurrentlyAt","updateActiveSegment","skipDeletedSegments","setCurrentlyAtInSeconds","addSegment","push","cut","segmentA","segmentB","splice","markAsDeletedOrAlive","setSelectedWorkflowIndex","mergeLeft","mergeSegments","mergeRight","extraReducers","builder","addCase","pending","fulfilled","previews","reduce","o","uri","parseSegments","sort","n1","n2","displayOrder","rejected","findIndex","element","newSegments","forEach","mergeSegmentIndex","min","max","endTime","index","selectIsPlaying","videoState","selectIsPlayPreview","selectPreviewTriggered","selectCurrentlyAt","selectCurrentlyAtInSeconds","selectSegments","selectActiveSegmentIndex","selectIsCurrentSegmentAlive","selectSelectedWorkflowIndex","selectVideoURL","selectVideoCount","selectDuration","selectDurationInSeconds","selectTitle","selectPresenters","selectWorkflows","VideoPlayer","url","isMuted","testTmp","ref","useRef","useState","ready","setReady","useEffect","current","seekTo","playing","muted","onProgress","playedSeconds","progressInterval","onReady","onEnded","VideoControls","videoControlStyle","videoControlsRowStyle","playButtonStyle","playPreviewStyle","faEyeSlash","faEye","faToggleOn","faToggleOff","faPause","faPlay","Date","toISOString","substr","VideoHeader","titleStyle","join","Video","content","videoURLStatus","className","videoPlayers","i","key","videoAreaStyle","borderBottom","videoPlayerAreaStyle","Scrubber","timelineWidth","x","y","controlledPosition","setControlledPosition","isGrabbed","setIsGrabbed","wasCurrentlyAtRef","updateXPos","scrubberStyle","position","zIndex","boxShadow","scrubberDragHandleStyle","scrubberDragHandleIconStyle","onStart","onStop","e","axis","bounds","disabled","faBars","SegmentsList","bgColor","segmentsStyle","paddingTop","map","segment","borderStyle","borderColor","borderWidth","boxSizing","Timeline","useResizeObserver","timelineStyle","alt","src","myImg","top","cuttingActionButtonStyle","CuttingActionsButton","actionName","MarkAsDeletedButton","isCurrentSegmentAlive","faTrash","faTrashRestore","CuttingActions","cuttingStyle","blockStyle","faCut","faStepBackward","faStepForward","faQuestion","finishSlice","selectFinishState","finishState","FinishMenuButton","FinishMenu","saveProcessCancelStyle","faSave","faFileExport","faTimesCircle","WorkflowButton","workflowIndex","workflowButtonStyle","WorkflowSelection","workflowStyle","paddingRight","workflow","postVideoInformation","argument","mediaPackageId","convertSegments","workflowPostSlice","selected","selectStatus","workflowPostState","selectError","workflowPostAndProcessState","postVideoInformationWithWorkflow","worklows","workflowID","workflowPostAndProcessSlice","SaveAndProcessButton","workflowStatus","faDotCircle","faSpinner","faCheck","faExclamationCircle","saveButtonStyle","WorkflowConfiguration","postAndProcessWorkflowStatus","postAndProcessError","workflowConfigurationStyle","errorBoxStyle","fontWeight","faTools","abortSlice","selectAbortState","abortState","Save","postWorkflowStatus","postError","saveStyle","Process","startWorkflowStyle","Abort","cancelStyle","SaveButton","AbortButton","setAbortState","FinishContent","finishContentStyle","MainContent","paddingLeft","defaultStyle","TheEnd","postAndProcessState","theEndStyle","faCheckCircle","Body","postAndProcessSelectStatus","bodyStyle","Fragment","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mainMenuStateReducer","finishStateReducer","videoReducer","workflowPostReducer","workflowPostAndProcessReducer","abortReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.b6770a0a.chunk.js","sourcesContent":["export interface Segment {\n  id: string,\n  start: number,\n  end: number,\n  deleted: boolean,\n}\n\nexport interface TimelineState {\n  segments: Segment[]\n  scrubberPos: number\n}\n\nexport interface PostEditArgument {\n  segments: Segment[]\n  mediaPackageId: string\n}\n\nexport interface PostAndProcessEditArgument extends PostEditArgument{\n  workflowID: string\n}\n\nexport enum MainMenuStateNames {\n  cutting = \"Cutting\",\n  metadata = \"Metadata\",\n  thumbnail = \"Thumbnail\",\n  finish = \"Finish\",\n}\n\nexport interface httpRequestState {\n  status: 'idle' | 'loading' | 'success' | 'failed',\n  error: string | undefined\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { MainMenuStateNames} from '../types'\n\nexport interface mainMenu {\n  value: MainMenuStateNames,\n}\n\nconst initialState: mainMenu = {\n  value: MainMenuStateNames.cutting,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const mainMenuSlice = createSlice({\n  name: 'mainMenuState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<mainMenu[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = mainMenuSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectMainMenuState = (state: { mainMenuState: { value: mainMenu[\"value\"]; }; }) => state.mainMenuState.value\n\nexport default mainMenuSlice.reducer\n","/**\n * This file contains general css stylings\n */\nimport { css, Global } from '@emotion/core'\nimport React from \"react\";\n\n/**\n * An emotion component that inserts styles globally\n * Is removed when the styles change or when the Global component unmounts.\n */\nexport const GlobalStyle: React.FC = () => {\n  return (\n    <Global styles={globalStyle} />\n  );\n}\n\n/**\n * CSS for the global style component\n */\nexport const globalStyle = css({\n  body: {\n    backgroundColor: 'snow',\n    fontSize: 'medium'\n  }\n});\n\n/**\n * CSS for buttons\n */\nexport const basicButtonStyle = css({\n  borderRadius: '10px',\n  cursor: \"pointer\",\n  // Animation\n  transitionDuration: \"0.3s\",\n  transitionProperty: \"transform\",\n  \"&:hover\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:active\": {\n    transform: 'scale(0.9)',\n  },\n  // Flex position child elements\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  gap: '10px',\n  textAlign: 'center' as const,\n});","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm, faListUl, faPhotoVideo, faSignOutAlt, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { mainMenu, setState, selectMainMenuState } from '../redux/mainMenuSlice'\n\nimport { MainMenuStateNames } from '../types'\nimport { basicButtonStyle } from '../cssStyles'\n\n/**\n * A container for selecting the functionality shown in the main part of the app\n */\nconst MainMenu: React.FC<{}> = () => {\n\n  const mainMenuStyle = {\n    borderRight: '1px solid #BBB',\n    width: '100px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    flexShrink: 0,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  };\n\n  return (\n    <div style={mainMenuStyle} title=\"MainMenu\">\n      <MainMenuButton iconName={faFilm} stateName={MainMenuStateNames.cutting}/>\n      <MainMenuButton iconName={faListUl} stateName={MainMenuStateNames.metadata}/>\n      <MainMenuButton iconName={faPhotoVideo} stateName={MainMenuStateNames.thumbnail}/>\n      <MainMenuButton iconName={faSignOutAlt} stateName={MainMenuStateNames.finish}/>\n    </div>\n  );\n};\n\n/**\n * A button to set the state of the app\n * @param param0\n */\nconst MainMenuButton: React.FC<{iconName: IconDefinition, stateName: mainMenu[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectMainMenuState)\n\n  const mainMenuButtonStyle = css({\n    width: '100%',\n    height: '100px',\n    ...(activeState === stateName) && {\n      backgroundColor: 'lightblue',\n    },\n    flexDirection: 'column' as const,\n  });\n\n  return (\n    <div css={[basicButtonStyle, mainMenuButtonStyle]} title={stateName}\n      onClick={() => {\n        dispatch(setState(stateName));\n      }}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\nexport default MainMenu;\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\n/**\n * Client I stole this form a react tutorial\n */\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const encoded = btoa(unescape(encodeURIComponent(\n    \"admin:opencast\"\n  )));\n  const authHeaders = { 'Authorization': `Basic ${encoded}` };\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n      ...authHeaders,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  let text\n  try {\n    const response = await window.fetch(endpoint, config)\n    text = await response.text()\n    text.length ? data = JSON.parse(text) : data = ''\n    // data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","export const roundToDecimalPlace = (num: number, decimalPlace: number) => {\n  let decimalFactor = Math.pow(10, decimalPlace)\n  return Math.round((num + Number.EPSILON) * decimalFactor) / decimalFactor\n}\n","import { createSlice, nanoid, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\nimport { Segment, httpRequestState }  from '../types'\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\nimport { WritableDraft } from 'immer/dist/internal';\n\nexport interface video {\n  isPlaying: boolean,             // Are videos currently playing?\n  isPlayPreview: boolean,         // Should deleted segments be skipped?\n  previewTriggered: boolean,      // Basically acts as a callback for the video players. TODO: Figure out how to do callbacks\n  currentlyAt: number,            // Position in the video in milliseconds\n  segments: Segment[],\n  activeSegmentIndex: number,     // Index of the segment that is currenlty hovered\n  selectedWorkflowIndex: number,  // Index of the currently selected workflow\n\n  videoURLs: string[],  // Links to each video\n  videoCount: number,   // Total number of videos\n  duration: number,     // Video duration in milliseconds\n  title: string,\n  presenters: string[],\n  workflows: string[],\n}\n\nconst initialState: video & httpRequestState = {\n  isPlaying: false,\n  isPlayPreview: false,\n  currentlyAt: 0,   // Position in the video in milliseconds\n  segments: [{id: nanoid(), start: 0, end: 1, deleted: false}],\n  activeSegmentIndex: 0,\n  selectedWorkflowIndex: 0,\n  previewTriggered: false,\n\n  videoURLs: [],\n  videoCount: 0,\n  duration: 0,\n  title: '',\n  presenters: [],\n  workflows: [],\n\n  status: 'idle',\n  error: undefined,\n}\n\nexport const fetchVideoInformation = createAsyncThunk('video/fetchVideoInformation', async () => {\n  const response = await client.get('https://legacy.opencast.org/admin-ng/tools/ID-dual-stream-demo/editor.json')\n  return response\n})\n\n/**\n * Slice for the state of the \"video\"\n * Treats the multitude of videos that may exist as one video\n * TODO: Find a way to init the segments array with a starting segment\n */\nexport const videoSlice = createSlice({\n  name: 'videoState',\n  initialState,\n  reducers: {\n    setIsPlaying: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlaying = action.payload;\n    },\n    setIsPlayPreview: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlayPreview = action.payload;\n    },\n    setPreviewTriggered: (state, action) => {\n      state.previewTriggered = action.payload\n    },\n    setCurrentlyAt: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload, 3);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    setCurrentlyAtInSeconds: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload * 1000, 3);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    addSegment: (state, action: PayloadAction<video[\"segments\"][0]>) => {\n      state.segments.push(action.payload)\n    },\n    cut: (state) => {\n      // If we're exactly between two segments, we can't split the current segment\n      if (state.segments[state.activeSegmentIndex].start === state.currentlyAt ||\n          state.segments[state.activeSegmentIndex].end === state.currentlyAt ) {\n        return state;\n      }\n\n      // Make two (new) segments out of it\n      let segmentA : Segment =  {id: nanoid(),\n        start: state.segments[state.activeSegmentIndex].start,\n        end: state.currentlyAt,\n        deleted: true}\n      let segmentB : Segment =  {id: nanoid(),\n        start: state.currentlyAt,\n        end: state.segments[state.activeSegmentIndex].end,\n        deleted: true}\n\n      // Add the new segments and remove the old one\n      state.segments.splice(state.activeSegmentIndex, 1, segmentA, segmentB);\n    },\n    markAsDeletedOrAlive: (state) => {\n      state.segments[state.activeSegmentIndex].deleted = !state.segments[state.activeSegmentIndex].deleted\n    },\n    setSelectedWorkflowIndex: (state, action: PayloadAction<video[\"selectedWorkflowIndex\"]>) => {\n      state.selectedWorkflowIndex = action.payload\n    },\n    mergeLeft: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex - 1)\n    },\n    mergeRight: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex + 1)\n    },\n  },\n  // For Async Requests\n  extraReducers: builder => {\n    builder.addCase(\n      fetchVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n        // eslint-disable-next-line no-sequences\n        state.videoURLs = action.payload.previews.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        state.videoCount = action.payload.previews.length\n        state.duration = action.payload.duration\n        state.title = action.payload.title\n        state.presenters = action.payload.presenters\n        state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n          if (n1.displayOrder > n2.displayOrder) { return 1; }\n          if (n1.displayOrder < n2.displayOrder) { return -1; }\n          return 0;\n        });\n    })\n    builder.addCase(\n      fetchVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\n/**\n * Helper function to update the activeSegmentIndex\n * @param state\n */\nconst updateActiveSegment = (state: WritableDraft<video>) => {\n  state.activeSegmentIndex = state.segments.findIndex(element =>\n    element.start <= state.currentlyAt && element.end >= state.currentlyAt)\n  // TODO: Proper error handling. Rewrite function?\n  if(state.activeSegmentIndex < 0) {\n    state.activeSegmentIndex = 0\n  }\n}\n\n/**\n * Helper Function for testing with current/old editor API\n */\nconst parseSegments = (segments: any, duration: number) => {\n  let newSegments : Segment[] = []\n\n  if (segments.length === 0) {\n    newSegments.push({id: nanoid(), start: 0, end: duration, deleted: false})\n  }\n\n  segments.forEach((element: { start: any; end: any; deleted: any; }) => {\n    newSegments.push({id: nanoid(), start: element.start, end: element.end, deleted: element.deleted})\n  });\n  return newSegments\n}\n\n/**\n * Helper function for merging two segments\n */\nconst mergeSegments = (state: WritableDraft<video>, activeSegmentIndex: number, mergeSegmentIndex: number) => {\n  // Check if mergeSegmentIndex is valid\n  if (mergeSegmentIndex < 0 || mergeSegmentIndex > state.segments.length - 1) {\n    return\n  }\n\n  // Increase activeSegment length\n  state.segments[activeSegmentIndex].start = Math.min(\n    state.segments[activeSegmentIndex].start, state.segments[mergeSegmentIndex].start)\n  state.segments[activeSegmentIndex].end = Math.max(\n    state.segments[activeSegmentIndex].end, state.segments[mergeSegmentIndex].end)\n\n  // Remove the other segment\n  state.segments.splice(mergeSegmentIndex, 1);\n\n  // Update active segment\n  updateActiveSegment(state)\n}\n\nconst skipDeletedSegments = (state: WritableDraft<video>) => {\n  if(state.isPlaying && state.segments[state.activeSegmentIndex].deleted && state.isPlayPreview) {\n      let endTime = state.segments[state.activeSegmentIndex].end\n      let index = state.activeSegmentIndex\n      while (index < state.segments.length && state.segments[index].deleted) {\n        endTime = state.segments[index].end\n        index++\n      }\n      state.currentlyAt = endTime\n      state.previewTriggered = true\n    }\n}\n\nexport const { setIsPlaying, setIsPlayPreview, setCurrentlyAt, setCurrentlyAtInSeconds, addSegment, cut, markAsDeletedOrAlive,\n  setSelectedWorkflowIndex, mergeLeft, mergeRight, setPreviewTriggered } = videoSlice.actions\n\n// Export selectors\n// Selectors mainly pertaining to the video state\nexport const selectIsPlaying = (state: { videoState: { isPlaying: video[\"isPlaying\"] }; }) =>\n  state.videoState.isPlaying\nexport const selectIsPlayPreview = (state: { videoState: { isPlayPreview: video[\"isPlayPreview\"] }; }) =>\n  state.videoState.isPlayPreview\nexport const selectPreviewTriggered = (state: { videoState: { previewTriggered: video[\"previewTriggered\"] } }) =>\n  state.videoState.previewTriggered\nexport const selectCurrentlyAt = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt\nexport const selectCurrentlyAtInSeconds = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt / 1000\nexport const selectSegments = (state: { videoState: { segments: video[\"segments\"] } }) =>\n  state.videoState.segments\nexport const selectActiveSegmentIndex = (state: { videoState: { activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  state.videoState.activeSegmentIndex\nexport const selectIsCurrentSegmentAlive = (state: { videoState:\n  { segments: { [x: number]: { deleted: boolean; }; }; activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  !state.videoState.segments[state.videoState.activeSegmentIndex].deleted\nexport const selectSelectedWorkflowIndex = (state: { videoState:\n  { selectedWorkflowIndex: video[\"selectedWorkflowIndex\"]; }; }) =>\n  state.videoState.selectedWorkflowIndex\n\n// Selectors mainly pertaining to the information fetched from Opencast\nexport const selectVideoURL = (state: { videoState: { videoURLs: video[\"videoURLs\"] } }) => state.videoState.videoURLs\nexport const selectVideoCount = (state: { videoState: { videoCount: video[\"videoCount\"] } }) => state.videoState.videoCount\nexport const selectDuration = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration\nexport const selectDurationInSeconds = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration / 1000\nexport const selectTitle = (state: { videoState: { title: video[\"title\"] } }) => state.videoState.title\nexport const selectPresenters = (state: { videoState: { presenters: video[\"presenters\"] } }) => state.videoState.presenters\nexport const selectWorkflows = (state: { videoState: { workflows: video[\"workflows\"] } }) => state.videoState.workflows\n\nexport default videoSlice.reducer\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { httpRequestState } from '../types'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faToggleOn, faToggleOff, faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectCurrentlyAtInSeconds, setIsPlaying, setCurrentlyAtInSeconds,\n  fetchVideoInformation, selectVideoURL, selectVideoCount, selectDurationInSeconds, selectTitle, selectPresenters,\n  setPreviewTriggered, selectPreviewTriggered, selectIsPlayPreview, setIsPlayPreview\n} from '../redux/videoSlice'\n\nimport ReactPlayer from 'react-player'\n\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\n\n/**\n * Container for the videos and their controls\n * TODO: Complete fetching\n * TODO: Move fetching to a more central part of the app\n */\nconst Video: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const videoURLs = useSelector(selectVideoURL)\n  const videoCount = useSelector(selectVideoCount)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n  const error = useSelector((state: { videoState: { error: httpRequestState[\"error\"] } }) => state.videoState.error)\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (videoURLStatus === 'idle') {\n      dispatch(fetchVideoInformation())\n    }\n  }, [videoURLStatus, dispatch])\n\n  // Update based on current fetching status\n  let content\n  if (videoURLStatus === 'loading') {\n    content = <div className=\"loader\">Loading...</div>\n  } else if (videoURLStatus === 'success') {\n    content = \"\"//<div className=\"loader\">Success...</div>\n  } else if (videoURLStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n\n  // Initialize video players\n  const videoPlayers: JSX.Element[] = [];\n  for (let i = 0; i < videoCount; i++) {\n    // videoPlayers.push(<VideoPlayer key={i} url='https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4' />);\n    videoPlayers.push(<VideoPlayer key={i} url={videoURLs[i]} isMuted={i === 0}/>);\n  }\n\n  // Style\n  const videoAreaStyle = css({\n    display: 'flex',\n    width: 'auto',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '10px',\n    borderBottom: '1px solid #BBB',\n  });\n\n  const videoPlayerAreaStyle = css({\n    backgroundColor: 'black',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  });\n\n  return (\n    <div css={videoAreaStyle} title=\"Video Area\">\n      {content}\n      <VideoHeader />\n      <div css={videoPlayerAreaStyle} title=\"Video Player Area\">\n        {videoPlayers}\n      </div>\n      <VideoControls />\n    </div>\n  );\n};\n\n/**\n * A single video player\n * @param param0\n */\nconst VideoPlayer: React.FC<{url: string, isMuted: boolean}> = ({url, isMuted}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAtInSeconds)\n  const duration  = useSelector(selectDurationInSeconds)\n  const testTmp = useSelector(selectPreviewTriggered)\n\n  // Init state variables\n  const ref = useRef<ReactPlayer>(null);\n  const [ready, setReady] = useState(false);\n\n  // Callback for when the video is playing\n  const onProgressCallback = (state: { played: number, playedSeconds: number, loaded: number, loadedSeconds:  number }) => {\n    // Only update redux if there was a substantial change\n    if (roundToDecimalPlace(currentlyAt, 3) !== roundToDecimalPlace(state.playedSeconds, 3)) {\n      dispatch(setCurrentlyAtInSeconds(state.playedSeconds))\n    }\n  }\n\n  // Callback for checking whether the video element is ready\n  const onReadyCallback = () => {\n    setReady(true);\n  }\n\n  const onEndedCallback = () => {\n    dispatch(setIsPlaying(false));\n    dispatch(setCurrentlyAtInSeconds(duration)); // It seems onEnded is called before the full duration is reached, so we set currentlyAt to the very end\n  }\n\n  useEffect(() => {\n    // Seek if the position in the video got changed externally\n    if(!isPlaying && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n    }\n    if(testTmp && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n      dispatch(setPreviewTriggered(false))\n    }\n  })\n\n  return (\n    <ReactPlayer url={url}\n      ref={ref}\n      width='100%'\n      height='auto'\n      playing={isPlaying}\n      muted={isMuted}\n      onProgress={onProgressCallback}\n      progressInterval={100}\n      onReady={onReadyCallback}\n      onEnded={onEndedCallback}\n    />\n  );\n\n  // return (\n  //   <div title=\"Video Player\">\n  //     <video width=\"320\" height=\"240\" controls ref={vidRef}>\n  //     <source src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4\" type=\"video/mp4\" />\n  //     Your browser does not support the video tag.\n  //     </video>\n  //   </div>\n  // );\n};\n\n/**\n * Contains controls for manipulating multiple video players at once\n * TODO: Add missing controls\n * TODO: Turn time display into a control\n */\nconst VideoControls: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const isPlayPreview = useSelector(selectIsPlayPreview)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n\n  // Style\n  const videoControlStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n  })\n\n  const videoControlsRowStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n    gap: '50px',\n  })\n\n  const playButtonStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const playPreviewStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.05)',\n    },\n  })\n\n  return (\n    <div css={videoControlStyle} title=\"Video Controls\">\n      <div css={videoControlsRowStyle} title=\"Video Controls Top Row\">\n        <div style={{display: 'flex', gap: '10px', width: '50px', justifyContent: 'center'}}>\n          <FontAwesomeIcon icon={isPlayPreview ? faEyeSlash : faEye} size=\"1x\" title=\"Play Preview Icon\"/>\n          <FontAwesomeIcon css={playPreviewStyle} icon={isPlayPreview ? faToggleOn : faToggleOff} size=\"1x\"\n            title={\"Play Preview Switch: \" + isPlayPreview}\n            onClick={() => dispatch(setIsPlayPreview(!isPlayPreview))}\n          />\n        </div>\n        <FontAwesomeIcon css={playButtonStyle} icon={isPlaying ? faPause : faPlay} size=\"2x\"\n          title=\"Play Button\"\n          onClick={() => dispatch(setIsPlaying(!isPlaying))}\n        />\n        <div css={{display: 'inline-block', width: '110px'}}>\n          {new Date((currentlyAt ? currentlyAt : 0)).toISOString().substr(11, 12)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Displays elements above the video, e.g. title\n */\nconst VideoHeader: React.FC<{}> = () => {\n  const title = useSelector(selectTitle)\n  const presenters = useSelector(selectPresenters)\n\n  const titleStyle = css({\n    fontSize: 'large'\n  })\n\n  return (\n    <div title=\"Video Area Header\">\n      <div css={titleStyle} title=\"Video Title\">{title}</div>\n      <div title=\"Video Presenters\">by {presenters.join(\", \")}</div>\n    </div>\n  );\n}\n\nexport default Video;\n","export default __webpack_public_path__ + \"static/media/placeholder_waveform.d23b087b.png\";","import React, { useState, useRef, useEffect } from 'react'\n\nimport Draggable from 'react-draggable';\n\nimport { css } from '@emotion/core'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment } from '../types'\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectSegments, selectActiveSegmentIndex, selectDuration,\n  setCurrentlyAt\n} from '../redux/videoSlice'\n\n// import { selectDuration, } from '../redux/videoURLSlice'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nimport useResizeObserver from \"use-resize-observer\";\n\nimport myImg from '../img/placeholder_waveform.png'\n\n/**\n * A container for visualizing the cutting of the video, as well as for controlling\n * the current position in the video\n * Its width corresponds to the duration of the video\n */\nconst Timeline: React.FC<{}> = () => {\n\n  const { ref, width = 1, } = useResizeObserver<HTMLDivElement>();\n\n  const timelineStyle = css({\n    position: 'relative' as 'relative',     // Need to set position for Draggable bounds to work\n    height: '250px',\n    width: '100%',\n    //backgroundImage: `url({myImg})`,\n  });\n\n  return (\n  <div ref={ref} css={timelineStyle} title=\"Timeline\">\n    <Scrubber timelineWidth={width}/>\n    <div css={{height: '230px'}}>\n      <img alt='waveform2' src={myImg} style={{position: \"absolute\" as \"absolute\", height: '230px', width: '100%', top: '10px'}}></img>\n      <SegmentsList timelineWidth={width}/>\n    </div>\n  </div>\n  );\n};\n\n/**\n * Displays and defines the current position in the video\n * TODO: Fix position fail when starting and then quickly stopping the video\n *       Possibly because state.playedSceonds in Video is faulty for small values\n * TODO: Fix timeline width changes\n * @param param0\n */\nconst Scrubber: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n\n  // Init state variables\n  const [controlledPosition, setControlledPosition] = useState({x: 0,y: 0,});\n  const [isGrabbed, setIsGrabbed] = useState(false)\n  const wasCurrentlyAtRef = useRef(0)\n\n  // Reposition scrubber when the current x position was changed externally\n  useEffect(() => {\n    if(currentlyAt !== wasCurrentlyAtRef.current) {\n      updateXPos();\n      wasCurrentlyAtRef.current = currentlyAt;\n    }\n  })\n\n  // // Reposition scrubber when the timeline width changes\n  // useEffect(() => {\n  //   setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [timelineWidth])\n\n  // Callback for when the scrubber gets dragged by the user\n  // const onControlledDrag = (e: any, position: any) => {\n  //   const {x, y} = position;\n  //   dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n  // };\n\n  // Callback for when the position changes by something other than dragging\n  const updateXPos = () => {\n    const y = controlledPosition.y;\n    setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y});\n  };\n\n  const onStartDrag = () => {\n    setIsGrabbed(true)\n  }\n\n  const onStopDrag = (e: any, position: any) => {\n    const {x, y} = position;\n    setControlledPosition({x, y});\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n\n    setIsGrabbed(false)\n  }\n\n  const scrubberStyle = css({\n    backgroundColor: 'rgba(255, 0, 0, 1)',\n    height: '250px',\n    width: '1px',\n    position: 'absolute' as 'absolute',\n    zIndex: 2,\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  });\n\n  const scrubberDragHandleStyle = css({\n    backgroundColor: 'rgba(255, 255, 255, 1)',\n    borderRadius: '10px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: isGrabbed ? \"grabbing\" : \"grab\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const scrubberDragHandleIconStyle = css({\n    transform: 'scaleY(1.5) rotate(90deg)',\n    padding: '5px',\n  })\n\n  return (\n    <Draggable\n      //onDrag={onControlledDrag}\n      onStart={onStartDrag}\n      onStop={onStopDrag}\n      axis=\"x\"\n      bounds=\"parent\"\n      position={controlledPosition}\n      disabled={isPlaying}\n      >\n      <div css={scrubberStyle} title=\"Scrubber\">\n        <div css= {scrubberDragHandleStyle} title=\"dragHandle\">\n          <FontAwesomeIcon css={scrubberDragHandleIconStyle} icon={faBars} size=\"1x\" />\n        </div>\n      </div>\n    </Draggable>\n  );\n};\n\n/**\n * Container responsible for rendering the segments that are created when cuting\n * TODO: Complete styling\n */\nconst SegmentsList: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const segments = useSelector(selectSegments)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)\n\n  /**\n   * Returns a background color based on whether the segment is to be deleted\n   * and whether the segment is currently active\n   */\n  const bgColor = (deleted: boolean, index: boolean) => {\n    if (!deleted && !index) {\n      return 'rgba(0, 0, 255, 0.4)'\n    } else if (deleted && !index) {\n      return 'rgba(255, 0, 0, 0.4)'\n    } else if (!deleted && index) {\n      return 'rgba(0, 0, 200, 0.4)'\n    } else if (deleted && index) {\n      return 'rgba(200, 0, 0, 0.4)'\n    }\n  }\n\n  // Render the individual segments\n  const renderedSegments = () => {\n    return (\n      segments.map( (segment: Segment, index: number) => (\n        <div key={segment.id} title=\"Segment\" css={{\n          backgroundColor: bgColor(segment.deleted, activeSegmentIndex === index),//segment.state === \"alive\" ? 'rgba(0, 0, 255, 0.4)' : 'rgba(255, 0, 0, 0.4)',\n          borderRadius: '5px',\n          borderStyle: 'solid',\n          borderColor: 'white',\n          borderWidth: '1px',\n          boxSizing: 'border-box',\n          width: ((segment.end - segment.start) / duration) * 100 + '%',\n          height: '230px',\n          zIndex: 1,\n        }}>\n        </div>\n      ))\n    );\n  }\n\n  const segmentsStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    paddingTop: '10px',\n  })\n\n  return (\n    <div css={segmentsStyle} title=\"Segments\">\n      {renderedSegments()}\n    </div>\n  );\n};\n\nexport default Timeline;\n","import React from \"react\";\n\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition,\n  faCut,\n  faQuestion,\n  faStepBackward,\n  faStepForward,\n  faTrash,\n  faTrashRestore,\n  } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  cut, markAsDeletedOrAlive, selectIsCurrentSegmentAlive, mergeLeft, mergeRight\n} from '../redux/videoSlice'\n\n/**\n * Defines the different actions a user can perform while in cutting mode\n */\nconst CuttingActions: React.FC<{}> = () => {\n\n  const cuttingStyle =  css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-between',\n    gap: '30px',\n  })\n\n  const blockStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    gap: '30px',\n  })\n\n  return (\n    <div css={cuttingStyle}>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faCut} actionName=\"Cut\" action={cut}/>\n          <MarkAsDeletedButton />\n          <CuttingActionsButton iconName={faStepBackward} actionName=\"Merge Left\" action={mergeLeft}/>\n          <CuttingActionsButton iconName={faStepForward} actionName=\"Merge Right\" action={mergeRight}/>\n        </div>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Reset changes\" action={null}/>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Undo\" action={null}/>\n        </div>\n    </div>\n  );\n};\n\n/**\n * CSS for cutting buttons\n */\nconst cuttingActionButtonStyle = {\n  padding: '16px',\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n};\n\n/**\n * A button representing a single action a user can take while cutting\n * TODO: Add functionality\n * TODO: Complete styling\n * @param param0\n */\nconst CuttingActionsButton: React.FC<{iconName: IconDefinition, actionName: string, action: any}> = ({iconName, actionName, action}) => {\n\n  const dispatch = useDispatch();\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]} title={actionName}\n      onClick={() => action ? dispatch(action()) : \"\"}>\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{actionName}</span>\n    </div>\n  );\n};\n\n/**\n * Button that changes its function based on context\n */\nconst MarkAsDeletedButton : React.FC<{}> = () => {\n\n  const dispatch = useDispatch();\n  const isCurrentSegmentAlive = useSelector(selectIsCurrentSegmentAlive)\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]} title={isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}\n      onClick={() => dispatch(markAsDeletedOrAlive())}>\n      <FontAwesomeIcon icon={isCurrentSegmentAlive ? faTrash : faTrashRestore} size=\"1x\" />\n      <div>{isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}</div>\n    </div>\n  );\n}\n\nexport default CuttingActions;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface finish {\n  value: \"Save\" | \"Process\" | \"Abort\" | undefined,\n}\n\nconst initialState: finish = {\n  value: \"Process\",\n}\n\n/**\n * Slice for the main menu state\n */\nexport const finishSlice = createSlice({\n  name: 'finishState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<finish[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\n// Export Actions\nexport const { setState, } = finishSlice.actions\n\n// Export Selectors\nexport const selectFinishState = (state: { finishState: { value: finish[\"value\"]; }; }) => state.finishState.value\n\nexport default finishSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSave, faFileExport, faTimesCircle, IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setState, selectFinishState, finish } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst FinishMenu : React.FC<{}> = () => {\n\n  const saveProcessCancelStyle = css({\n    borderBottom: '1px solid #BBB',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-around',\n    alignItems: 'space-around',\n    padding: '20px',\n    gap: '30px',\n  })\n\n  return (\n    <div css={saveProcessCancelStyle} title=\"Select Finish Option Area\">\n        <FinishMenuButton iconName={faSave} stateName=\"Save\"/>\n        <FinishMenuButton iconName={faFileExport} stateName=\"Process\"/>\n        <FinishMenuButton iconName={faTimesCircle} stateName=\"Abort\"/>\n    </div>\n  );\n}\n\n/**\n * Buttons for the finish menu\n */\nconst FinishMenuButton: React.FC<{iconName: IconDefinition, stateName: finish[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectFinishState)\n\n  const mainMenuButtonStyle = {\n    width: '200px',\n    height: '200px',\n    ...(activeState === stateName) && {\n      backgroundColor: 'lightblue',\n    },\n    flexDirection: 'column' as const,\n  };\n\n  return (\n    <div css={[basicButtonStyle, mainMenuButtonStyle]} title={stateName}\n      onClick={() => {\n        dispatch(setState(stateName));\n      }}>\n      <FontAwesomeIcon  icon={iconName} size=\"3x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\n\n\nexport default FinishMenu;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, setSelectedWorkflowIndex } from '../redux/videoSlice'\n\n/**\n * Allows the user to select a workflow\n */\nconst WorkflowSelection : React.FC<{}> = () => {\n\n  // Initialite redux states\n  const workflows = useSelector(selectWorkflows)\n\n  // Create workflow selection\n  const workflowButtons = () => {\n    return (\n      workflows.map( (workflow: any, index: number) => (\n        <WorkflowButton key={index} stateName={workflow.name} workflowIndex={index}/>\n      ))\n    );\n  }\n\n  const workflowStyle = css({\n    borderRight: '1px solid #BBB',\n    width: '350px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'left',\n    padding: '20px',\n    paddingRight: '40px',\n    gap: '30px',\n  })\n\n  return (\n    <div css={workflowStyle} title=\"Workflow Selection Area\">\n      <h2>Workflow Selection</h2>\n      {workflowButtons()}\n    </div>\n  );\n}\n\n/**\n * Clicking this button sets the associated workflow as selected\n * @param param0\n */\nconst WorkflowButton: React.FC<{stateName: string, workflowIndex: number}> = ({stateName, workflowIndex}) => {\n\n  const dispatch = useDispatch();\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const workflowButtonStyle = css({\n    backgroundColor: workflowIndex !== selectedWorkflowIndex ? 'snow' : 'lightblue',\n    padding: '16px',\n  });\n\n  return (\n    <div css={[basicButtonStyle,workflowButtonStyle]} title={\"Workflow Button for \"+stateName}\n      onClick={() =>\n        dispatch(setSelectedWorkflowIndex(workflowIndex))\n      }>\n      <span>{stateName}</span>\n    </div>\n  );\n}\n\nexport default WorkflowSelection;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { Segment, PostEditArgument, httpRequestState } from '../types'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformation = createAsyncThunk('video/postVideoInformation', async (argument: PostEditArgument) => {\n  const response = await client.post(`http://localhost:8081/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments) }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostSlice = createSlice({\n  name: 'workflowPostState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\ninterface segmentAPI {\n  start: number,\n  end: number,\n  deleted: boolean,\n  selected: boolean,\n}\n\n// Convert a segment from how it is stored in redux into\n// a segment that can be send to Opencast\nexport const convertSegments = (segments: Segment[]) => {\n  let newSegments: segmentAPI[] = []\n\n  segments.forEach(segment => {\n    newSegments.push({\n      start: segment.start,\n      end: segment.end,\n      deleted: segment.deleted,\n      selected: false,\n    })\n  });\n\n  return newSegments\n}\n\nexport const selectStatus = (state: { workflowPostState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\nexport default workflowPostSlice.reducer\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { PostAndProcessEditArgument, httpRequestState } from '../types'\n\nimport { convertSegments } from './workflowPostSlice'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformationWithWorkflow = createAsyncThunk('video/postVideoInformationWithWorkflow', async (argument: PostAndProcessEditArgument) => {\n  const response = await client.post(`http://localhost:8081/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), worklows: argument.workflowID }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes and starting a workflow\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostAndProcessSlice = createSlice({\n  name: 'workflowPostAndProcessState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformationWithWorkflow.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\nexport const selectStatus = (state: { workflowPostAndProcessState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostAndProcessState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\n\nexport default workflowPostAndProcessSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\nimport { faSpinner, faDotCircle, faCheck, faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, selectSegments, } from '../redux/videoSlice'\nimport { postVideoInformationWithWorkflow, selectStatus, selectError } from '../redux/workflowPostAndProcessSlice'\n\n/**\n * Will eventually display settings based on the selected workflow index\n */\nconst WorkflowConfiguration : React.FC<{}> = () => {\n\n  const postAndProcessWorkflowStatus = useSelector(selectStatus);\n  const postAndProcessError = useSelector(selectError)\n\n  const workflowConfigurationStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  const errorBoxStyle = css({\n    ...(postAndProcessWorkflowStatus !== 'failed') && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  return (\n    <div css={workflowConfigurationStyle} title=\"Workflow Configuration Area\">\n      <h2>Workflow Configuration</h2>\n      <FontAwesomeIcon icon={faTools} size=\"10x\" />\n      Under Construction\n      <SaveAndProcessButton />\n      <div css={errorBoxStyle} title=\"Error Box\">\n        <span>An error has occured. Please wait a bit and try again. Details: </span><br />\n        {postAndProcessError}\n      </div>\n    </div>\n  );\n\n}\n\n/**\n * Button that sends a post request to save current changes\n * and starts the selected workflow\n */\nconst SaveAndProcessButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const workflows = useSelector(selectWorkflows)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n  const segments = useSelector(selectSegments)\n  const workflowStatus = useSelector(selectStatus);\n\n  // Update based on current fetching status\n  let icon = faDotCircle\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n  }\n\n  const saveButtonStyle = css({\n    borderWidth: '1px',\n    borderColor: workflowStatus === 'failed' ? 'red' : 'green',\n    borderStyle: 'solid',\n    padding: '16px',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Process\"}\n      onClick={() =>\n        dispatch(postVideoInformationWithWorkflow({\n          segments: segments,\n          mediaPackageId: \"9bf8aec2-10f5-4c64-bfde-2752fa3a394d\",\n          workflowID: workflows[selectedWorkflowIndex],\n        }))\n      }>\n      <FontAwesomeIcon  icon={icon} size=\"1x\"/>\n      <span>{\"Start Processing\"}</span>\n    </div>\n  );\n}\n\nexport default WorkflowConfiguration;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface abort {\n  value: boolean,\n}\n\nconst initialState: abort = {\n  value: false,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const abortSlice = createSlice({\n  name: 'abortState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<abort[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = abortSlice.actions\n\n// Export Selectors\nexport const selectAbortState = (state: { abortState: { value: abort[\"value\"] }; }) => state.abortState.value\n\nexport default abortSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport WorkflowSelection from \"./WorkflowSelection\";\nimport WorkflowConfiguration from \"./WorkflowConfiguration\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSpinner, faDotCircle, faCheck, faExclamationCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { selectSegments } from '../redux/videoSlice'\nimport { postVideoInformation, selectStatus, selectError } from '../redux/workflowPostSlice'\nimport { setState as setAbortState } from '../redux/abortSlice'\n\n/**\n * Display content based on the state select in the finish menu\n */\nconst FinishContent : React.FC<{}> = () => {\n\n  const finishContentStyle = css({\n    width: '100%',\n    height: '100%',\n  })\n\n  return (\n    <div css={finishContentStyle} title=\"Select Finish Option Area\">\n      <Save />\n      <Process />\n      <Abort />\n    </div>\n  );\n}\n\n/**\n * Shown if the user wishes to save.\n * Informs the user about saving and displays a save button\n */\nconst Save : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const postWorkflowStatus = useSelector(selectStatus);\n  const postError = useSelector(selectError)\n\n  const saveStyle = css({\n    height: '100%',\n    display: finishState !== \"Save\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '20px',\n  })\n\n  const errorBoxStyle = css({\n    ...(postWorkflowStatus !== 'failed') && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  return (\n    <div css={saveStyle} title=\"Save Area\">\n      <span>\n        Save the changes you made, but the video will not be cut yet. <br />\n        To make Opencast cut the video, please select \"Process\". <br />\n        Doth thou truly wish tah save?\n      </span>\n      <SaveButton />\n      <div css={errorBoxStyle} title=\"Error Box\">\n        <span>An error has occured. Please wait a bit and try again. Details: </span><br />\n        {postError}<br />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Shown if the user wishes to process.\n * Informs the user about processing and displays workflow selection\n * and workflow configuration\n */\nconst Process : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const startWorkflowStyle = css({\n    height: '100%',\n    display: finishState !== \"Process\" ? 'none' : 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n  })\n  return (\n    <div css={startWorkflowStyle} title=\"Workflow Container\">\n      <WorkflowSelection />\n      <WorkflowConfiguration />\n    </div>\n  );\n}\n\n/**\n * Shown if the user wishes to abort.\n * Informs the user about aborting and displays abort button.\n */\nconst Abort : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const cancelStyle = css({\n    display: finishState !== \"Abort\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '20px',\n  })\n\n  return (\n    <div css={cancelStyle} title=\"Abort Area\">\n      <span>\n        Discard all the changes you made? They will be lost forever! <br />\n        Doth thou truly wish tah abort?\n      </span>\n      <AbortButton />\n    </div>\n  );\n}\n\n/**\n * Button that sends a post request to save current changes\n */\nconst SaveButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const segments = useSelector(selectSegments)\n  const workflowStatus = useSelector(selectStatus);\n\n  // Update based on current fetching status\n  let icon = faDotCircle\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n  }\n\n  const saveButtonStyle = css({\n    width: '200px',\n    borderWidth: '1px',\n    borderColor: workflowStatus === 'failed' ? 'red' : 'green',\n    borderStyle: 'solid',\n    padding: '16px',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Save\"}\n      onClick={() =>\n        dispatch(postVideoInformation({\n          segments: segments,\n          mediaPackageId: \"9bf8aec2-10f5-4c64-bfde-2752fa3a394d\",\n        }))\n      }>\n      <FontAwesomeIcon  icon={icon} size=\"1x\"/>\n      <span>{\"Save\"}</span>\n    </div>\n  );\n}\n\n/**\n * Button that sets the app into an aborted state\n */\nconst AbortButton : React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const saveButtonStyle = css({\n    width: '200px',\n    borderWidth: '1px',\n    borderColor: 'red',\n    borderStyle: 'solid',\n    padding: '16px',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Abort Button\"}\n      onClick={() =>\n        dispatch(setAbortState(true))\n      }>\n      <span>{\"Abort\"}</span>\n    </div>\n  );\n}\n\nexport default FinishContent\n","import React from \"react\";\n\nimport Video from './Video';\nimport Timeline from './Timeline';\nimport CuttingActions from './CuttingActions';\nimport FinishMenu from \"./FinishMenu\";\nimport FinishContent from \"./FinishContent\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useSelector } from 'react-redux'\nimport { selectMainMenuState } from '../redux/mainMenuSlice'\n\nimport { MainMenuStateNames } from '../types'\n\n/**\n * A container for the main functionality\n * Shows different components depending on the state off the app\n */\nconst MainContent: React.FC<{}> = () => {\n\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  const cuttingStyle = css({\n    width: '100%',\n    display: mainMenuState !== MainMenuStateNames.cutting ? 'none' :'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    paddingLeft: '20px',\n  })\n\n  const saveProcessCancelStyle = css({\n    display: mainMenuState !== MainMenuStateNames.finish ? 'none' : 'flex',\n    width: '100%',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n  })\n\n  const defaultStyle = css({\n    display: (mainMenuState === MainMenuStateNames.cutting || mainMenuState === MainMenuStateNames.finish)\n              ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n     <div title=\"MainMenuContext\" css={{width: '100%'}}>\n      <div css={cuttingStyle} title=\"Cutting Container\">\n          <Video />\n          <CuttingActions />\n          <Timeline />\n      </div>\n      <div css={saveProcessCancelStyle} title=\"Workflow Container\">\n        <FinishMenu />\n        <FinishContent />\n      </div>\n      <div css={defaultStyle}>\n        <FontAwesomeIcon icon={faTools} size=\"10x\" />\n        Under Construction\n      </div>\n     </div>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faTimesCircle, faQuestion, } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector } from 'react-redux';\nimport { selectDuration } from '../redux/videoSlice'\nimport { selectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\n/**\n * This page is to be displayed when the user is \"done\" with the editor\n * and should not be able to perfom any actions anymore\n * TODO: Improve state management somehow to avoid the possibility of an error case\n * TODO: Improve text\n * TODO: Add a button that closes the editor window/frame?\n */\nconst TheEnd : React.FC<{}> = () => {\n\n  // Init redux variables\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(selectStatus)\n  const duration = useSelector(selectDuration)\n\n  const icon = () => {\n    if (abortState) {\n      return faTimesCircle\n    } else if (postAndProcessState === \"success\") {\n      return faCheckCircle\n    } else {\n      return faQuestion\n    }\n  }\n\n  const text = () => {\n    if (abortState) {\n      return \"You really did it. All your changes are now lost forever. You can now continue doing whatever you want.\"\n    } else if (postAndProcessState === \"success\") {\n      return `Changes successfully saved to Opencast. Processing your changes may take up to\n              ${new Date((duration * 2)).toISOString().substr(11, 8)} hours.\n              You can now close the editor.`\n    } else {\n      return \"Now this is awkward. Something has gone very wrong.\"\n    }\n  }\n\n  const theEndStyle = css({\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n    <div css={theEndStyle} title=\"The last area\">\n      <FontAwesomeIcon icon={icon()} size=\"10x\" />\n      {text()}\n    </div>\n  );\n}\n\nexport default TheEnd","import React from \"react\";\n\nimport MainMenu from './MainMenu';\nimport MainContent from './MainContent';\nimport TheEnd from './TheEnd';\n\nimport { useSelector } from 'react-redux';\nimport { selectStatus as postAndProcessSelectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\nconst Body: React.FC<{}> = () => {\n\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(postAndProcessSelectStatus)\n\n  // If we're in a special state, display a special page\n  // Otherwise display the normal page\n  const main = () => {\n    if(abortState || postAndProcessState === \"success\") {\n      return (\n        <TheEnd />\n      );\n    } else {\n      return (\n        <div css={bodyStyle} title=\"Body\">\n          <MainMenu />\n          <MainContent />\n        </div>\n      );\n    }\n  }\n\n  const bodyStyle = {\n    display: 'flex',\n    flexDirection: 'row' as const,\n  };\n\n  return (\n    <React.Fragment>\n      {main()}\n    </React.Fragment>\n  );\n};\n\nexport default Body;\n","import React from 'react';\nimport Body from './main/Body';\nimport { GlobalStyle } from './cssStyles'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport mainMenuStateReducer from './mainMenuSlice'\nimport finishStateReducer from './finishSlice'\nimport videoReducer from './videoSlice'\nimport workflowPostReducer from './workflowPostSlice'\nimport workflowPostAndProcessReducer from './workflowPostAndProcessSlice'\nimport abortReducer from './abortSlice'\n\nexport default configureStore({\n  reducer: {\n    mainMenuState: mainMenuStateReducer,\n    finishState: finishStateReducer,\n    videoState: videoReducer,\n    workflowPostState: workflowPostReducer,\n    workflowPostAndProcessState: workflowPostAndProcessReducer,\n    abortState: abortReducer,\n  }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>    \n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}